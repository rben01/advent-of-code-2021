antoraSearch.initSearch(lunr, {"index":{"version":"2.3.9","fields":["title","name","text","component"],"fieldVectors":[["title/1-1",[0,14.313]],["name/1-1",[]],["text/1-1",[]],["component/1-1",[]],["title/1-2",[1,13.121,2,21.537]],["name/1-2",[]],["text/1-2",[]],["component/1-2",[]],["title/1",[3,27.387,4,21.656,5,32.684]],["name/1",[6,1.17]],["text/1",[1,1.324,2,2.619,3,5.152,4,4.293,5,2.587,7,2.587,8,2.587,9,2.951,10,5.985,11,4.457,12,5.109,13,4.457,14,1.635,15,2.025,16,1.966,17,1.199,18,2.168,19,2.878,20,2.951,21,2.347,22,1.384,23,2.951,24,1.364,25,1.803,26,3.907,27,1.635,28,2.168,29,2.951,30,2.025,31,3.058,32,3.282,33,2.951,34,1.635,35,2.951,36,2.724,37,2.951,38,2.168,39,1.714,40,2.951,41,2.347,42,2.168,43,2.951,44,2.951,45,3.907,46,4.271,47,2.951,48,2.951,49,2.347,50,2.951,51,2.025,52,2.951,53,2.951,54,2.587,55,2.951,56,2.951,57,2.168,58,2.951,59,2.347,60,2.587,61,2.951,62,2.347,63,2.951,64,2.951,65,1.905,66,0.931,67,1.563,68,2.951,69,2.168,70,2.361,71,2.347,72,2.951,73,2.951,74,1.439,75,1.803,76,2.951,77,2.168,78,2.878,79,2.025,80,2.168,81,3.545,82,4.457,83,2.951,84,4.708,85,2.587,86,2.587,87,1.714,88,2.951,89,2.347,90,2.951,91,2.951,92,2.951,93,2.951,94,2.951,95,2.587,96,2.51,97,2.587,98,2.347,99,2.587,100,1.333,101,2.951,102,0.959,103,2.951,104,2.951,105,2.951,106,2.951,107,5.371,108,1.644,109,2.951,110,2.361,111,2.025,112,4.457,113,3.907,114,1.874,115,3.907,116,2.878,117,4.457,118,4.457,119,2.951,120,2.951,121,4.457,122,4.662,123,4.457,124,2.951,125,2.587,126,2.951,127,2.951,128,2.951,129,1.693,130,1.222,131,0.429,132,2.587,133,2.587,134,0.457,135,2.587,136,1.241,137,1.905,138,2.587,139,1.498,140,2.587,141,1.714,142,2.587,143,2.587,144,1.905,145,2.587,146,1.803,147,2.587,148,2.587,149,1.803,150,2.168,151,2.347,152,2.168,153,1.563,154,2.587,155,2.587,156,1.714,157,2.587,158,2.168,159,2.347,160,2.587,161,2.587,162,2.025,163,2.587,164,2.025,165,2.347,166,2.347,167,2.587,168,2.168,169,2.587,170,2.587,171,2.347,172,2.587,173,2.168,174,2.347,175,2.587,176,2.347,177,2.587,178,2.587,179,2.347,180,2.587,181,2.168,182,2.347,183,2.347,184,2.347,185,2.587,186,1.563,187,2.347,188,2.587,189,2.347,190,2.347,191,2.587,192,2.587,193,2.347,194,2.347,195,2.168,196,2.347,197,2.347,198,2.587,199,2.168,200,2.587,201,2.587,202,3.907,203,2.347,204,2.951,205,2.951,206,1.803,207,1.803,208,1.635,209,2.587,210,1.563,211,2.587]],["component/1",[212,0.598]],["title/2-1",[0,14.313]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[131,5.422,134,5.779,213,4.587]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2",[130,4.691,131,4.691,132,28.278,133,28.278]],["name/2",[214,0.635]],["text/2",[1,1.685,2,2.009,14,2.283,16,1.261,24,1.736,41,3.277,66,1.299,75,2.518,96,2.64,102,2.382,108,2.243,129,2.046,130,0.599,131,1.066,134,0.879,136,1.733,206,2.518,213,0.86,215,1.299,216,2.229,217,3.295,218,4.892,219,6.382,220,6.128,221,6.991,222,5.425,223,3.856,224,4.513,225,4.121,226,5.688,227,4.121,228,4.121,229,4.121,230,2.518,231,4.121,232,3.612,233,4.121,234,3.277,235,1.733,236,2.661,237,3.277,238,4.121,239,2.472,240,5.674,241,4.121,242,2.518,243,2.661,244,4.121,245,4.121,246,1.733,247,4.121,248,6.489,249,2.204,250,1.862,251,1.789,252,4.121,253,4.121,254,4.121,255,4.121,256,4.121,257,4.121,258,4.121,259,4.121,260,4.121,261,1.424,262,5.674,263,3.612,264,1.339,265,1.299,266,1.469,267,3.612,268,3.612,269,4.121]],["component/2",[212,0.598]],["title/3-1",[0,14.313]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[131,6.423,213,5.434]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[134,6.846,213,5.434]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3",[130,5.422,134,5.779,135,32.684]],["name/3",[214,0.635]],["text/3",[1,1.465,16,1.035,24,1.509,25,2.067,66,1.555,69,2.485,96,2.731,102,1.892,108,2.244,110,3.981,114,2.074,130,0.492,134,0.765,209,5.963,215,1.067,218,2.184,249,1.836,251,2.239,261,1.169,264,1.099,265,1.067,266,1.206,270,2.321,271,2.69,272,3.383,273,3.383,274,2.184,275,2.321,276,2.184,277,1.815,278,3.716,279,6.427,280,4.585,281,2.281,282,2.965,283,3.383,284,3.383,285,1.792,286,5.966,287,3.454,288,4.157,289,1.792,290,2.184,291,2.184,292,1.422,293,1.587,294,1.474,295,4.592,296,7.119,297,2.321,298,2.184,299,2.321,300,3.383,301,3.383,302,3.383,303,3.383,304,3.383,305,1.329,306,1.792,307,3.383,308,3.383,309,2.965,310,2.586,311,2.004,312,4.933,313,2.965,314,5.608,315,3.383]],["component/3",[212,0.598]],["title/4-1",[0,14.313]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[131,6.423,213,5.434]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[134,6.846,213,5.434]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4",[130,4.691,136,13.565,137,20.828,138,28.278]],["name/4",[214,0.635]],["text/4",[0,0.613,1,1.098,6,3.053,8,2.032,14,2.047,16,1.41,17,1.501,24,1.41,27,1.284,32,1.417,38,1.703,39,1.346,49,1.843,65,2.386,66,0.731,74,1.13,80,1.703,87,1.346,96,2.688,102,1.497,108,1.872,111,3.161,114,0.975,116,2.386,129,0.731,130,0.337,131,1.064,134,0.573,136,1.554,137,2.386,139,1.177,149,1.417,173,2.714,181,1.703,215,0.731,216,1.452,217,2.34,223,2.247,230,2.258,235,1.938,239,2.29,243,1.497,249,1.165,250,1.047,251,1.453,261,0.801,264,0.753,265,0.731,266,0.826,274,2.975,278,2.146,281,0.826,288,2.258,294,1.61,306,1.228,310,2.611,316,1.843,317,2.318,318,1.497,319,3.695,320,2.146,321,1.228,322,1.703,323,1.843,324,2.318,325,1.876,326,1.59,327,2.318,328,2.318,329,1.843,330,3.394,331,2.975,332,2.146,333,2.912,334,1.843,335,1.703,336,1.284,337,2.318,338,1.843,339,3.695,340,5.225,341,2.318,342,1.59,343,2.032,344,2.032,345,2.318,346,3.161,347,3.212,348,2.318,349,2.032,350,1.497,351,1.284,352,1.752,353,1.703,354,2.318,355,1.59,356,2.032,357,1.843,358,4.608,359,2.318,360,2.318,361,1.554,362,2.318,363,2.318,364,2.318,365,2.318,366,2.318,367,2.318,368,2.318,369,3.239,370,2.318,371,2.318,372,5.257,373,4.608,374,4.608,375,5.742,376,4.039,377,6.419,378,4.866,379,2.714,380,2.318,381,1.843,382,4.608,383,2.032,384,2.318,385,2.318,386,2.318,387,2.318,388,2.318,389,2.318,390,2.318,391,1.417,392,1.284,393,2.939,394,1.284,395,1.497,396,2.032,397,2.318,398,2.975,399,3.695,400,2.318,401,2.318,402,2.318,403,2.318,404,2.318,405,2.318,406,2.318,407,2.318,408,2.318,409,3.695,410,2.318,411,2.318,412,2.318,413,2.318,414,2.318,415,3.695,416,3.695,417,5.257,418,2.318,419,5.257,420,3.239,421,1.417,422,1.417,423,3.053,424,5.375,425,1.843,426,2.146,427,2.939,428,1.843,429,1.497,430,1.59,431,2.318,432,2.318,433,2.032,434,2.032,435,3.939,436,2.318,437,1.228,438,1.59,439,2.318,440,3.695,441,1.703,442,2.032,443,1.047,444,2.318,445,2.032,446,2.032,447,1.843,448,2.318,449,2.318,450,2.318,451,1.13,452,2.318,453,1.843,454,4.608,455,2.318,456,2.318,457,1.346,458,2.318,459,3.695,460,2.032,461,3.259,462,2.318,463,2.318,464,3.695,465,2.318,466,2.318,467,2.318,468,2.318,469,1.59,470,2.318,471,2.318,472,2.318,473,2.318,474,2.318,475,2.676,476,2.318,477,2.318,478,2.032]],["component/4",[212,0.598]],["title/5-1",[0,14.313]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[131,6.423,213,5.434]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[134,6.846,213,5.434]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5",[84,28.278,130,4.691,139,16.38,140,28.278]],["name/5",[214,0.635]],["text/5",[1,1.062,2,1.084,3,2.626,4,2.076,7,1.949,14,1.232,16,1.094,17,1.821,22,1.043,24,1.721,27,1.232,31,1.526,34,1.232,39,1.292,60,3.133,66,0.701,74,1.084,85,1.949,96,2.714,102,1.952,108,2.174,129,1.773,130,0.323,131,0.652,134,0.345,136,0.935,139,1.815,186,2.374,199,1.634,210,1.178,215,0.701,216,0.874,223,1.084,230,2.184,239,3.248,242,1.359,246,0.935,249,1.127,250,1.005,251,1.991,261,0.768,264,0.723,265,0.701,266,0.793,275,1.526,277,1.65,278,1.292,280,2.308,281,1.598,282,1.949,289,1.178,293,2.408,294,1.952,305,0.874,310,1.704,311,0.904,321,1.894,330,2.308,331,4.374,332,1.292,336,1.232,346,2.452,347,1.359,352,1.951,361,2.159,378,2.843,392,1.232,423,2.076,426,3.667,429,1.436,443,1.005,451,1.743,461,1.129,479,5.754,480,1.949,481,6.862,482,6.313,483,4.93,484,3.771,485,3.575,486,3.929,487,3.564,488,3.858,489,5.134,490,2.452,491,3.575,492,2.452,493,3.575,494,1.949,495,1.949,496,2.224,497,1.436,498,3.575,499,1.769,500,1.949,501,5.134,502,1.949,503,1.526,504,1.949,505,2.224,506,1.769,507,2.224,508,2.224,509,1.949,510,1.949,511,2.224,512,2.224,513,1.526,514,1.436,515,2.224,516,2.224,517,2.224,518,2.224,519,1.232,520,1.769,521,1.769,522,1.526,523,1.129,524,1.949,525,1.503,526,4.482,527,2.817,528,3.575,529,2.224,530,2.44,531,2.224,532,2.224,533,2.224,534,3.575,535,3.575,536,3.575,537,2.224,538,3.137,539,3.133,540,1.769,541,1.436,542,2.224,543,2.739,544,2.224,545,2.224,546,2.224,547,2.224,548,2.224,549,2.224,550,1.769,551,2.224,552,2.224,553,2.224,554,3.575,555,3.575,556,2.224,557,1.949,558,4.076,559,1.436,560,1.949,561,3.575,562,2.224,563,1.769,564,2.224,565,2.224,566,2.224,567,2.224,568,2.224,569,2.224,570,2.224,571,2.224,572,2.224,573,1.292,574,2.224,575,2.224,576,2.224,577,2.224,578,2.224,579,2.224,580,1.129,581,2.224,582,1.526,583,1.949,584,3.575,585,2.224,586,3.575,587,3.575,588,3.575,589,2.452,590,1.292,591,1.526,592,1.949,593,1.949,594,1.949,595,2.224,596,2.224,597,2.224,598,2.224,599,3.575,600,2.224,601,1.043,602,2.224,603,2.224]],["component/5",[212,0.598]],["title/6-1",[0,14.313]],["name/6-1",[]],["text/6-1",[]],["component/6-1",[]],["title/6-2",[131,6.423,213,5.434]],["name/6-2",[]],["text/6-2",[]],["component/6-2",[]],["title/6-3",[134,6.846,213,5.434]],["name/6-3",[]],["text/6-3",[]],["component/6-3",[]],["title/6",[130,4.691,141,18.737,142,28.278,143,28.278]],["name/6",[214,0.635]],["text/6",[1,1.224,16,1.736,17,1.675,24,1.261,39,1.547,66,0.84,70,3.801,74,1.299,87,1.547,96,2.696,100,1.203,102,1.844,108,2.139,110,2.183,114,1.12,122,3.962,129,1.789,130,0.387,131,0.984,134,0.781,136,1.12,141,2.394,186,2.183,213,0.62,215,0.84,216,1.619,223,1.299,224,1.72,235,1.12,246,1.12,249,1.3,251,1.59,261,1.424,264,0.866,265,0.84,277,1.517,280,2.661,293,1.249,295,1.628,299,1.828,305,1.047,310,1.013,316,2.119,318,1.72,321,2.671,322,3.028,323,2.119,325,1.353,333,1.476,347,2.519,352,2.837,376,2.335,379,1.957,423,1.547,428,2.119,430,3.893,437,3.006,443,1.203,461,2.093,475,2.394,486,2.335,519,2.283,524,2.335,525,1.12,538,1.628,541,2.661,580,1.353,590,2.394,601,1.933,604,2.664,605,1.957,606,5.041,607,5.041,608,5.041,609,5.041,610,2.335,611,5.041,612,2.664,613,3.278,614,2.664,615,2.664,616,2.664,617,2.664,618,2.335,619,1.353,620,1.299,621,1.547,622,1.547,623,2.335,624,2.664,625,5.674,626,2.664,627,2.664,628,2.664,629,2.664,630,2.335,631,2.664,632,3.703,633,5.16,634,4.512,635,5.707,636,2.335,637,2.664,638,2.664,639,5.041,640,2.664,641,6.489,642,2.664,643,4.419,644,2.664,645,2.664,646,2.664,647,2.664,648,2.661,649,4.122,650,4.419,651,4.419,652,2.664,653,2.664,654,2.664,655,2.664,656,1.957,657,2.664,658,4.419,659,5.674,660,4.122,661,2.664,662,1.72,663,1.957,664,4.122,665,5.674,666,4.122,667,4.122,668,4.122,669,2.664,670,2.664,671,2.664,672,5.041,673,2.664,674,2.664,675,1.957,676,2.119,677,2.664,678,2.664,679,2.664,680,2.664,681,2.664,682,2.664,683,2.664,684,4.122,685,2.664,686,2.335,687,2.664,688,2.335,689,1.628,690,4.122,691,4.122,692,2.664,693,2.664,694,2.664,695,4.122,696,2.664,697,4.122,698,1.72,699,2.664,700,2.664]],["component/6",[212,0.598]],["title/7-1",[0,14.313]],["name/7-1",[]],["text/7-1",[]],["component/7-1",[]],["title/7-2",[131,5.422,134,5.779,213,4.587]],["name/7-2",[]],["text/7-2",[]],["component/7-2",[]],["title/7",[130,5.422,144,24.074,145,32.684]],["name/7",[214,0.635]],["text/7",[1,1.922,16,1.73,22,1.923,24,1.73,66,1.293,75,2.506,96,2.703,100,1.852,102,1.333,108,2.372,129,2.385,130,0.596,131,0.941,144,3.651,149,2.506,153,2.995,186,2.172,215,1.293,236,2.647,246,1.724,249,1.783,251,2.04,261,1.417,264,1.333,265,1.293,292,1.724,305,1.611,306,2.172,310,2.149,318,2.647,320,2.382,333,3.132,351,2.271,422,3.954,443,1.852,497,2.647,514,2.647,519,2.271,558,4.178,559,2.647,560,3.594,613,3.261,701,4.101,702,4.496,703,3.261,704,5.654,705,5.654,706,5.654,707,4.101,708,4.101,709,3.261,710,4.101,711,3.261,712,2.647,713,3.261,714,6.472,715,8.322,716,3.594,717,3.594,718,4.101,719,4.101,720,4.101,721,4.101,722,4.101,723,5.654,724,4.101,725,4.101,726,1.999,727,4.101,728,4.101,729,4.101,730,4.101,731,4.101,732,4.101,733,4.101,734,4.101,735,5.654,736,4.101,737,4.101]],["component/7",[212,0.598]],["title/8-1",[0,14.313]],["name/8-1",[]],["text/8-1",[]],["component/8-1",[]],["title/8-2",[131,6.423,213,5.434]],["name/8-2",[]],["text/8-2",[]],["component/8-2",[]],["title/8-3",[134,6.846,213,5.434]],["name/8-3",[]],["text/8-3",[]],["component/8-3",[]],["title/8",[130,4.691,146,19.712,147,28.278,148,28.278]],["name/8",[214,0.635]],["text/8",[1,2.004,2,2.613,15,2.017,16,1.36,24,1.64,32,1.797,39,1.708,46,5.571,66,0.927,70,2.839,78,1.899,96,2.673,102,1.445,108,2.064,110,2.355,114,1.237,129,2.022,130,0.428,131,0.933,134,0.994,146,2.716,196,4.75,206,2.716,208,1.629,213,0.659,215,0.927,216,1.746,217,2.257,223,3.517,226,4.698,235,1.869,236,1.899,239,2.794,242,1.797,249,1.402,251,0.927,261,1.016,264,0.956,265,0.927,266,1.048,287,1.493,288,1.797,297,2.017,305,1.155,306,1.558,310,1.118,314,2.578,392,1.629,495,2.578,503,5.378,506,2.339,519,3.737,539,3.897,558,4.356,559,1.899,580,2.257,648,1.899,662,1.899,686,2.578,689,1.797,698,1.899,738,4.445,739,6.141,740,2.941,741,2.339,742,2.941,743,2.941,744,2.578,745,2.339,746,1.708,747,1.899,748,2.578,749,4.445,750,2.941,751,2.941,752,2.941,753,5.359,754,2.578,755,2.941,756,2.941,757,2.941,758,2.941,759,2.941,760,2.578,761,4.445,762,4.445,763,2.941,764,6.415,765,2.941,766,2.339,767,2.941,768,2.941,769,3.937,770,3.897,771,3.05,772,2.941,773,2.578,774,2.941,775,2.941,776,2.578,777,2.941,778,2.941,779,2.941,780,4.445,781,2.941,782,4.445,783,2.941,784,2.941,785,4.445,786,2.941,787,2.339,788,2.339,789,2.578,790,2.941,791,2.941,792,2.941,793,2.941,794,2.941,795,2.941,796,2.941,797,1.899,798,5.974,799,2.941,800,2.578,801,2.941,802,2.941,803,2.578,804,2.16,805,4.445,806,2.941,807,2.339,808,2.941,809,2.941,810,2.578,811,2.339,812,2.941,813,2.339,814,2.941,815,2.578,816,2.578,817,2.941,818,2.339,819,4.445,820,2.941,821,2.941,822,2.941,823,2.941,824,2.941,825,4.698,826,2.941,827,2.941,828,5.236,829,2.941,830,4.445,831,2.941,832,2.941]],["component/8",[212,0.598]],["title/9-1",[0,14.313]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[131,6.423,213,5.434]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[134,6.846,213,5.434]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9",[130,4.134,149,17.37,150,20.88,151,22.606,152,20.88]],["name/9",[214,0.635]],["text/9",[0,0.296,1,0.801,2,0.546,14,1.106,15,2.246,16,0.611,17,0.811,19,0.724,24,0.611,28,1.466,34,0.621,38,1.466,41,2.146,57,0.823,65,0.724,66,0.353,67,1.734,69,0.823,74,0.973,75,0.685,78,1.289,87,0.651,89,0.891,96,2.705,100,1.219,102,1.064,108,1.963,110,1.429,114,2.025,115,0.982,116,0.724,122,3.985,129,1.423,130,0.163,131,1.243,134,0.582,136,1.579,139,1.662,141,2.181,144,1.742,146,3.105,149,2.294,150,0.823,151,5.406,153,1.429,186,3.115,197,2.146,207,0.685,208,0.621,215,0.353,216,0.44,223,1.316,224,0.724,230,0.685,235,2.025,239,0.488,246,0.471,249,1.032,250,1.479,251,1.518,261,0.387,264,0.364,265,0.353,266,0.4,277,0.412,281,2.037,287,2.445,288,0.685,289,0.594,292,1.377,293,1.265,294,0.488,305,1.475,310,3.021,311,1.096,321,0.594,325,0.569,326,0.769,332,0.651,334,0.891,336,0.621,340,4.816,342,2.246,346,3.095,351,1.106,352,0.759,361,2.858,392,0.621,394,0.621,421,1.22,423,0.651,424,4.059,425,0.891,434,0.982,437,1.734,438,1.369,443,1.479,451,1.596,461,2.445,469,0.769,475,2.417,490,1.851,503,0.769,513,0.769,522,0.769,523,1.37,525,0.471,527,1.265,530,2.321,541,1.742,563,0.891,580,0.569,582,0.769,601,1.535,619,0.569,620,0.546,621,0.651,622,0.651,698,1.742,709,1.587,713,0.891,726,0.546,748,0.982,797,1.742,807,0.891,833,4.512,834,0.891,835,1.121,836,1.121,837,4.394,838,2.698,839,1.121,840,1.121,841,1.121,842,4.816,843,4.512,844,5.007,845,6.093,846,4.512,847,3.274,848,1.587,849,1.121,850,3.274,851,1.996,852,2.698,853,1.121,854,1.121,855,1.587,856,0.685,857,1.121,858,1.121,859,1.121,860,1.121,861,2.246,862,3.274,863,1.982,864,0.982,865,0.982,866,3.755,867,2.698,868,0.982,869,1.121,870,1.996,871,1.996,872,1.996,873,1.121,874,1.121,875,1.996,876,0.891,877,0.823,878,0.982,879,1.121,880,1.121,881,1.121,882,0.823,883,1.121,884,1.982,885,2.405,886,2.604,887,0.982,888,0.982,889,0.891,890,1.121,891,1.996,892,2.698,893,3.755,894,3.274,895,0.769,896,3.588,897,1.587,898,1.982,899,0.769,900,1.121,901,1.996,902,1.121,903,2.698,904,1.121,905,1.121,906,1.996,907,1.121,908,0.982,909,1.121,910,0.546,911,3.755,912,1.996,913,1.121,914,1.121,915,1.121,916,1.121,917,1.121,918,1.121,919,1.996,920,1.121,921,2.698,922,1.121,923,1.121,924,1.121,925,1.121,926,1.121,927,1.982,928,1.996,929,1.121,930,1.121,931,1.121,932,1.121,933,1.121,934,0.982,935,1.996,936,0.982,937,1.121,938,1.121,939,1.121,940,1.121,941,0.982,942,0.982,943,1.121,944,1.121,945,0.769,946,0.594,947,1.121,948,1.121,949,1.121,950,0.982,951,1.121,952,3.274,953,1.996,954,1.121,955,1.121,956,1.121,957,1.121,958,1.121,959,1.996,960,1.121,961,1.121,962,1.121,963,1.121,964,1.121,965,2.986,966,1.996,967,1.996,968,2.698,969,0.685,970,2.698,971,3.274,972,1.996,973,1.121,974,2.698,975,1.996,976,1.121,977,1.121,978,1.121,979,1.121,980,1.121,981,1.121,982,1.996,983,1.996,984,1.369,985,1.121,986,1.121,987,1.121,988,1.121,989,1.121,990,1.121,991,1.121,992,1.121,993,1.121,994,1.121,995,1.121,996,1.121,997,1.121,998,1.749,999,1.121,1000,1.121,1001,1.121,1002,1.121,1003,2.698,1004,1.996,1005,1.996,1006,1.996,1007,1.121,1008,1.121,1009,1.121,1010,1.121,1011,1.121,1012,1.121,1013,1.121,1014,1.121,1015,1.121,1016,1.121,1017,1.121,1018,1.121,1019,1.121,1020,0.982,1021,1.121,1022,1.121,1023,1.121,1024,1.121,1025,1.121,1026,1.121,1027,1.121,1028,1.121,1029,1.121,1030,1.121,1031,1.121,1032,0.823,1033,1.121,1034,0.724,1035,1.996,1036,1.996,1037,4.162,1038,1.121,1039,1.121,1040,1.996,1041,1.121,1042,1.121,1043,1.121,1044,1.121,1045,1.996,1046,1.121,1047,1.121,1048,1.121,1049,1.121,1050,1.121,1051,1.121,1052,1.121,1053,1.121,1054,1.749,1055,1.996,1056,1.121,1057,1.121,1058,1.121,1059,1.121,1060,1.466,1061,1.121]],["component/9",[212,0.598]],["title/10-1",[0,14.313]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[131,6.423,213,5.434]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[134,6.846,213,5.434]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10",[130,4.691,153,17.089,154,28.278,155,28.278]],["name/10",[214,0.635]],["text/10",[1,1.317,16,0.897,24,1.357,25,1.79,66,1.398,96,2.726,102,1.738,108,2.141,129,2.124,130,0.426,131,0.867,134,0.924,139,1.488,153,3.159,213,0.545,215,0.924,217,2.251,223,1.429,246,1.232,249,0.924,251,2.206,261,1.013,264,0.952,265,0.924,266,1.045,277,1.078,281,1.581,292,1.864,298,1.892,305,1.151,311,1.801,326,2.01,330,4.35,331,4.35,347,1.79,350,1.892,352,1.114,355,3.669,361,2.942,398,1.892,421,1.79,426,2.575,437,1.552,451,1.429,453,2.33,469,2.01,488,2.01,523,1.488,525,1.232,527,2.079,543,3.644,573,1.702,601,2.508,613,2.33,746,1.702,771,3.041,818,2.33,984,2.01,1032,2.152,1060,2.152,1062,2.93,1063,2.568,1064,2.568,1065,4.688,1066,2.01,1067,2.93,1068,2.93,1069,2.568,1070,2.93,1071,2.152,1072,1.79,1073,2.93,1074,2.568,1075,2.152,1076,2.33,1077,2.568,1078,2.93,1079,6.405,1080,4.253,1081,2.93,1082,2.152,1083,2.93,1084,3.041,1085,2.568,1086,2.568,1087,1.892,1088,2.33,1089,2.568,1090,2.568,1091,2.93,1092,2.568,1093,2.568,1094,2.93,1095,2.93,1096,2.93,1097,2.93,1098,2.93,1099,5.358,1100,5.348,1101,4.688,1102,3.886,1103,4.433,1104,4.433,1105,3.886,1106,3.886,1107,3.526,1108,2.93,1109,2.93,1110,2.93,1111,2.93,1112,2.93,1113,2.93,1114,2.93,1115,5.348,1116,2.93,1117,2.568,1118,2.568,1119,2.93,1120,2.93,1121,2.93,1122,4.433,1123,2.93,1124,2.93,1125,2.568,1126,2.93,1127,2.93,1128,4.433,1129,5.348,1130,2.93,1131,2.93,1132,2.93,1133,2.93,1134,2.93,1135,2.93,1136,2.93,1137,2.93,1138,2.93,1139,2.93]],["component/10",[212,0.598]],["title/11-1",[0,14.313]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[131,6.423,213,5.434]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11-3",[134,6.846,213,5.434]],["name/11-3",[]],["text/11-3",[]],["component/11-3",[]],["title/11",[130,4.691,156,18.737,157,28.278,158,23.695]],["name/11",[214,0.635]],["text/11",[1,1.19,16,1.507,19,1.658,24,1.226,30,1.762,34,1.423,59,2.042,62,2.042,66,1.263,67,1.36,96,2.734,100,1.16,102,2.17,108,2.172,114,2.34,129,1.263,130,0.373,131,0.373,134,0.621,136,1.685,139,1.304,141,1.492,156,2.327,158,4.087,206,1.569,215,0.81,223,1.252,242,1.569,246,1.08,249,1.263,251,1.553,261,0.887,264,0.835,265,0.81,266,0.916,270,1.762,277,0.945,281,2.151,285,2.609,290,1.658,292,1.08,293,2.31,294,2.424,299,1.762,305,2.186,306,1.36,311,2.451,342,2.748,351,1.423,352,1.523,355,1.762,361,1.08,396,2.251,530,2.451,538,1.569,543,3.4,573,1.492,619,2.501,620,2.402,726,2.402,804,4.431,848,3.186,856,2.448,863,1.886,899,1.762,946,3.659,1032,1.886,1054,2.251,1087,2.587,1140,2.568,1141,6.907,1142,3.618,1143,7.257,1144,2.042,1145,3.512,1146,2.568,1147,2.568,1148,2.042,1149,2.251,1150,2.568,1151,3.01,1152,3.01,1153,6.033,1154,6.033,1155,6.033,1156,6.361,1157,3.507,1158,4.006,1159,2.251,1160,2.568,1161,2.568,1162,2.568,1163,2.568,1164,4.006,1165,2.568,1166,2.568,1167,4.006,1168,2.568,1169,2.568,1170,4.006,1171,2.568,1172,2.568,1173,2.568,1174,2.568,1175,2.568,1176,2.568,1177,2.568,1178,2.568,1179,2.568,1180,2.568,1181,2.568,1182,1.569,1183,2.568,1184,2.568,1185,2.568,1186,2.568,1187,2.568,1188,2.568,1189,2.568,1190,4.006,1191,2.568,1192,4.006,1193,2.568,1194,2.568,1195,2.568,1196,2.568,1197,2.568,1198,2.568,1199,2.568,1200,2.251,1201,4.006,1202,2.568,1203,2.568,1204,2.568]],["component/11",[212,0.598]],["title/12-1",[0,14.313]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[131,6.423,213,5.434]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[134,6.846,213,5.434]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12",[130,4.691,159,25.654,160,28.278,161,28.278]],["name/12",[214,0.635]],["text/12",[1,1.727,16,1.033,24,1.507,51,2.316,66,1.064,69,2.48,96,2.724,102,1.89,108,2.242,129,2.143,130,0.491,131,0.93,156,1.961,159,3.917,207,2.063,215,1.064,220,2.959,246,1.42,249,1.553,250,2.887,251,2.015,261,1.166,264,1.097,265,1.064,266,1.204,275,2.316,276,3.18,277,1.242,281,1.204,289,1.788,292,1.42,298,2.18,305,1.326,310,2.584,320,2.861,330,2.18,331,2.18,350,2.18,352,1.283,355,2.316,361,2.071,398,2.18,426,1.961,457,1.961,461,1.714,503,3.379,513,2.316,530,1.372,543,2.063,573,1.961,594,2.959,675,2.48,771,3.379,969,2.063,1032,2.48,1060,4.695,1080,5.083,1082,2.48,1084,3.379,1085,2.959,1086,2.959,1087,2.18,1088,2.685,1089,2.959,1090,2.959,1092,2.959,1093,2.959,1099,2.685,1101,2.959,1107,2.685,1117,2.959,1118,2.959,1151,2.063,1152,2.063,1157,1.714,1205,3.376,1206,2.685,1207,3.376,1208,3.376,1209,2.959,1210,3.376,1211,7.51,1212,3.376,1213,3.376,1214,3.376,1215,2.959,1216,6.392,1217,5.815,1218,2.18,1219,2.959,1220,2.959,1221,2.959,1222,3.376,1223,7.097,1224,4.925,1225,3.376,1226,3.376,1227,3.376,1228,3.376,1229,3.376,1230,4.925,1231,4.925,1232,3.376,1233,3.376,1234,3.376,1235,3.376,1236,3.376,1237,3.376,1238,3.376,1239,2.685,1240,4.925,1241,3.376,1242,3.376,1243,2.685,1244,3.376]],["component/12",[212,0.598]],["title/13-1",[0,14.313]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[131,5.422,134,5.779,213,4.587]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13",[130,4.691,162,22.13,163,28.278,164,22.13]],["name/13",[214,0.635]],["text/13",[0,0.643,1,1.747,4,2.232,16,1.176,17,1.933,22,1.142,24,1.176,31,1.67,38,1.789,45,2.134,66,0.768,74,1.187,75,1.488,96,2.701,102,1.756,108,2.075,110,1.29,114,1.024,122,1.572,129,1.704,130,0.354,131,0.855,134,0.596,162,2.636,164,4.035,186,2.863,210,1.29,213,0.473,215,0.768,216,0.957,218,3.489,235,1.024,236,1.572,239,1.674,246,1.024,249,1.854,251,2.138,261,0.841,264,0.791,265,0.768,266,0.868,270,1.67,277,1.414,281,1.697,285,1.29,310,0.926,320,1.414,321,1.29,325,1.236,336,1.349,343,2.134,352,0.926,353,1.789,395,2.481,423,1.414,437,1.29,451,2.32,480,2.134,483,3.368,523,1.236,525,2.001,530,2.195,541,2.481,573,1.414,590,3.416,592,2.134,601,1.802,619,1.951,620,1.873,621,2.232,622,2.232,648,3.489,675,1.789,746,1.414,797,1.572,856,2.348,876,1.936,941,2.134,945,1.67,946,2.521,969,1.488,1034,1.572,1066,1.67,1075,4.591,1142,3.969,1145,2.134,1157,2.416,1218,1.572,1219,2.134,1245,1.67,1246,1.789,1247,6.122,1248,2.435,1249,4.297,1250,2.134,1251,3.055,1252,6.543,1253,2.435,1254,4.489,1255,1.572,1256,2.134,1257,2.435,1258,5.882,1259,2.435,1260,2.435,1261,1.67,1262,2.435,1263,5.404,1264,2.134,1265,4.759,1266,2.134,1267,2.435,1268,1.936,1269,1.936,1270,2.435,1271,1.67,1272,2.435,1273,1.936,1274,2.134,1275,2.435,1276,2.435,1277,2.134,1278,1.936,1279,2.636,1280,2.134,1281,1.936,1282,2.134,1283,2.435,1284,1.789,1285,2.435,1286,2.435,1287,2.134,1288,2.134,1289,3.842,1290,3.496,1291,2.435,1292,3.842,1293,2.435,1294,2.435,1295,3.842,1296,2.435,1297,5.882,1298,1.936,1299,1.936,1300,3.368,1301,3.842,1302,3.842,1303,2.481,1304,2.435,1305,2.435,1306,2.435,1307,2.435,1308,2.435,1309,6.25,1310,5.882,1311,5.882,1312,4.759,1313,2.435,1314,2.435,1315,3.842,1316,5.404,1317,2.435,1318,4.759,1319,2.435,1320,3.842,1321,3.842,1322,2.435,1323,2.435,1324,2.435,1325,2.435,1326,2.435,1327,2.435,1328,2.435,1329,2.435,1330,2.435,1331,1.789,1332,2.134,1333,2.232,1334,1.67,1335,1.936,1336,2.435,1337,2.435,1338,2.435,1339,2.435,1340,2.435,1341,2.435,1342,2.435]],["component/13",[212,0.598]],["title/14-1",[0,14.313]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[131,6.423,213,5.434]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[134,6.846,213,5.434]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14",[130,4.691,165,25.654,166,25.654,167,28.278]],["name/14",[214,0.635]],["text/14",[1,1.315,16,1.077,22,1.024,24,1.354,25,1.334,36,1.334,39,2.045,66,1.11,67,1.156,70,1.865,96,2.74,98,1.736,108,2.162,114,1.481,129,0.688,130,0.317,131,0.317,134,0.338,165,2.8,166,1.736,203,1.736,213,0.433,215,0.688,216,0.857,235,0.918,242,1.334,249,1.395,251,2.122,261,0.754,264,0.709,265,1.395,266,0.778,277,1.296,278,1.268,281,2.234,287,1.108,289,1.156,290,1.409,292,0.918,293,1.024,294,0.951,299,1.497,305,0.857,311,0.887,326,1.497,333,1.209,351,1.209,352,1.93,353,1.603,391,1.334,395,1.409,420,1.913,425,1.736,435,1.497,443,1.591,445,1.913,461,3.418,475,4.25,492,1.497,513,1.497,523,1.108,527,1.024,530,2.063,538,1.334,619,1.108,620,1.064,621,1.268,622,1.268,623,1.913,650,1.913,651,3.086,662,1.409,711,1.736,741,1.736,769,1.603,837,1.736,845,1.913,856,1.334,861,1.497,910,1.064,946,2.344,984,1.497,1034,1.409,1072,1.334,1151,1.334,1152,2.152,1157,1.108,1182,1.334,1333,1.268,1343,6.732,1344,2.8,1345,7.598,1346,2.183,1347,7.858,1348,2.183,1349,1.913,1350,3.086,1351,3.521,1352,1.913,1353,2.183,1354,2.183,1355,2.183,1356,3.521,1357,3.086,1358,1.913,1359,1.913,1360,2.183,1361,4.426,1362,2.183,1363,2.183,1364,2.183,1365,3.521,1366,2.183,1367,2.183,1368,2.183,1369,2.183,1370,1.913,1371,2.183,1372,4.426,1373,2.183,1374,2.183,1375,4.426,1376,2.183,1377,2.183,1378,3.521,1379,4.426,1380,2.183,1381,2.183,1382,2.183,1383,2.183,1384,1.913,1385,3.521,1386,2.183,1387,2.183,1388,2.183,1389,2.183,1390,2.183,1391,2.183,1392,2.183,1393,2.183,1394,2.183,1395,1.736,1396,3.521,1397,2.183,1398,2.183,1399,2.183,1400,2.183,1401,2.183,1402,2.183,1403,2.183,1404,2.183,1405,2.183,1406,2.152,1407,2.183,1408,2.183,1409,2.183,1410,2.183,1411,1.913,1412,3.521,1413,2.183,1414,2.183,1415,2.183,1416,1.913,1417,5.956,1418,5.956,1419,3.521,1420,3.521,1421,3.521,1422,2.183,1423,2.183,1424,2.183,1425,1.913,1426,2.183,1427,2.183,1428,1.736,1429,1.603,1430,2.183,1431,2.183,1432,2.183,1433,1.736,1434,2.183,1435,2.183]],["component/14",[212,0.598]],["title/15-1",[0,14.313]],["name/15-1",[]],["text/15-1",[]],["component/15-1",[]],["title/15-2",[131,5.422,134,5.779,213,4.587]],["name/15-2",[]],["text/15-2",[]],["component/15-2",[]],["title/15",[130,4.691,168,23.695,169,28.278,170,28.278]],["name/15",[214,0.635]],["text/15",[1,1.707,3,1.313,4,1.736,6,1.039,14,0.991,16,0.915,17,2.447,19,1.155,22,1.402,24,1.179,27,0.991,32,1.093,34,3.76,36,1.093,46,1.422,57,1.313,66,0.564,67,1.583,74,0.872,75,1.093,81,4.304,96,2.693,102,1.627,108,1.843,110,2.652,114,1.62,116,1.155,129,1.579,130,0.26,131,0.787,134,0.776,156,1.039,168,2.196,186,3.422,211,1.567,215,0.564,216,1.513,222,2.051,224,1.155,230,1.093,235,1.257,237,1.422,239,2.358,246,0.752,249,0.942,250,1.35,251,1.973,261,0.618,264,0.581,265,1.214,266,0.638,277,0.658,278,4.092,281,0.638,285,0.947,287,0.908,289,0.947,292,2.105,294,0.779,295,1.093,298,1.155,305,1.174,310,1.464,311,1.828,321,4.036,325,2.748,335,5.677,342,1.227,346,1.227,352,1.464,357,1.422,361,1.62,394,1.656,395,2.487,422,1.093,437,1.583,441,1.313,443,2.033,469,1.227,490,1.227,492,1.227,497,1.155,519,0.991,525,0.752,530,0.727,541,2.487,580,0.908,590,2.908,591,2.051,619,0.908,620,0.872,621,1.039,622,1.039,662,1.155,698,1.155,709,3.579,711,1.422,712,1.93,746,1.039,766,1.422,855,2.377,856,4.231,877,1.313,889,2.377,898,1.313,908,1.567,910,0.872,945,2.642,946,0.947,1020,1.567,1034,1.155,1066,1.227,1072,1.093,1087,1.93,1148,1.422,1152,1.093,1157,2.542,1218,1.93,1239,1.422,1246,1.313,1255,1.155,1268,1.422,1274,1.567,1279,2.051,1288,1.567,1299,1.422,1303,4.548,1333,1.039,1334,2.051,1370,1.567,1406,1.093,1429,5.389,1436,1.227,1437,1.422,1438,1.313,1439,3.851,1440,2.62,1441,1.567,1442,1.788,1443,1.567,1444,1.788,1445,3.851,1446,1.227,1447,1.313,1448,1.788,1449,2.989,1450,1.788,1451,1.788,1452,1.567,1453,1.788,1454,3.945,1455,5.663,1456,6.07,1457,5.413,1458,2.62,1459,2.62,1460,1.422,1461,1.788,1462,1.788,1463,1.567,1464,2.62,1465,1.788,1466,1.567,1467,1.788,1468,2.196,1469,1.567,1470,4.501,1471,5.138,1472,1.567,1473,2.989,1474,2.989,1475,3.376,1476,1.788,1477,1.422,1478,1.788,1479,1.788,1480,1.788,1481,1.788,1482,1.788,1483,1.788,1484,1.788,1485,1.567,1486,1.567,1487,1.788,1488,1.788,1489,1.788,1490,1.422,1491,1.567,1492,1.788,1493,1.788,1494,1.422,1495,1.788,1496,1.788,1497,1.788,1498,1.788,1499,5.413,1500,4.501,1501,1.788,1502,1.788,1503,1.788,1504,2.989,1505,2.989,1506,1.788,1507,1.788,1508,1.788,1509,1.788,1510,2.989,1511,2.989,1512,1.788,1513,1.788,1514,1.788,1515,1.788,1516,3.851,1517,1.788,1518,2.989,1519,1.788,1520,1.788,1521,1.788,1522,1.788,1523,1.788,1524,1.788,1525,1.788,1526,1.788,1527,1.788,1528,1.788,1529,1.788,1530,3.851,1531,2.989,1532,1.788,1533,1.788,1534,2.989,1535,2.989,1536,2.989,1537,2.989,1538,1.788,1539,4.501,1540,2.989,1541,1.788,1542,1.788,1543,1.788,1544,1.788,1545,1.788,1546,1.788,1547,1.788]],["component/15",[212,0.598]],["title/16-1",[0,14.313]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[131,6.423,213,5.434]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[134,6.846,213,5.434]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16",[130,5.422,171,29.652,172,32.684]],["name/16",[214,0.635]],["text/16",[1,1.474,2,2.42,16,1.519,17,1.751,24,1.319,27,1.163,28,2.506,32,1.283,49,1.669,51,1.44,66,1.076,70,1.112,71,1.669,79,1.44,96,2.708,98,2.713,100,1.947,102,2.087,108,1.886,111,1.44,114,1.434,129,1.359,130,0.305,131,0.993,134,0.325,141,1.219,153,1.112,164,2.956,171,2.713,207,1.283,210,1.112,213,0.42,215,0.662,216,1.34,217,1.066,218,1.355,223,1.023,239,1.877,243,1.355,246,0.883,249,0.662,250,1.947,251,1.721,264,0.682,265,0.662,266,0.748,271,1.669,281,0.748,285,1.112,286,3.645,287,1.732,291,2.782,292,1.434,293,2.328,294,2.378,296,2.99,306,1.112,310,2.224,311,1.386,320,1.981,330,4.147,331,4.599,336,1.163,342,1.44,350,1.355,351,1.163,352,1.638,353,1.542,356,1.84,357,1.669,361,1.434,381,2.713,383,1.84,398,1.355,422,2.084,426,1.219,453,1.669,484,5.641,514,2.202,523,1.732,527,0.984,530,1.386,540,1.669,550,2.713,580,1.732,582,1.44,590,1.219,601,0.984,605,1.542,656,1.542,663,1.542,689,1.283,698,2.202,703,1.669,726,1.023,739,1.84,746,1.219,787,5.99,797,1.355,844,3.778,864,1.84,946,1.807,950,2.99,969,1.283,1076,1.669,1102,2.99,1107,1.669,1144,2.713,1157,1.732,1215,1.84,1245,1.44,1247,3.427,1278,1.669,1279,1.44,1287,1.84,1334,1.44,1350,4.35,1406,1.283,1486,2.99,1548,2.099,1549,2.099,1550,1.84,1551,1.84,1552,1.669,1553,4.35,1554,3.778,1555,3.411,1556,2.099,1557,2.099,1558,1.84,1559,2.099,1560,2.713,1561,2.099,1562,2.099,1563,1.84,1564,2.099,1565,2.099,1566,2.099,1567,1.84,1568,2.099,1569,1.84,1570,3.411,1571,2.099,1572,1.84,1573,1.84,1574,1.84,1575,2.099,1576,4.963,1577,3.427,1578,2.099,1579,3.411,1580,2.099,1581,1.542,1582,2.099,1583,2.099,1584,1.84,1585,2.099,1586,2.099,1587,1.669,1588,1.84,1589,1.84,1590,2.099,1591,3.411,1592,4.31,1593,2.099,1594,1.84,1595,2.099,1596,3.778,1597,2.099,1598,5.85,1599,5.85,1600,3.411,1601,3.411,1602,3.411,1603,4.963,1604,4.963,1605,2.099,1606,3.411,1607,2.099,1608,2.099,1609,2.099,1610,2.099,1611,2.099,1612,2.099,1613,2.099,1614,2.099,1615,2.099,1616,2.099,1617,2.099,1618,2.099,1619,3.411,1620,2.099,1621,2.099,1622,2.099,1623,2.099,1624,2.099,1625,2.099,1626,1.84,1627,1.84,1628,2.099,1629,2.099,1630,2.099,1631,2.099,1632,2.099,1633,1.84,1634,2.099,1635,3.411,1636,3.411,1637,2.099,1638,2.099,1639,2.099,1640,1.84,1641,2.099,1642,3.411,1643,3.411,1644,3.411,1645,3.411,1646,4.31,1647,3.411,1648,2.099,1649,3.411,1650,2.099,1651,2.099,1652,3.411,1653,2.099,1654,3.411,1655,2.099,1656,2.099,1657,2.099]],["component/16",[212,0.598]],["title/17-1",[0,14.313]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[131,6.423,213,5.434]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[134,6.846,213,5.434]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17",[130,4.691,173,23.695,174,25.654,175,28.278]],["name/17",[214,0.635]],["text/17",[1,1.092,2,0.642,4,1.337,16,1.125,17,0.535,21,1.831,22,1.08,24,1.125,25,1.873,30,3.925,36,0.805,42,1.691,57,1.691,59,1.048,65,1.486,66,0.726,67,0.698,71,1.048,75,0.805,87,0.765,96,2.727,99,1.155,100,0.595,102,1.786,108,1.867,122,0.851,125,2.687,129,0.967,130,0.192,131,0.832,134,0.57,136,0.968,137,2.694,139,1.169,141,1.337,144,1.486,146,0.805,162,0.904,173,2.252,174,6.08,202,1.155,207,0.805,208,0.73,210,0.698,213,0.513,215,0.415,216,0.904,218,0.851,219,5.65,223,1.495,224,2.373,235,0.968,239,2.896,242,0.805,243,0.851,249,0.967,250,1.66,251,1.804,261,0.455,264,0.428,265,0.415,266,0.47,270,0.904,271,1.048,274,0.851,276,1.979,277,1.353,281,1.635,285,2.21,286,0.968,287,1.557,291,1.486,292,0.554,310,2.089,311,2.127,316,1.048,318,0.851,321,0.698,325,0.669,333,3.379,335,0.968,340,2.103,346,0.904,351,1.275,361,0.968,391,0.805,393,1.048,394,0.73,421,1.407,428,1.048,429,0.851,435,4.063,443,1.04,447,1.048,451,0.642,457,0.765,461,2.506,475,2.664,478,3.657,492,0.904,494,1.155,509,1.155,514,0.851,523,0.669,525,2.076,527,1.957,530,1.493,559,0.851,589,0.904,590,0.765,591,0.904,601,1.08,620,0.642,658,2.687,663,1.691,689,0.805,702,1.048,712,0.851,741,1.048,771,4.184,776,1.155,797,1.486,848,1.048,856,0.805,865,1.155,877,0.968,895,0.904,898,2.252,934,1.155,946,0.698,1072,0.805,1076,1.048,1077,1.155,1142,3.369,1157,1.557,1182,0.805,1220,1.155,1246,0.968,1271,0.904,1273,1.048,1279,1.579,1280,2.018,1281,1.048,1284,0.968,1290,2.699,1333,0.765,1334,1.579,1384,1.155,1416,1.155,1428,1.048,1429,2.252,1440,1.155,1552,2.922,1558,1.155,1574,1.155,1658,1.318,1659,1.318,1660,2.018,1661,2.018,1662,2.302,1663,1.318,1664,1.318,1665,4.59,1666,0.968,1667,1.155,1668,1.831,1669,1.318,1670,2.687,1671,1.155,1672,1.318,1673,2.302,1674,2.302,1675,3.675,1676,1.318,1677,1.318,1678,1.318,1679,1.318,1680,1.318,1681,4.173,1682,2.302,1683,1.318,1684,4.02,1685,1.048,1686,1.318,1687,1.155,1688,1.318,1689,4.37,1690,4.173,1691,2.018,1692,3.675,1693,1.155,1694,1.048,1695,1.318,1696,1.318,1697,1.155,1698,1.318,1699,1.318,1700,3.846,1701,2.018,1702,1.318,1703,1.318,1704,1.155,1705,1.048,1706,1.155,1707,1.318,1708,1.318,1709,1.318,1710,1.318,1711,1.318,1712,1.318,1713,2.018,1714,1.318,1715,1.318,1716,3.066,1717,1.318,1718,1.318,1719,1.318,1720,1.318,1721,1.318,1722,1.318,1723,2.302,1724,1.318,1725,3.066,1726,1.318,1727,1.318,1728,1.318,1729,1.318,1730,1.318,1731,1.318,1732,1.318,1733,1.318,1734,3.675,1735,1.318,1736,2.302,1737,1.318,1738,1.318,1739,1.318,1740,2.302,1741,4.173,1742,2.302,1743,2.302,1744,5.236,1745,2.302,1746,1.318,1747,3.066,1748,1.318,1749,1.318,1750,1.318,1751,1.318,1752,1.318,1753,2.302,1754,4.587,1755,3.675,1756,2.302,1757,1.318,1758,1.318,1759,2.302,1760,1.318,1761,1.318,1762,1.318,1763,2.302,1764,1.318,1765,2.302,1766,1.318,1767,1.318,1768,1.318,1769,0.968,1770,1.318,1771,1.318,1772,2.302,1773,1.318,1774,2.302,1775,1.318,1776,1.318,1777,1.318,1778,1.318,1779,1.318,1780,1.318,1781,1.318,1782,1.318,1783,1.318,1784,2.302,1785,1.318,1786,1.318,1787,1.318,1788,1.318,1789,1.318,1790,1.318,1791,1.318,1792,0.968,1793,1.318,1794,1.318,1795,1.318,1796,1.318,1797,1.155,1798,0.968,1799,1.318,1800,4.02,1801,3.221,1802,1.318,1803,1.155,1804,1.318,1805,1.048,1806,1.318,1807,1.318,1808,1.318,1809,1.318,1810,1.318,1811,1.318,1812,3.675,1813,2.302,1814,2.302,1815,1.155,1816,1.318,1817,2.302,1818,1.318,1819,1.318,1820,1.318,1821,1.318,1822,1.318,1823,1.318,1824,1.318,1825,1.318,1826,1.318,1827,3.675,1828,1.318,1829,2.302,1830,4.173,1831,1.318,1832,2.302,1833,1.318,1834,1.318,1835,3.066,1836,1.318,1837,1.318]],["component/17",[212,0.598]],["title/18-1",[0,14.313]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[131,6.423,213,5.434]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[134,6.846,213,5.434]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18",[130,4.691,176,25.654,177,28.278,178,28.278]],["name/18",[214,0.635]],["text/18",[1,1.554,2,0.718,16,0.451,17,1.984,18,1.081,22,0.691,24,0.776,27,0.816,31,1.01,32,2.039,34,1.849,51,1.01,62,1.171,66,1.409,70,1.343,77,1.081,78,0.951,79,2.29,89,1.171,96,2.714,100,1.145,102,0.824,108,1.213,110,0.78,114,1.066,129,0.464,130,0.214,131,1,134,0.959,136,0.619,149,1.549,176,1.171,203,1.171,208,1.404,212,0.437,213,0.181,215,0.464,216,1.311,217,2.805,222,1.01,235,1.667,239,1.104,249,0.464,250,1.145,251,0.799,265,0.464,277,1.459,278,3.038,281,0.904,286,1.862,288,1.549,293,1.189,294,2.128,295,0.9,305,0.578,310,2.572,311,0.598,318,0.951,323,1.171,333,1.849,351,0.816,352,0.56,391,0.9,392,1.404,394,0.816,395,0.951,421,0.9,422,2.039,429,2.155,437,1.343,438,1.01,443,1.145,457,0.855,461,2.805,475,3.482,487,1.171,499,2.654,506,1.171,514,0.951,519,2.476,525,1.667,527,1.86,538,4.575,558,2.155,580,0.748,582,1.739,590,3.209,601,2.096,610,2.222,619,1.287,620,1.236,630,1.291,632,2.913,633,2.654,634,2.654,635,2.654,636,1.291,648,1.637,656,1.081,662,1.637,689,0.9,726,1.934,747,2.155,760,4.281,773,3.476,797,0.951,804,1.862,810,1.291,828,1.291,834,1.171,868,1.291,885,1.081,888,2.222,896,2.016,910,1.934,946,0.78,1063,1.291,1071,1.081,1084,1.01,1148,1.171,1157,0.748,1182,0.9,1206,1.171,1209,1.291,1218,2.155,1246,1.081,1251,1.171,1254,1.01,1255,0.951,1269,2.016,1273,2.016,1282,1.291,1332,1.291,1357,2.222,1358,1.291,1359,1.291,1438,1.081,1446,1.01,1490,1.171,1491,1.291,1569,1.291,1572,1.291,1573,1.291,1577,2.016,1668,1.171,1670,1.291,1671,2.926,1689,1.171,1706,2.222,1798,1.081,1838,1.472,1839,1.472,1840,1.472,1841,1.472,1842,2.535,1843,3.338,1844,1.472,1845,1.472,1846,1.291,1847,4.884,1848,5.996,1849,4.47,1850,5.996,1851,2.535,1852,1.291,1853,1.472,1854,1.472,1855,1.472,1856,1.291,1857,2.535,1858,3.965,1859,1.291,1860,1.472,1861,1.472,1862,1.472,1863,1.291,1864,1.291,1865,1.472,1866,1.472,1867,1.472,1868,1.472,1869,1.472,1870,1.472,1871,1.472,1872,2.535,1873,2.222,1874,1.472,1875,1.472,1876,1.472,1877,1.472,1878,4.281,1879,5.524,1880,5.524,1881,6.188,1882,3.338,1883,3.338,1884,3.338,1885,2.535,1886,2.535,1887,5.524,1888,2.535,1889,2.535,1890,1.472,1891,1.472,1892,1.472,1893,1.472,1894,1.472,1895,1.472,1896,3.338,1897,1.472,1898,1.472,1899,1.291,1900,2.535,1901,2.926,1902,1.472,1903,1.472,1904,1.472,1905,1.472,1906,1.472,1907,4.884,1908,1.472,1909,2.535,1910,1.472,1911,1.472,1912,1.472,1913,1.472,1914,1.472,1915,1.472,1916,1.472,1917,1.472,1918,1.291,1919,1.472,1920,1.472,1921,3.338,1922,3.965,1923,1.472,1924,1.472,1925,1.472,1926,2.535,1927,3.338,1928,1.862,1929,1.472,1930,1.472,1931,1.472,1932,1.472,1933,1.472,1934,1.472,1935,1.472,1936,1.472,1937,2.535,1938,1.472,1939,3.338,1940,3.338,1941,1.472,1942,4.884,1943,4.884,1944,1.472,1945,1.472,1946,3.338,1947,1.472,1948,1.472,1949,1.472,1950,3.338,1951,1.291,1952,1.472,1953,1.291,1954,1.472,1955,2.535,1956,1.472,1957,1.472,1958,1.472,1959,3.338,1960,1.472,1961,1.472,1962,1.472,1963,5.777,1964,2.535,1965,2.535,1966,2.535,1967,1.472,1968,3.338,1969,2.535,1970,1.472,1971,5.231,1972,1.472,1973,3.338,1974,3.338,1975,1.291,1976,3.338,1977,1.472,1978,1.472,1979,1.472,1980,1.472,1981,1.171,1982,1.472,1983,2.535,1984,1.472,1985,1.291,1986,2.535,1987,1.472,1988,2.535,1989,1.472,1990,1.171,1991,1.472,1992,1.472,1993,1.472,1994,2.535,1995,1.472,1996,2.535,1997,1.472]],["component/18",[212,0.598]],["title/19-1",[0,14.313]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[131,6.423,213,5.434]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[134,6.846,213,5.434]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19",[130,5.422,179,29.652,180,32.684]],["name/19",[214,0.635]],["text/19",[1,1.033,6,1.544,14,1.472,16,1.259,17,0.632,19,1.005,22,0.73,24,0.813,25,0.951,28,1.143,30,1.067,34,3.972,51,1.067,66,1.457,67,0.824,74,0.759,87,0.904,96,2.727,100,1.201,102,0.864,108,2.105,111,2.823,113,1.364,114,1.118,116,1.005,129,1.097,130,0.226,131,1.016,134,0.638,136,0.654,137,1.005,139,0.79,156,1.544,179,2.114,206,0.951,213,0.428,215,0.491,216,1.367,217,1.766,219,6.101,223,0.759,235,2.117,239,1.158,246,0.654,249,1.297,251,1.992,261,0.538,263,1.364,264,0.506,265,1.587,266,0.555,268,1.364,277,0.978,281,1.24,292,0.654,293,1.93,294,2.342,305,1.044,310,1.914,311,1.672,322,4.345,325,1.766,332,0.904,333,3.591,335,1.143,336,1.472,338,2.767,340,2.387,347,0.951,352,1.564,361,1.463,421,0.951,423,1.544,427,5.826,429,1.005,443,0.703,447,1.237,451,0.759,457,2.021,497,2.656,502,1.364,503,1.823,523,0.79,525,1.118,527,1.632,530,2.694,558,1.005,559,2.246,580,1.766,589,1.067,619,1.35,620,1.296,663,1.143,676,2.114,702,1.237,703,1.237,712,1.005,726,0.759,788,1.237,800,1.364,818,1.237,837,1.237,882,1.143,897,1.237,910,0.759,946,2.667,969,0.951,1060,1.952,1072,2.514,1099,1.237,1125,1.364,1142,1.952,1144,2.114,1157,2.73,1182,0.951,1245,1.067,1247,4.507,1278,2.114,1279,1.067,1298,1.237,1331,1.952,1333,0.904,1334,1.823,1352,1.364,1406,1.624,1438,1.143,1464,1.364,1468,1.143,1477,1.237,1567,2.33,1581,1.143,1627,1.364,1640,1.364,1665,4.714,1666,1.143,1668,1.237,1693,1.364,1697,1.364,1700,1.952,1701,1.364,1769,3.394,1856,1.364,1990,1.237,1998,1.556,1999,1.364,2000,1.556,2001,1.556,2002,1.556,2003,1.556,2004,4.621,2005,5.034,2006,3.479,2007,1.556,2008,1.556,2009,1.556,2010,2.658,2011,3.479,2012,1.556,2013,2.658,2014,1.556,2015,1.556,2016,1.556,2017,2.658,2018,2.658,2019,2.658,2020,2.658,2021,1.556,2022,1.556,2023,1.556,2024,1.556,2025,1.556,2026,1.556,2027,1.556,2028,1.556,2029,1.556,2030,2.658,2031,1.556,2032,1.556,2033,1.364,2034,2.658,2035,2.658,2036,2.658,2037,1.556,2038,1.556,2039,1.556,2040,1.556,2041,1.556,2042,1.364,2043,1.556,2044,3.479,2045,1.556,2046,1.556,2047,1.556,2048,1.556,2049,1.556,2050,1.556,2051,1.556,2052,1.556,2053,1.364,2054,1.556,2055,1.556,2056,1.556,2057,1.556,2058,1.556,2059,1.556,2060,1.556,2061,1.556,2062,1.364,2063,1.556,2064,1.556,2065,1.556,2066,2.658,2067,1.556,2068,1.556,2069,1.556,2070,1.556,2071,1.556,2072,2.658,2073,1.556,2074,4.621,2075,1.556,2076,1.556,2077,1.556,2078,2.658,2079,1.556,2080,1.556,2081,1.556,2082,2.658,2083,1.556,2084,1.556,2085,1.556,2086,1.556,2087,1.556,2088,1.556,2089,1.556,2090,1.556,2091,1.556,2092,2.658,2093,1.364,2094,1.556,2095,1.364,2096,3.479,2097,1.556,2098,3.479,2099,1.556,2100,1.556,2101,1.556,2102,2.658,2103,1.556,2104,1.556,2105,1.556,2106,1.556,2107,1.556,2108,1.556,2109,1.556,2110,1.556,2111,1.556,2112,1.556,2113,1.556,2114,1.556,2115,1.556,2116,1.556,2117,1.556,2118,1.556,2119,1.556,2120,1.556,2121,1.556,2122,1.556,2123,2.658,2124,1.556,2125,2.658,2126,1.556,2127,1.556,2128,1.556,2129,1.556,2130,3.479,2131,1.364,2132,1.556,2133,1.556,2134,1.556,2135,1.556,2136,1.556,2137,1.556,2138,1.556,2139,1.556,2140,1.556,2141,1.556]],["component/19",[212,0.598]],["title/20-1",[0,14.313]],["name/20-1",[]],["text/20-1",[]],["component/20-1",[]],["title/20-2",[131,6.423,213,5.434]],["name/20-2",[]],["text/20-2",[]],["component/20-2",[]],["title/20-3",[134,6.846,213,5.434]],["name/20-3",[]],["text/20-3",[]],["component/20-3",[]],["title/20",[130,4.691,181,23.695,182,25.654,183,25.654]],["name/20",[214,0.635]],["text/20",[1,0.856,2,1.047,4,0.707,6,1.247,12,0.968,15,0.835,16,0.657,17,1.611,22,1.007,24,0.657,25,0.744,26,1.067,27,1.189,31,0.835,32,0.744,34,1.189,39,0.707,66,0.908,70,2.1,77,0.894,78,2.56,79,1.473,87,0.707,96,2.72,100,0.97,102,1.634,108,2.246,110,0.645,111,1.473,129,1.096,130,0.177,131,0.905,134,0.333,136,1.211,153,1.137,162,0.835,181,1.577,182,4.209,183,6.051,195,1.577,208,0.674,210,0.645,213,0.264,215,0.384,216,1.132,217,1.764,235,0.512,236,0.786,242,0.744,243,1.86,246,0.512,249,0.677,251,1.669,261,0.421,264,0.396,265,0.908,266,0.434,274,0.786,277,1.459,280,1.386,281,2.166,285,1.137,287,1.09,291,1.86,293,1.007,294,0.935,295,0.744,297,0.835,305,0.478,306,0.645,310,2.7,311,1.17,321,1.137,325,1.764,338,0.968,347,0.744,352,0.463,361,0.512,378,0.968,391,0.744,392,1.189,394,1.925,395,0.786,424,1.577,426,1.247,427,1.707,433,1.067,437,0.645,442,1.067,443,0.97,446,1.067,461,2.4,475,3.208,488,1.976,490,0.835,492,0.835,500,1.882,522,1.473,525,0.903,527,1.351,530,2.826,538,0.744,543,1.312,557,1.067,563,0.968,580,1.764,601,0.571,605,1.577,619,2.013,620,1.933,621,2.303,622,2.303,632,1.577,633,1.707,634,0.968,635,1.707,712,0.786,726,2.134,766,1.707,789,1.882,813,0.968,825,1.067,861,0.835,876,1.707,886,0.968,895,1.473,897,0.968,899,1.473,910,1.047,927,0.894,942,1.067,965,2.291,1034,0.786,1065,2.525,1066,1.976,1071,1.577,1151,2.423,1152,2.423,1156,2.525,1254,0.835,1261,0.835,1271,0.835,1281,0.968,1284,0.894,1290,0.894,1303,1.386,1344,3.153,1395,0.968,1406,0.744,1433,0.968,1437,5.055,1438,1.577,1459,1.067,1460,0.968,1468,0.894,1469,5.182,1472,1.067,1477,0.968,1560,1.707,1581,0.894,1587,0.968,1694,0.968,1713,1.882,1803,1.067,1805,0.968,1815,1.882,1859,1.067,1899,1.067,1901,1.067,1918,1.067,1953,1.067,1981,0.968,1990,0.968,2131,1.067,2142,1.067,2143,1.217,2144,2.881,2145,3.475,2146,3.476,2147,1.217,2148,4.377,2149,1.217,2150,3.965,2151,3.475,2152,1.067,2153,1.067,2154,1.217,2155,2.147,2156,1.217,2157,1.217,2158,1.217,2159,1.217,2160,1.217,2161,1.217,2162,0.968,2163,0.968,2164,1.067,2165,4.639,2166,5.911,2167,6.479,2168,1.067,2169,1.217,2170,1.217,2171,1.217,2172,1.217,2173,1.217,2174,1.217,2175,1.217,2176,1.217,2177,1.217,2178,1.217,2179,1.217,2180,3.046,2181,1.217,2182,1.217,2183,1.217,2184,1.217,2185,1.217,2186,1.217,2187,2.147,2188,1.217,2189,4.639,2190,1.217,2191,1.217,2192,1.217,2193,1.217,2194,1.217,2195,1.217,2196,1.217,2197,1.217,2198,1.217,2199,1.217,2200,1.217,2201,1.217,2202,1.217,2203,2.147,2204,2.147,2205,2.525,2206,1.217,2207,1.217,2208,1.217,2209,2.147,2210,2.147,2211,2.147,2212,1.217,2213,1.217,2214,1.217,2215,2.147,2216,2.147,2217,1.217,2218,1.217,2219,1.217,2220,1.217,2221,1.217,2222,1.067,2223,0.968,2224,2.147,2225,3.965,2226,3.965,2227,5.293,2228,3.965,2229,5.293,2230,3.965,2231,1.217,2232,3.475,2233,2.147,2234,2.147,2235,2.881,2236,2.881,2237,1.217,2238,1.217,2239,2.147,2240,1.217,2241,2.147,2242,1.217,2243,1.217,2244,1.217,2245,3.475,2246,1.217,2247,1.067,2248,2.147,2249,1.217,2250,1.217,2251,1.217,2252,1.217,2253,1.217,2254,1.217,2255,1.217,2256,1.217,2257,2.147,2258,2.147,2259,2.147,2260,1.217,2261,1.217,2262,1.217,2263,1.217,2264,1.217,2265,1.217,2266,1.217,2267,1.217,2268,1.217,2269,1.217,2270,1.217,2271,1.217,2272,1.217,2273,1.217,2274,1.217,2275,1.217,2276,1.217,2277,1.217,2278,1.217,2279,1.882,2280,1.217,2281,1.217,2282,1.217,2283,1.217,2284,1.217,2285,1.217,2286,1.217,2287,1.217,2288,1.217,2289,1.217,2290,1.217,2291,1.217,2292,2.147,2293,1.217,2294,1.217,2295,2.147,2296,1.217,2297,1.217,2298,1.217,2299,1.067,2300,1.217,2301,1.067,2302,1.217,2303,1.217,2304,1.217,2305,1.217,2306,1.217,2307,1.217,2308,1.217,2309,1.217,2310,1.217,2311,1.217,2312,1.217,2313,1.217,2314,1.217,2315,1.217,2316,1.217,2317,2.147,2318,1.217,2319,1.217,2320,1.217,2321,1.217,2322,1.217,2323,1.217,2324,1.217,2325,1.217,2326,1.217,2327,1.217,2328,1.217,2329,2.147,2330,1.217,2331,1.217,2332,1.217,2333,1.217,2334,1.217,2335,1.217,2336,2.147,2337,1.217,2338,1.217,2339,1.217,2340,1.217,2341,2.881,2342,1.217,2343,1.217,2344,1.882,2345,1.217,2346,1.217,2347,1.217,2348,1.882,2349,1.217,2350,1.217,2351,1.217]],["component/20",[212,0.598]],["title/21-1",[0,14.313]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[131,5.422,134,5.779,213,4.587]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21",[130,4.691,184,25.654,185,28.278,186,17.089]],["name/21",[214,0.635]],["text/21",[1,1.649,6,1.485,14,2.211,16,0.782,17,1.995,18,1.878,22,1.199,24,1.503,27,1.416,36,1.562,66,0.806,67,1.354,74,1.246,96,2.707,100,1.155,102,1.596,108,2.039,129,1.548,130,0.372,131,0.875,134,0.86,137,1.65,184,3.174,206,3.001,208,2.72,210,1.354,213,0.683,215,0.806,216,1.568,232,6.352,239,2.139,249,1.259,250,1.155,251,1.898,261,0.883,264,0.831,265,0.806,266,0.911,275,4.13,276,3.583,277,0.941,281,0.911,289,1.354,292,2.334,295,1.562,298,1.65,305,1.568,311,1.622,318,1.65,320,3.496,321,1.354,322,1.878,330,1.65,331,3.583,332,2.318,336,3.074,347,1.562,349,2.241,350,1.65,352,1.867,361,2.683,369,3.499,379,1.878,398,1.65,435,1.754,451,1.246,497,2.577,525,1.075,527,1.872,530,1.622,540,2.033,543,2.439,573,1.485,589,2.738,771,1.754,803,2.241,834,2.033,863,1.878,910,1.246,965,2.033,1064,2.241,1087,1.65,1088,2.033,1239,2.033,1245,1.754,1261,1.754,1264,2.241,1268,4.413,1269,3.905,1303,1.65,1333,1.485,1335,2.033,1411,3.499,1437,2.033,1485,2.241,1490,2.033,1584,3.499,1594,2.241,1666,1.878,1689,3.174,1694,2.033,1704,2.241,1705,2.033,1792,1.878,1805,2.033,1863,2.241,1873,2.241,2042,2.241,2301,2.241,2352,7.969,2353,2.556,2354,4.911,2355,2.556,2356,6.02,2357,7.247,2358,2.556,2359,2.241,2360,2.556,2361,2.241,2362,2.556,2363,2.556,2364,2.556,2365,2.556,2366,2.556,2367,6.02,2368,4.911,2369,2.556,2370,2.556,2371,2.556,2372,3.992,2373,2.556,2374,2.241,2375,3.992,2376,2.556,2377,2.556,2378,2.556,2379,2.556,2380,2.556,2381,3.992,2382,2.556,2383,4.911,2384,2.556,2385,3.992,2386,2.556,2387,3.992,2388,2.556,2389,3.992,2390,2.556,2391,2.556,2392,2.556,2393,2.556,2394,2.556,2395,2.556,2396,2.556,2397,2.556,2398,2.556,2399,2.556,2400,2.556,2401,2.241,2402,2.556,2403,2.556,2404,2.556,2405,2.556,2406,2.556,2407,2.556,2408,2.556,2409,2.556,2410,2.556,2411,2.556,2412,2.556,2413,5.55,2414,2.556,2415,3.992,2416,3.992,2417,2.556,2418,2.556]],["component/21",[212,0.598]],["title/22-1",[0,14.313]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[131,6.423,213,5.434]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22-3",[134,6.846,213,5.434]],["name/22-3",[]],["text/22-3",[]],["component/22-3",[]],["title/22",[130,4.691,187,25.654,188,28.278,189,25.654]],["name/22",[214,0.635]],["text/22",[1,1.465,16,0.636,17,1.739,22,0.974,24,1.035,30,1.425,34,1.151,65,1.341,66,0.655,86,6.957,96,2.72,100,0.939,102,0.675,108,2.131,114,0.874,116,1.341,129,2.472,130,0.302,131,0.989,134,0.842,136,1.8,146,1.27,150,1.526,153,1.101,156,2.486,158,2.485,187,3.403,189,2.69,210,1.792,213,0.526,215,0.655,216,0.816,223,2.087,224,1.341,235,0.874,236,1.341,239,2.149,246,0.874,249,1.067,251,2.145,261,0.718,264,0.675,265,0.655,266,0.741,277,1.816,278,1.965,281,1.206,287,1.055,288,1.27,294,0.905,297,1.425,298,1.341,299,1.425,305,1.329,306,1.101,310,2.064,321,2.267,325,1.055,329,3.403,332,1.207,333,1.874,361,1.8,392,1.874,394,2.733,430,1.425,451,1.013,457,1.207,460,1.821,479,5.103,481,6.427,525,1.423,530,2.494,583,1.821,590,2.486,593,1.821,648,1.341,662,1.341,716,1.821,726,1.65,744,1.821,746,1.965,747,2.763,769,2.485,807,1.652,811,3.403,855,1.652,884,2.485,895,3.725,910,1.013,969,1.27,1034,1.341,1151,1.27,1182,2.067,1243,1.652,1255,1.341,1436,2.321,1446,2.321,1447,1.526,1452,1.821,1454,2.966,1460,1.652,1494,1.652,1552,3.403,1633,1.821,1660,1.821,1769,1.526,1801,2.966,1878,1.821,1928,1.526,2033,1.821,2419,3.383,2420,2.078,2421,6.138,2422,6.963,2423,3.383,2424,2.078,2425,1.821,2426,2.078,2427,2.078,2428,2.078,2429,2.078,2430,2.078,2431,2.078,2432,3.383,2433,2.078,2434,2.078,2435,2.078,2436,2.078,2437,2.078,2438,2.078,2439,2.078,2440,1.821,2441,2.078,2442,2.69,2443,2.078,2444,2.078,2445,4.28,2446,3.383,2447,2.078,2448,2.078,2449,2.078,2450,4.933,2451,3.383,2452,2.078,2453,2.078,2454,2.078,2455,3.383,2456,2.078,2457,2.078,2458,4.933,2459,2.078,2460,2.078,2461,3.383,2462,2.078,2463,2.078,2464,2.078,2465,3.383,2466,3.383,2467,2.078,2468,2.078,2469,3.383,2470,1.821,2471,2.078,2472,2.078,2473,5.822,2474,4.933,2475,2.078,2476,3.383,2477,3.383,2478,3.383,2479,2.078,2480,2.078,2481,3.383,2482,3.383,2483,2.078,2484,2.078,2485,4.28,2486,3.383,2487,3.383,2488,2.078,2489,2.078,2490,3.383,2491,2.078,2492,2.078,2493,3.383,2494,3.383,2495,4.28,2496,3.383,2497,2.078,2498,2.078,2499,2.078,2500,2.078,2501,2.078,2502,2.078,2503,2.078]],["component/22",[212,0.598]],["title/23-1",[0,14.313]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[131,5.422,134,5.779,213,4.587]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23",[130,4.691,190,25.654,191,28.278,192,28.278]],["name/23",[214,0.635]],["text/23",[1,1.033,14,1.471,16,0.813,17,1.412,24,0.813,66,1.864,67,0.824,74,0.758,80,1.142,96,2.729,108,2.137,114,1.729,129,1.456,130,0.226,131,0.86,134,0.412,136,0.654,190,2.112,208,0.861,210,0.824,213,0.506,215,0.49,216,1.043,217,0.789,235,0.654,249,1.456,250,2.273,251,1.991,261,0.537,264,0.505,265,0.49,266,0.554,267,1.363,276,3.657,277,0.977,280,1.004,281,1.916,285,0.824,287,0.789,289,0.824,290,1.004,291,1.004,292,0.654,293,1.246,294,2.192,295,2.822,305,1.366,306,0.824,309,1.363,311,1.079,313,1.363,325,0.789,334,1.236,351,0.861,352,0.591,361,0.654,379,1.142,391,0.95,392,0.861,423,0.903,435,2.385,437,1.407,438,1.822,441,1.142,443,0.702,457,0.903,469,1.066,484,3.696,487,1.236,490,1.066,497,1.004,519,0.861,523,1.348,525,1.462,527,2.36,530,1.876,550,2.112,559,2.245,573,1.542,601,0.729,632,1.142,643,1.363,688,1.363,726,1.295,747,1.004,882,1.951,884,3.02,886,2.765,895,1.066,898,3.392,899,1.066,910,1.295,969,0.95,1069,1.363,1071,1.142,1072,2.513,1075,4.161,1106,1.363,1149,1.363,1182,0.95,1206,1.236,1218,1.004,1254,1.822,1255,1.715,1261,1.822,1277,1.363,1331,1.142,1333,0.903,1335,1.236,1344,2.765,1349,2.328,1395,1.236,1406,1.623,1433,1.236,1436,3.168,1455,3.047,1456,3.047,1466,1.363,1468,1.142,1471,1.236,1475,2.328,1494,1.236,1551,1.363,1560,1.236,1588,1.363,1687,1.363,1700,1.951,1769,1.142,1792,1.951,1852,1.363,1864,1.363,1999,1.363,2093,1.363,2095,1.363,2142,2.328,2146,1.363,2162,1.236,2163,1.236,2164,1.363,2165,1.363,2180,3.604,2205,1.363,2361,1.363,2440,1.363,2442,1.236,2504,1.555,2505,6.481,2506,4.112,2507,1.555,2508,1.555,2509,2.656,2510,6.128,2511,1.555,2512,1.555,2513,1.555,2514,4.112,2515,1.555,2516,4.112,2517,1.555,2518,1.555,2519,1.555,2520,3.477,2521,1.555,2522,1.363,2523,1.555,2524,1.555,2525,1.555,2526,1.555,2527,1.555,2528,4.618,2529,1.555,2530,1.555,2531,7.169,2532,6.759,2533,6.759,2534,6.759,2535,1.555,2536,1.555,2537,1.555,2538,1.555,2539,1.555,2540,3.477,2541,1.555,2542,1.555,2543,1.555,2544,1.555,2545,1.555,2546,2.656,2547,1.555,2548,2.656,2549,1.555,2550,1.555,2551,2.656,2552,1.555,2553,2.656,2554,1.555,2555,1.555,2556,1.555,2557,1.555,2558,2.656,2559,1.555,2560,2.656,2561,1.555,2562,2.656,2563,5.375,2564,1.555,2565,1.555,2566,1.555,2567,1.555,2568,1.555,2569,2.656,2570,1.555,2571,1.363,2572,1.555,2573,1.555,2574,4.618,2575,2.656,2576,2.656,2577,3.477,2578,1.555,2579,1.555,2580,1.555,2581,4.112,2582,1.555,2583,1.555,2584,2.656,2585,1.555,2586,1.555,2587,1.555,2588,1.555,2589,1.555,2590,1.555,2591,1.555,2592,1.555,2593,1.555,2594,1.555,2595,1.555,2596,1.555,2597,1.555,2598,1.555,2599,1.555,2600,1.555,2601,1.555,2602,1.555,2603,1.555,2604,3.477,2605,1.555,2606,1.555,2607,4.112,2608,1.555,2609,1.363,2610,1.555,2611,1.555,2612,4.112,2613,1.555,2614,1.555,2615,1.555,2616,1.555,2617,1.555,2618,1.555,2619,1.555,2620,1.555,2621,1.555,2622,1.555,2623,2.656,2624,1.555,2625,1.555,2626,2.656,2627,1.555,2628,1.555,2629,1.555,2630,1.555,2631,1.555,2632,1.555,2633,1.555,2634,2.656,2635,1.555,2636,1.555,2637,1.555,2638,1.555,2639,1.555,2640,1.555,2641,1.555,2642,1.555,2643,1.555,2644,2.656,2645,2.656,2646,1.555]],["component/23",[212,0.598]],["title/24-1",[0,14.313]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[131,5.422,134,5.779,213,4.587]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24",[130,5.422,193,29.652,194,29.652]],["name/24",[214,0.635]],["text/24",[0,0.308,1,1.144,2,0.568,6,2.237,15,0.799,16,0.851,17,1.13,18,0.855,19,1.333,21,0.926,24,0.632,27,0.645,36,0.712,42,0.855,65,0.752,66,0.877,70,2.04,74,0.568,79,0.799,80,1.517,81,0.926,96,2.722,97,1.021,100,1.74,102,1.941,108,2.05,114,0.49,122,3.628,129,2.191,130,0.169,131,0.817,134,0.715,136,1.17,139,1.412,141,1.616,146,1.7,152,0.855,153,1.094,156,0.676,164,1.416,186,0.617,193,1.642,194,5.735,206,0.712,207,0.712,213,0.143,215,0.367,217,1.048,218,1.333,222,0.799,230,0.712,234,0.926,235,0.868,239,0.899,249,0.367,250,1.521,251,2.082,264,0.378,265,0.367,270,0.799,274,0.752,275,2.309,276,2.977,277,1.697,278,0.676,279,1.021,281,1.847,285,1.094,289,0.617,290,0.752,292,1.415,293,2.163,294,1.466,305,0.457,310,1.753,311,1.565,320,1.199,329,0.926,332,0.676,336,1.144,344,1.021,350,0.752,352,0.785,355,0.799,361,2.511,391,0.712,393,1.642,394,0.645,398,0.752,422,1.7,426,2.679,430,0.799,437,0.617,441,0.855,443,0.526,451,0.568,457,0.676,461,1.048,484,0.855,488,4.2,504,1.021,519,0.645,520,0.926,521,0.926,522,1.416,525,1.62,527,0.546,530,1.874,538,0.712,541,1.333,573,0.676,580,0.591,591,0.799,601,0.546,618,3.376,619,2.164,620,1.878,621,2.237,622,2.237,648,1.333,675,0.855,689,0.712,713,4.469,726,2.078,745,0.926,746,0.676,747,1.796,754,1.021,769,5.297,770,1.021,787,4.305,788,0.926,804,0.855,811,3.667,813,0.926,861,0.799,884,0.855,885,0.855,887,2.438,896,4.119,910,1.007,927,1.517,936,1.81,945,3.553,998,1.021,1066,0.799,1080,1.642,1082,2.043,1084,1.416,1087,0.752,1151,1.7,1152,2.057,1159,1.021,1200,2.951,1243,0.926,1249,1.642,1250,1.81,1251,0.926,1256,1.021,1266,1.021,1271,1.416,1290,2.472,1303,1.796,1331,0.855,1333,1.199,1406,1.262,1428,0.926,1436,1.416,1443,1.021,1446,0.799,1447,0.855,1458,1.021,1463,1.021,1550,1.021,1553,1.81,1554,1.81,1563,1.021,1589,1.021,1626,1.81,1661,1.021,1666,0.855,1667,1.021,1685,2.212,1691,1.021,1798,0.855,1846,1.021,2053,1.021,2062,1.021,2162,1.642,2222,1.021,2223,0.926,2247,1.021,2279,1.021,2359,1.021,2425,1.021,2442,0.926,2470,1.021,2647,2.065,2648,2.065,2649,1.164,2650,1.164,2651,1.164,2652,1.164,2653,4.261,2654,1.164,2655,1.164,2656,2.065,2657,1.164,2658,5.972,2659,1.164,2660,1.164,2661,2.065,2662,1.164,2663,3.852,2664,2.065,2665,4.612,2666,1.164,2667,1.164,2668,1.164,2669,1.164,2670,1.164,2671,1.164,2672,1.164,2673,1.164,2674,2.065,2675,1.164,2676,1.164,2677,1.164,2678,1.164,2679,1.164,2680,1.164,2681,1.164,2682,1.021,2683,1.164,2684,1.164,2685,1.164,2686,1.164,2687,1.164,2688,1.164,2689,1.164,2690,1.164,2691,1.164,2692,1.164,2693,5.413,2694,2.782,2695,1.164,2696,1.164,2697,1.164,2698,1.164,2699,1.164,2700,4.612,2701,1.164,2702,2.065,2703,1.164,2704,2.782,2705,2.065,2706,1.164,2707,1.164,2708,1.164,2709,1.164,2710,2.065,2711,1.164,2712,1.021,2713,4.915,2714,2.065,2715,1.164,2716,2.065,2717,4.261,2718,3.852,2719,1.164,2720,1.164,2721,1.164,2722,1.164,2723,1.021,2724,2.065,2725,1.164,2726,1.164,2727,2.065,2728,1.164,2729,1.164,2730,1.164,2731,1.164,2732,1.164,2733,1.164,2734,1.164,2735,2.065,2736,1.164,2737,1.164,2738,4.308,2739,1.164,2740,1.164,2741,1.164,2742,1.164,2743,1.164,2744,1.164,2745,3.852,2746,3.852,2747,3.852,2748,3.366,2749,2.065,2750,2.065,2751,2.782,2752,1.164,2753,1.164,2754,1.164,2755,1.164,2756,2.782,2757,2.065,2758,1.164,2759,1.164,2760,1.164,2761,1.164,2762,1.164,2763,1.164,2764,1.164,2765,1.164,2766,1.164,2767,1.164,2768,2.782,2769,2.065,2770,1.164,2771,2.065,2772,2.065,2773,1.164,2774,2.065,2775,1.164,2776,1.164,2777,1.164,2778,1.164,2779,1.164,2780,1.164,2781,1.164,2782,1.164,2783,1.164,2784,1.164,2785,1.164,2786,1.164,2787,1.164,2788,2.782,2789,2.782,2790,1.164,2791,2.782,2792,1.164,2793,2.438,2794,2.065,2795,1.164,2796,1.164,2797,1.164,2798,2.782,2799,1.164,2800,1.164,2801,1.164,2802,1.164,2803,1.164,2804,2.065,2805,1.164,2806,1.164,2807,1.164,2808,1.164,2809,1.164,2810,2.065,2811,1.164,2812,1.164,2813,1.164,2814,1.164,2815,1.164,2816,2.065,2817,1.164,2818,1.164,2819,2.065,2820,1.164]],["component/24",[212,0.598]],["title/25-1",[0,14.313]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[131,5.422,134,5.779,213,4.587]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25",[130,4.134,195,20.88,196,22.606,197,22.606,198,24.918]],["name/25",[214,0.635]],["text/25",[0,0.337,1,1.213,2,0.621,4,0.74,6,0.74,12,1.777,16,2.177,17,1.827,22,0.597,24,0.684,36,1.366,39,3.674,42,0.936,54,1.117,66,1.131,67,0.675,70,1.184,74,2.363,77,1.641,78,0.822,87,0.74,95,3.942,96,2.704,100,1.349,102,1.673,108,1.976,129,0.705,130,0.185,131,0.899,134,0.463,136,0.94,139,1.135,144,0.822,149,0.778,152,1.641,153,1.901,168,1.641,186,0.675,195,1.641,207,1.824,208,1.238,210,1.184,215,0.402,216,0.878,217,2.461,222,0.874,230,1.824,234,1.013,235,0.536,237,1.777,239,0.555,243,0.822,246,0.536,249,1.287,250,0.575,251,1.994,261,0.44,264,0.414,265,0.402,266,0.454,274,1.443,277,1.321,280,0.822,281,2.384,285,1.582,287,0.647,289,1.582,290,1.928,291,1.443,292,0.94,293,1.048,294,1.563,297,0.874,306,0.675,310,2.455,311,0.908,325,0.647,326,0.874,333,3.703,340,5.183,352,1.135,381,1.013,392,1.238,394,1.988,421,0.778,422,1.366,423,0.74,424,0.936,429,0.822,430,0.874,438,1.533,443,0.575,451,0.621,461,2.461,475,2.084,499,1.013,510,1.117,514,0.822,519,0.706,520,1.013,521,1.013,522,0.874,523,2.073,525,1.891,527,1.683,530,1.827,543,3.146,558,3.64,580,0.647,582,0.874,591,0.874,601,0.597,605,0.936,656,0.936,676,1.013,689,0.778,698,0.822,712,2.317,717,1.117,726,1.75,745,1.013,746,0.74,747,1.443,815,2.617,816,1.117,856,1.366,861,2.801,863,1.641,877,1.641,878,1.117,882,1.641,885,1.641,889,1.777,899,1.533,910,1.75,927,1.641,945,1.533,946,0.675,984,1.533,1072,1.824,1074,1.959,1075,1.641,1105,1.117,1157,0.647,1218,0.822,1221,1.117,1249,2.854,1254,0.874,1255,0.822,1261,1.533,1271,1.533,1284,0.936,1299,1.013,1300,1.117,1303,0.822,1425,5.765,1429,0.936,1436,0.874,1441,1.117,1446,0.874,1447,0.936,1471,1.013,1577,1.013,1581,0.936,1587,1.013,1596,5.277,1684,1.117,1685,1.013,1700,2.999,1705,1.013,1792,0.936,1797,1.117,1798,0.936,1800,1.117,1928,0.936,1951,1.117,1975,1.117,1981,1.013,1985,1.117,2152,1.117,2153,2.617,2163,1.013,2168,1.117,2189,5.66,2223,1.013,2299,4.249,2344,3.579,2348,3.579,2522,1.959,2571,1.117,2609,1.117,2712,1.117,2821,1.274,2822,7.465,2823,4.497,2824,1.274,2825,1.274,2826,1.274,2827,1.274,2828,1.274,2829,1.274,2830,5.409,2831,1.274,2832,1.274,2833,1.274,2834,2.235,2835,5.638,2836,1.274,2837,2.235,2838,1.274,2839,1.274,2840,4.083,2841,3.589,2842,3.589,2843,3.589,2844,3.589,2845,2.235,2846,2.986,2847,2.235,2848,2.235,2849,5.148,2850,2.235,2851,1.274,2852,1.274,2853,1.274,2854,1.274,2855,2.235,2856,1.274,2857,1.274,2858,1.274,2859,1.274,2860,1.274,2861,2.986,2862,1.274,2863,1.274,2864,1.274,2865,2.235,2866,1.274,2867,1.274,2868,1.274,2869,1.274,2870,1.274,2871,1.274,2872,1.274,2873,1.274,2874,1.274,2875,1.274,2876,5.409,2877,1.274,2878,1.274,2879,1.274,2880,1.274,2881,1.274,2882,1.274,2883,1.274,2884,2.235,2885,1.274,2886,1.274,2887,2.986,2888,2.986,2889,4.083,2890,2.235,2891,1.274,2892,3.589,2893,2.986,2894,2.986,2895,2.986,2896,2.986,2897,2.235,2898,1.274,2899,1.274,2900,1.274,2901,1.274,2902,1.274,2903,1.274,2904,1.274,2905,1.274,2906,1.274,2907,1.274,2908,1.274,2909,2.986,2910,2.235,2911,1.274,2912,1.274,2913,1.274,2914,1.274,2915,1.274,2916,1.274,2917,1.274,2918,2.235,2919,3.589,2920,2.235,2921,1.274,2922,1.274,2923,1.274,2924,2.235,2925,1.274,2926,1.274,2927,1.274,2928,1.274,2929,3.589,2930,1.274,2931,3.589,2932,1.274,2933,1.274,2934,1.274,2935,1.274,2936,1.274,2937,1.274,2938,1.274,2939,2.235,2940,1.274,2941,1.274,2942,1.274,2943,1.274,2944,2.235,2945,1.274,2946,1.274,2947,3.589,2948,2.235,2949,1.274,2950,2.986,2951,1.274,2952,1.274,2953,1.274,2954,1.274,2955,2.235,2956,2.235,2957,1.274,2958,1.274,2959,1.274,2960,1.274,2961,1.274,2962,1.274,2963,1.274,2964,1.274]],["component/25",[212,0.598]],["title/26-1",[0,7.511,131,4.134,134,4.406,213,5.33]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26",[130,4.691,199,23.695,200,28.278,201,28.278]],["name/26",[214,0.635]],["text/26",[1,1.433,16,1.004,24,1.476,70,3.722,96,2.732,102,1.568,108,2.15,110,1.738,129,2.215,130,0.477,131,0.977,199,3.543,215,1.035,246,1.38,249,1.521,250,2.584,251,2.438,261,1.134,264,1.066,265,1.035,266,1.17,277,1.775,281,1.17,288,3.495,292,1.38,310,1.834,311,1.333,320,1.906,332,2.802,336,1.818,352,1.247,361,2.028,426,4.327,451,1.6,488,5.111,513,2.251,523,2.904,525,1.38,530,2.562,589,2.251,601,1.539,619,1.666,620,1.6,621,1.906,622,1.906,726,1.6,910,1.6,984,4.326,1082,4.632,1084,4.326,1151,2.005,1152,2.005,1157,2.904,1245,2.251,1298,2.61,1928,2.41,2374,2.876,2401,2.876,2682,2.876,2723,2.876,2738,2.876,2793,4.228,2965,3.281,2966,5.72,2967,3.281,2968,3.281,2969,3.281,2970,3.281,2971,6.306,2972,6.306,2973,4.824,2974,4.824,2975,3.281,2976,3.281,2977,4.824,2978,3.281,2979,3.281,2980,4.824,2981,4.824,2982,3.281,2983,3.281,2984,3.281,2985,3.281,2986,3.281,2987,4.824,2988,3.281,2989,3.281,2990,3.281,2991,3.281,2992,3.281]],["component/26",[212,0.598]]],"invertedIndex":[["",{"_index":96,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["0",{"_index":310,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"12":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"22":{},"24":{},"25":{},"26":{}},"component":{}}],["0'..='9",{"_index":2099,"title":{},"name":{},"text":{"19":{}},"component":{}}],["0)).into",{"_index":2990,"title":{},"name":{},"text":{"26":{}},"component":{}}],["0..(n_timer",{"_index":722,"title":{},"name":{},"text":{"7":{}},"component":{}}],["0..3",{"_index":2209,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0..3).filter_map(|_",{"_index":2601,"title":{},"name":{},"text":{"23":{}},"component":{}}],["0..3).map(|_",{"_index":2452,"title":{},"name":{},"text":{"22":{}},"component":{}}],["0..3).map(|i",{"_index":2215,"title":{},"name":{},"text":{"20":{}},"component":{}}],["0..=9",{"_index":954,"title":{},"name":{},"text":{"9":{}},"component":{}}],["0..=max_dist",{"_index":1616,"title":{},"name":{},"text":{"16":{}},"component":{}}],["0..game.boards.len()).collect",{"_index":596,"title":{},"name":{},"text":{"5":{}},"component":{}}],["0..grown_mat.ncol",{"_index":2390,"title":{},"name":{},"text":{"21":{}},"component":{}}],["0..grown_mat.nrow",{"_index":2388,"title":{},"name":{},"text":{"21":{}},"component":{}}],["0..k",{"_index":1643,"title":{},"name":{},"text":{"16":{}},"component":{}}],["0..n",{"_index":1239,"title":{},"name":{},"text":{"12":{},"15":{},"21":{}},"component":{}}],["0..n_col",{"_index":453,"title":{},"name":{},"text":{"4":{},"10":{},"16":{}},"component":{}}],["0..n_cols).filter_map(mov",{"_index":1118,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["0..n_row",{"_index":1107,"title":{},"name":{},"text":{"10":{},"12":{},"16":{}},"component":{}}],["0..n_time",{"_index":728,"title":{},"name":{},"text":{"7":{}},"component":{}}],["0..tiles.ncol",{"_index":2734,"title":{},"name":{},"text":{"24":{}},"component":{}}],["0..tiles.nrow",{"_index":2733,"title":{},"name":{},"text":{"24":{}},"component":{}}],["0_usiz",{"_index":1200,"title":{},"name":{},"text":{"11":{},"24":{}},"component":{}}],["0usize].map(|plac",{"_index":1712,"title":{},"name":{},"text":{"17":{}},"component":{}}],["0v_y>0vy​>0",{"_index":1949,"title":{},"name":{},"text":{"18":{}},"component":{}}],["0x2588",{"_index":1426,"title":{},"name":{},"text":{"14":{}},"component":{}}],["0–9",{"_index":874,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1",{"_index":131,"title":{"2":{},"2-2":{},"3-2":{},"4-2":{},"5-2":{},"6-2":{},"7-2":{},"8-2":{},"9-2":{},"10-2":{},"11-2":{},"12-2":{},"13-2":{},"14-2":{},"15-2":{},"16-2":{},"17-2":{},"18-2":{},"19-2":{},"20-2":{},"21-2":{},"22-2":{},"23-2":{},"24-2":{},"25-2":{},"26-1":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["1)&t",{"_index":1910,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1).unwrap",{"_index":267,"title":{},"name":{},"text":{"2":{},"23":{}},"component":{}}],["1)/2",{"_index":1958,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1)^2",{"_index":1960,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1)}{2t}&t\\le",{"_index":1933,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1)}{2t}vy​=2t2y+t(t−1",{"_index":1930,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1+2+…+n=12n(n+1)1+2+\\ldots+n=\\frac{1}{2}n(n+1)1+2+…+n=21​n(n+1",{"_index":1905,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1..=9",{"_index":2934,"title":{},"name":{},"text":{"25":{}},"component":{}}],["1..=die_n_fac",{"_index":2485,"title":{},"name":{},"text":{"22":{}},"component":{}}],["1..=digit).rev",{"_index":2962,"title":{},"name":{},"text":{"25":{}},"component":{}}],["1..=roots::sqrt(&abs_eight_i",{"_index":1972,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1..=sideroom_max_row).all(|row",{"_index":2781,"title":{},"name":{},"text":{"24":{}},"component":{}}],["10",{"_index":156,"title":{"11":{}},"name":{},"text":{"1":{},"11":{},"12":{},"15":{},"19":{},"22":{},"24":{}},"component":{}}],["100",{"_index":1243,"title":{},"name":{},"text":{"12":{},"22":{},"24":{}},"component":{}}],["1000",{"_index":2470,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["1000000",{"_index":1875,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1001000",{"_index":1876,"title":{},"name":{},"text":{"18":{}},"component":{}}],["10011",{"_index":345,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1014",{"_index":2882,"title":{},"name":{},"text":{"25":{}},"component":{}}],["1015−1",{"_index":2883,"title":{},"name":{},"text":{"25":{}},"component":{}}],["10_usize.pow(u32::try_from(pow10).unwrap",{"_index":1061,"title":{},"name":{},"text":{"9":{}},"component":{}}],["11",{"_index":159,"title":{"12":{}},"name":{},"text":{"1":{},"12":{}},"component":{}}],["1197",{"_index":1194,"title":{},"name":{},"text":{"11":{}},"component":{}}],["12",{"_index":162,"title":{"13":{}},"name":{},"text":{"1":{},"13":{},"17":{},"20":{}},"component":{}}],["12345",{"_index":2905,"title":{},"name":{},"text":{"25":{}},"component":{}}],["123456",{"_index":2908,"title":{},"name":{},"text":{"25":{}},"component":{}}],["12vy(vy+1)\\frac{1}{2}v_y(v_y+1)21​vy​(vy​+1",{"_index":1992,"title":{},"name":{},"text":{"18":{}},"component":{}}],["13",{"_index":165,"title":{"14":{}},"name":{},"text":{"1":{},"14":{}},"component":{}}],["14",{"_index":168,"title":{"15":{}},"name":{},"text":{"1":{},"15":{},"25":{}},"component":{}}],["14th",{"_index":2829,"title":{},"name":{},"text":{"25":{}},"component":{}}],["15",{"_index":171,"title":{"16":{}},"name":{},"text":{"1":{},"16":{}},"component":{}}],["16",{"_index":173,"title":{"17":{}},"name":{},"text":{"1":{},"4":{},"17":{}},"component":{}}],["17",{"_index":176,"title":{"18":{}},"name":{},"text":{"1":{},"18":{}},"component":{}}],["18",{"_index":179,"title":{"19":{}},"name":{},"text":{"1":{},"19":{}},"component":{}}],["19",{"_index":181,"title":{"20":{}},"name":{},"text":{"1":{},"4":{},"20":{}},"component":{}}],["1:1",{"_index":947,"title":{},"name":{},"text":{"9":{}},"component":{}}],["1\\pm1±1",{"_index":674,"title":{},"name":{},"text":{"6":{}},"component":{}}],["1\\pm\\sqrt{1+8x}}{2}&t\\ge",{"_index":1935,"title":{},"name":{},"text":{"18":{}},"component":{}}],["1d−1",{"_index":2059,"title":{},"name":{},"text":{"19":{}},"component":{}}],["1s",{"_index":387,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1s=2line_width−1",{"_index":390,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1s=2line_width−1\\gamma",{"_index":385,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1st",{"_index":2826,"title":{},"name":{},"text":{"25":{}},"component":{}}],["1usiz",{"_index":456,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1×1×11\\times1\\times11×1×1",{"_index":2504,"title":{},"name":{},"text":{"23":{}},"component":{}}],["1γ+ε=all",{"_index":389,"title":{},"name":{},"text":{"4":{}},"component":{}}],["1’",{"_index":1628,"title":{},"name":{},"text":{"16":{}},"component":{}}],["2",{"_index":134,"title":{"3":{},"2-2":{},"3-3":{},"4-3":{},"5-3":{},"6-3":{},"7-2":{},"8-3":{},"9-3":{},"10-3":{},"11-3":{},"12-3":{},"13-2":{},"14-3":{},"15-2":{},"16-3":{},"17-3":{},"18-3":{},"19-3":{},"20-3":{},"21-2":{},"22-3":{},"23-2":{},"24-2":{},"25-2":{},"26-1":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["2*vi",{"_index":1959,"title":{},"name":{},"text":{"18":{}},"component":{}}],["20",{"_index":184,"title":{"21":{}},"name":{},"text":{"1":{},"21":{}},"component":{}}],["2021",{"_index":5,"title":{"1":{}},"name":{},"text":{"1":{}},"component":{}}],["21",{"_index":187,"title":{"22":{}},"name":{},"text":{"1":{},"22":{}},"component":{}}],["22",{"_index":190,"title":{"23":{}},"name":{},"text":{"1":{},"23":{}},"component":{}}],["23",{"_index":193,"title":{"24":{}},"name":{},"text":{"1":{},"24":{}},"component":{}}],["24",{"_index":195,"title":{"25":{}},"name":{},"text":{"1":{},"20":{},"25":{}},"component":{}}],["240",{"_index":1451,"title":{},"name":{},"text":{"15":{}},"component":{}}],["25",{"_index":199,"title":{"26":{}},"name":{},"text":{"1":{},"5":{},"26":{}},"component":{}}],["25137",{"_index":1195,"title":{},"name":{},"text":{"11":{}},"component":{}}],["25’",{"_index":505,"title":{},"name":{},"text":{"5":{}},"component":{}}],["26",{"_index":2568,"title":{},"name":{},"text":{"23":{}},"component":{}}],["277\\frac{27}{7}727",{"_index":2437,"title":{},"name":{},"text":{"22":{}},"component":{}}],["2].map(|_",{"_index":576,"title":{},"name":{},"text":{"5":{}},"component":{}}],["2].map(|i",{"_index":2289,"title":{},"name":{},"text":{"20":{}},"component":{}}],["2].map(|j",{"_index":2203,"title":{},"name":{},"text":{"20":{}},"component":{}}],["2^{\\text{\\texttt{line\\textunderscore{}width",{"_index":388,"title":{},"name":{},"text":{"4":{}},"component":{}}],["2d",{"_index":1064,"title":{},"name":{},"text":{"10":{},"21":{}},"component":{}}],["2nd",{"_index":2827,"title":{},"name":{},"text":{"25":{}},"component":{}}],["2u32.pow(u32::try_from(n_cols).unwrap",{"_index":413,"title":{},"name":{},"text":{"4":{}},"component":{}}],["2u32.pow(u32::try_from(pow2).unwrap",{"_index":120,"title":{},"name":{},"text":{"1":{}},"component":{}}],["2u64.pow(u32::try_from(pow2).unwrap",{"_index":127,"title":{},"name":{},"text":{"1":{}},"component":{}}],["3",{"_index":136,"title":{"4":{}},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"9":{},"11":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["3).unwrap",{"_index":269,"title":{},"name":{},"text":{"2":{}},"component":{}}],["33=273^3=2733=27",{"_index":2431,"title":{},"name":{},"text":{"22":{}},"component":{}}],["3].map(|_",{"_index":2325,"title":{},"name":{},"text":{"20":{}},"component":{}}],["3].zip([3",{"_index":2779,"title":{},"name":{},"text":{"24":{}},"component":{}}],["3d",{"_index":2142,"title":{},"name":{},"text":{"20":{},"23":{}},"component":{}}],["3rd",{"_index":2828,"title":{},"name":{},"text":{"25":{}},"component":{}}],["4",{"_index":139,"title":{"5":{}},"name":{},"text":{"1":{},"4":{},"5":{},"9":{},"10":{},"11":{},"17":{},"19":{},"24":{},"25":{}},"component":{}}],["40",{"_index":1449,"title":{},"name":{},"text":{"15":{}},"component":{}}],["45∘45^\\circ45",{"_index":671,"title":{},"name":{},"text":{"6":{}},"component":{}}],["4].map(|i",{"_index":636,"title":{},"name":{},"text":{"6":{},"18":{}},"component":{}}],["5",{"_index":141,"title":{"6":{}},"name":{},"text":{"1":{},"6":{},"9":{},"11":{},"16":{},"17":{},"24":{}},"component":{}}],["50",{"_index":2427,"title":{},"name":{},"text":{"22":{}},"component":{}}],["500×500",{"_index":1561,"title":{},"name":{},"text":{"16":{}},"component":{}}],["57",{"_index":1193,"title":{},"name":{},"text":{"11":{}},"component":{}}],["5th",{"_index":440,"title":{},"name":{},"text":{"4":{}},"component":{}}],["6",{"_index":144,"title":{"7":{}},"name":{},"text":{"1":{},"7":{},"9":{},"17":{},"25":{}},"component":{}}],["7",{"_index":146,"title":{"8":{}},"name":{},"text":{"1":{},"8":{},"9":{},"17":{},"22":{},"24":{}},"component":{}}],["72",{"_index":2832,"title":{},"name":{},"text":{"25":{}},"component":{}}],["7sd",{"_index":838,"title":{},"name":{},"text":{"9":{}},"component":{}}],["8",{"_index":149,"title":{"9":{}},"name":{},"text":{"1":{},"4":{},"7":{},"9":{},"18":{},"25":{}},"component":{}}],["8*i",{"_index":1961,"title":{},"name":{},"text":{"18":{}},"component":{}}],["8].contains(n",{"_index":1057,"title":{},"name":{},"text":{"9":{}},"component":{}}],["8y",{"_index":1966,"title":{},"name":{},"text":{"18":{}},"component":{}}],["9",{"_index":153,"title":{"10":{}},"name":{},"text":{"1":{},"7":{},"9":{},"10":{},"16":{},"20":{},"22":{},"24":{},"25":{}},"component":{}}],["9).then_some(idx",{"_index":1119,"title":{},"name":{},"text":{"10":{}},"component":{}}],["9])).unwrap",{"_index":2377,"title":{},"name":{},"text":{"21":{}},"component":{}}],["9_usize]).map(|(i",{"_index":2780,"title":{},"name":{},"text":{"24":{}},"component":{}}],["9s",{"_index":1073,"title":{},"name":{},"text":{"10":{}},"component":{}}],["9×1014",{"_index":2884,"title":{},"name":{},"text":{"25":{}},"component":{}}],["_",{"_index":292,"title":{},"name":{},"text":{"3":{},"7":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"19":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["_bin_op(self",{"_index":920,"title":{},"name":{},"text":{"9":{}},"component":{}}],["_po",{"_index":1889,"title":{},"name":{},"text":{"18":{}},"component":{}}],["_t",{"_index":1888,"title":{},"name":{},"text":{"18":{}},"component":{}}],["aaa",{"_index":687,"title":{},"name":{},"text":{"6":{}},"component":{}}],["aaaa",{"_index":842,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ab",{"_index":893,"title":{},"name":{},"text":{"9":{}},"component":{}}],["abc",{"_index":1005,"title":{},"name":{},"text":{"9":{}},"component":{}}],["abcd",{"_index":900,"title":{},"name":{},"text":{"9":{}},"component":{}}],["abd",{"_index":892,"title":{},"name":{},"text":{"9":{}},"component":{}}],["abdfg",{"_index":872,"title":{},"name":{},"text":{"9":{}},"component":{}}],["abov",{"_index":429,"title":{},"name":{},"text":{"4":{},"5":{},"17":{},"18":{},"19":{},"25":{}},"component":{}}],["abs(vmax",{"_index":1868,"title":{},"name":{},"text":{"18":{}},"component":{}}],["abs(vmax)\\mathrm{abs}(v_\\mathrm{max})abs(vmax",{"_index":1870,"title":{},"name":{},"text":{"18":{}},"component":{}}],["abs_diff(a",{"_index":128,"title":{},"name":{},"text":{"1":{}},"component":{}}],["abs_diff(col",{"_index":2809,"title":{},"name":{},"text":{"24":{}},"component":{}}],["abs_diff(n",{"_index":785,"title":{},"name":{},"text":{"8":{}},"component":{}}],["abs_eight_i",{"_index":1969,"title":{},"name":{},"text":{"18":{}},"component":{}}],["absolut",{"_index":761,"title":{},"name":{},"text":{"8":{}},"component":{}}],["abut",{"_index":2569,"title":{},"name":{},"text":{"23":{}},"component":{}}],["ac",{"_index":904,"title":{},"name":{},"text":{"9":{}},"component":{}}],["accept",{"_index":2823,"title":{},"name":{},"text":{"25":{}},"component":{}}],["accord",{"_index":447,"title":{},"name":{},"text":{"4":{},"17":{},"19":{}},"component":{}}],["accum",{"_index":2634,"title":{},"name":{},"text":{"23":{}},"component":{}}],["acdeg",{"_index":870,"title":{},"name":{},"text":{"9":{}},"component":{}}],["acdfg",{"_index":871,"title":{},"name":{},"text":{"9":{}},"component":{}}],["acf",{"_index":894,"title":{},"name":{},"text":{"9":{}},"component":{}}],["achiev",{"_index":1798,"title":{},"name":{},"text":{"17":{},"18":{},"24":{},"25":{}},"component":{}}],["actual",{"_index":22,"title":{},"name":{},"text":{"1":{},"5":{},"7":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"25":{}},"component":{}}],["ad",{"_index":1769,"title":{},"name":{},"text":{"17":{},"19":{},"22":{},"23":{}},"component":{}}],["add",{"_index":712,"title":{},"name":{},"text":{"7":{},"15":{},"17":{},"19":{},"20":{},"25":{}},"component":{}}],["add(&self",{"_index":2043,"title":{},"name":{},"text":{"19":{}},"component":{}}],["addend",{"_index":2094,"title":{},"name":{},"text":{"19":{}},"component":{}}],["addends.last_mut().unwrap",{"_index":2101,"title":{},"name":{},"text":{"19":{}},"component":{}}],["addends.push(elem",{"_index":2103,"title":{},"name":{},"text":{"19":{}},"component":{}}],["addit",{"_index":1331,"title":{},"name":{},"text":{"13":{},"19":{},"23":{},"24":{}},"component":{}}],["addition",{"_index":2157,"title":{},"name":{},"text":{"20":{}},"component":{}}],["adjac",{"_index":1268,"title":{},"name":{},"text":{"13":{},"15":{},"21":{}},"component":{}}],["adjoin",{"_index":2150,"title":{},"name":{},"text":{"20":{}},"component":{}}],["advanc",{"_index":1699,"title":{},"name":{},"text":{"17":{}},"component":{}}],["advent",{"_index":3,"title":{"1":{}},"name":{},"text":{"1":{},"5":{},"15":{}},"component":{}}],["af",{"_index":905,"title":{},"name":{},"text":{"9":{}},"component":{}}],["affect",{"_index":1861,"title":{},"name":{},"text":{"18":{}},"component":{}}],["again",{"_index":1221,"title":{},"name":{},"text":{"12":{},"25":{}},"component":{}}],["against",{"_index":240,"title":{},"name":{},"text":{"2":{}},"component":{}}],["agent",{"_index":2647,"title":{},"name":{},"text":{"24":{}},"component":{}}],["agre",{"_index":2158,"title":{},"name":{},"text":{"20":{}},"component":{}}],["aim",{"_index":314,"title":{},"name":{},"text":{"3":{},"8":{}},"component":{}}],["akin",{"_index":1796,"title":{},"name":{},"text":{"17":{}},"component":{}}],["algo",{"_index":2368,"title":{},"name":{},"text":{"21":{}},"component":{}}],["algorithm",{"_index":207,"title":{},"name":{},"text":{"1":{},"9":{},"12":{},"16":{},"17":{},"24":{},"25":{}},"component":{}}],["all(|(am",{"_index":2770,"title":{},"name":{},"text":{"24":{}},"component":{}}],["all_count",{"_index":696,"title":{},"name":{},"text":{"6":{}},"component":{}}],["all_next_z",{"_index":2927,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_next_zs[0",{"_index":2932,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_prev_z",{"_index":2926,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_prev_zs[all_prev_zs.len",{"_index":2930,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_valid_zs_rtl",{"_index":2939,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_valid_zs_rtl.iter_mut().enumerate().rev",{"_index":2942,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_zs_ltr",{"_index":2921,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_zs_ltr.first_mut().unwrap().insert(0",{"_index":2923,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_zs_ltr.split_at_mut(digit_idx",{"_index":2928,"title":{},"name":{},"text":{"25":{}},"component":{}}],["all_zs_ltr[digit_idx",{"_index":2945,"title":{},"name":{},"text":{"25":{}},"component":{}}],["allamphipodst",{"_index":2749,"title":{},"name":{},"text":{"24":{}},"component":{}}],["alloc",{"_index":2678,"title":{},"name":{},"text":{"24":{}},"component":{}}],["allow(clippy::range_minus_on",{"_index":2801,"title":{},"name":{},"text":{"24":{}},"component":{}}],["along",{"_index":2571,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["alreadi",{"_index":675,"title":{},"name":{},"text":{"6":{},"12":{},"13":{},"24":{}},"component":{}}],["already_won",{"_index":599,"title":{},"name":{},"text":{"5":{}},"component":{}}],["although",{"_index":868,"title":{},"name":{},"text":{"9":{},"18":{}},"component":{}}],["altogeth",{"_index":1953,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["alu",{"_index":2849,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alu.run_block(block",{"_index":2860,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alu::from_running_block_on(block",{"_index":2935,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alu::new",{"_index":2858,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alu[register::z",{"_index":2936,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alway",{"_index":2171,"title":{},"name":{},"text":{"20":{}},"component":{}}],["am.index",{"_index":2706,"title":{},"name":{},"text":{"24":{}},"component":{}}],["am.kind",{"_index":2705,"title":{},"name":{},"text":{"24":{}},"component":{}}],["am.kind.dest_col",{"_index":2790,"title":{},"name":{},"text":{"24":{}},"component":{}}],["am.kind.energi",{"_index":2813,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amount",{"_index":1076,"title":{},"name":{},"text":{"10":{},"16":{},"17":{}},"component":{}}],["amphipod",{"_index":194,"title":{"24":{}},"name":{},"text":{"1":{},"24":{}},"component":{}}],["amphipod_kind",{"_index":2724,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_kind_count",{"_index":2721,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_kind_counts[amphipod_kind",{"_index":2727,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_loc",{"_index":2718,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_locs.contains_key(&[row",{"_index":2800,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_locs.contains_key(&new_loc",{"_index":2803,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_locs_map",{"_index":2720,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_locs_map.insert",{"_index":2726,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipod_locs_map.len",{"_index":2740,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodindex",{"_index":2700,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodindexed([t",{"_index":2699,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodindexed(initial_locs.0.map(|loc",{"_index":2762,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodkind",{"_index":2693,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodkind::from_char(c",{"_index":2725,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodkind::from_usize(i",{"_index":2709,"title":{},"name":{},"text":{"24":{}},"component":{}}],["amphipodkind::n_kind",{"_index":2702,"title":{},"name":{},"text":{"24":{}},"component":{}}],["an",{"_index":265,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["ancestor",{"_index":1695,"title":{},"name":{},"text":{"17":{}},"component":{}}],["and(&column",{"_index":467,"title":{},"name":{},"text":{"4":{}},"component":{}}],["and(&n_zero",{"_index":407,"title":{},"name":{},"text":{"4":{}},"component":{}}],["and_modify(|v",{"_index":1323,"title":{},"name":{},"text":{"13":{}},"component":{}}],["angl",{"_index":1155,"title":{},"name":{},"text":{"11":{}},"component":{}}],["anoth",{"_index":2162,"title":{},"name":{},"text":{"20":{},"23":{},"24":{}},"component":{}}],["ans.add(&snailnumowned::from_line(line.as_ref",{"_index":2110,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ans.entry((c1",{"_index":1513,"title":{},"name":{},"text":{"15":{}},"component":{}}],["ans.reduc",{"_index":2048,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ans.to_str",{"_index":1432,"title":{},"name":{},"text":{"14":{}},"component":{}}],["ans_for_input(include_str!(\"input.txt",{"_index":266,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{},"26":{}},"component":{}}],["ans_for_input(include_str!(\"sample_input.txt",{"_index":732,"title":{},"name":{},"text":{"7":{}},"component":{}}],["ans_for_input(input",{"_index":261,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{},"26":{}},"component":{}}],["answer",{"_index":24,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["any_cucumbers_did_mov",{"_index":2971,"title":{},"name":{},"text":{"26":{}},"component":{}}],["anymor",{"_index":1209,"title":{},"name":{},"text":{"12":{},"18":{}},"component":{}}],["anyth",{"_index":272,"title":{},"name":{},"text":{"3":{}},"component":{}}],["apex",{"_index":1991,"title":{},"name":{},"text":{"18":{}},"component":{}}],["appear",{"_index":1464,"title":{},"name":{},"text":{"15":{},"19":{}},"component":{}}],["appli",{"_index":1805,"title":{},"name":{},"text":{"17":{},"20":{},"21":{}},"component":{}}],["apply(&self",{"_index":1815,"title":{},"name":{},"text":{"17":{},"20":{}},"component":{}}],["apply(self",{"_index":2240,"title":{},"name":{},"text":{"20":{}},"component":{}}],["apply_mapping_to_garbled_digit(&map",{"_index":1043,"title":{},"name":{},"text":{"9":{}},"component":{}}],["apply_mapping_to_garbled_digit(map",{"_index":1023,"title":{},"name":{},"text":{"9":{}},"component":{}}],["apply_n_times(&self",{"_index":1515,"title":{},"name":{},"text":{"15":{}},"component":{}}],["apply_step(&mut",{"_index":2615,"title":{},"name":{},"text":{"23":{}},"component":{}}],["approach",{"_index":2903,"title":{},"name":{},"text":{"25":{}},"component":{}}],["approxim",{"_index":1444,"title":{},"name":{},"text":{"15":{}},"component":{}}],["arbitrari",{"_index":2831,"title":{},"name":{},"text":{"25":{}},"component":{}}],["arbitrarili",{"_index":1266,"title":{},"name":{},"text":{"13":{},"24":{}},"component":{}}],["area",{"_index":1873,"title":{},"name":{},"text":{"18":{},"21":{}},"component":{}}],["area:\\s*x=([\\d",{"_index":1891,"title":{},"name":{},"text":{"18":{}},"component":{}}],["aren’t",{"_index":1208,"title":{},"name":{},"text":{"12":{}},"component":{}}],["arg",{"_index":1827,"title":{},"name":{},"text":{"17":{}},"component":{}}],["arg_stack",{"_index":1828,"title":{},"name":{},"text":{"17":{}},"component":{}}],["arg_stack.pop",{"_index":1835,"title":{},"name":{},"text":{"17":{}},"component":{}}],["arg_stack.push(arg",{"_index":1832,"title":{},"name":{},"text":{"17":{}},"component":{}}],["argument",{"_index":1338,"title":{},"name":{},"text":{"13":{}},"component":{}}],["aris",{"_index":47,"title":{},"name":{},"text":{"1":{}},"component":{}}],["arithmet",{"_index":196,"title":{"25":{}},"name":{},"text":{"1":{},"8":{}},"component":{}}],["aros",{"_index":1483,"title":{},"name":{},"text":{"15":{}},"component":{}}],["around",{"_index":1452,"title":{},"name":{},"text":{"15":{},"22":{}},"component":{}}],["arr",{"_index":1080,"title":{},"name":{},"text":{"10":{},"12":{},"24":{}},"component":{}}],["arr[am.kind",{"_index":2777,"title":{},"name":{},"text":{"24":{}},"component":{}}],["arr[idx",{"_index":1226,"title":{},"name":{},"text":{"12":{}},"component":{}}],["arrang",{"_index":1409,"title":{},"name":{},"text":{"14":{}},"component":{}}],["array",{"_index":320,"title":{},"name":{},"text":{"4":{},"7":{},"12":{},"13":{},"16":{},"21":{},"24":{},"26":{}},"component":{}}],["array1::::from_shape_simple_fn((n_row",{"_index":452,"title":{},"name":{},"text":{"4":{}},"component":{}}],["array2",{"_index":398,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"16":{},"21":{},"24":{}},"component":{}}],["array2::from_shape_fn((height",{"_index":2730,"title":{},"name":{},"text":{"24":{}},"component":{}}],["array2::from_shape_fn((self.mat.nrow",{"_index":2380,"title":{},"name":{},"text":{"21":{}},"component":{}}],["array2::from_shape_simple_fn((k",{"_index":1637,"title":{},"name":{},"text":{"16":{}},"component":{}}],["array2::from_shape_simple_fn(grown_mat.dim",{"_index":2386,"title":{},"name":{},"text":{"21":{}},"component":{}}],["array2::from_shape_vec((n_lin",{"_index":367,"title":{},"name":{},"text":{"4":{}},"component":{}}],["array2::from_shape_vec((n_row",{"_index":1594,"title":{},"name":{},"text":{"16":{},"21":{}},"component":{}}],["array2::from_shape_vec((width",{"_index":1092,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["arriv",{"_index":1496,"title":{},"name":{},"text":{"15":{}},"component":{}}],["as_packets(&self",{"_index":1715,"title":{},"name":{},"text":{"17":{}},"component":{}}],["as_pair",{"_index":2124,"title":{},"name":{},"text":{"19":{}},"component":{}}],["as_pair(&self",{"_index":2063,"title":{},"name":{},"text":{"19":{}},"component":{}}],["as_ref",{"_index":113,"title":{},"name":{},"text":{"1":{},"19":{}},"component":{}}],["ascend",{"_index":614,"title":{},"name":{},"text":{"6":{}},"component":{}}],["ascent",{"_index":1979,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ask",{"_index":216,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{}},"component":{}}],["asref",{"_index":2299,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["assert_eq!(n_row",{"_index":540,"title":{},"name":{},"text":{"5":{},"16":{},"21":{}},"component":{}}],["assert_ne!(elems.len",{"_index":2065,"title":{},"name":{},"text":{"19":{}},"component":{}}],["assert_ne!(i",{"_index":1956,"title":{},"name":{},"text":{"18":{}},"component":{}}],["assign",{"_index":1458,"title":{},"name":{},"text":{"15":{},"24":{}},"component":{}}],["associ",{"_index":788,"title":{},"name":{},"text":{"8":{},"19":{},"24":{}},"component":{}}],["assum",{"_index":8,"title":{},"name":{},"text":{"1":{},"4":{}},"component":{}}],["atom",{"_index":2053,"title":{},"name":{},"text":{"19":{},"24":{}},"component":{}}],["attempt",{"_index":855,"title":{},"name":{},"text":{"9":{},"15":{},"22":{}},"component":{}}],["attempted_digit_range_ctor",{"_index":2949,"title":{},"name":{},"text":{"25":{}},"component":{}}],["author",{"_index":2159,"title":{},"name":{},"text":{"20":{}},"component":{}}],["avail",{"_index":1286,"title":{},"name":{},"text":{"13":{}},"component":{}}],["away",{"_index":686,"title":{},"name":{},"text":{"6":{},"8":{}},"component":{}}],["axi",{"_index":2165,"title":{},"name":{},"text":{"20":{},"23":{}},"component":{}}],["axis::it",{"_index":2280,"title":{},"name":{},"text":{"20":{}},"component":{}}],["a–g",{"_index":841,"title":{},"name":{},"text":{"9":{}},"component":{}}],["b",{"_index":122,"title":{},"name":{},"text":{"1":{},"6":{},"9":{},"13":{},"17":{},"24":{}},"component":{}}],["b'1",{"_index":364,"title":{},"name":{},"text":{"4":{}},"component":{}}],["b'a",{"_index":917,"title":{},"name":{},"text":{"9":{}},"component":{}}],["b).count",{"_index":915,"title":{},"name":{},"text":{"9":{}},"component":{}}],["b.as_packet",{"_index":1787,"title":{},"name":{},"text":{"17":{}},"component":{}}],["b.burrow.solve(&b.amphipod_locs).0",{"_index":2819,"title":{},"name":{},"text":{"24":{}},"component":{}}],["b1,…,bnb_1,\\ldots,b_nb1​,…,bn",{"_index":2511,"title":{},"name":{},"text":{"23":{}},"component":{}}],["b1b_1b1",{"_index":2516,"title":{},"name":{},"text":{"23":{}},"component":{}}],["b2b_2b2",{"_index":2515,"title":{},"name":{},"text":{"23":{}},"component":{}}],["b3b_3b3",{"_index":2520,"title":{},"name":{},"text":{"23":{}},"component":{}}],["b3≔b1∩b2b_3\\coloneqq",{"_index":2517,"title":{},"name":{},"text":{"23":{}},"component":{}}],["b_1\\cap",{"_index":2518,"title":{},"name":{},"text":{"23":{}},"component":{}}],["b_2b3​:=b1​∩b2",{"_index":2519,"title":{},"name":{},"text":{"23":{}},"component":{}}],["back",{"_index":1271,"title":{},"name":{},"text":{"13":{},"17":{},"20":{},"24":{},"25":{}},"component":{}}],["backtrack",{"_index":2153,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["base",{"_index":2423,"title":{},"name":{},"text":{"22":{}},"component":{}}],["base_col",{"_index":1231,"title":{},"name":{},"text":{"12":{}},"component":{}}],["base_depth",{"_index":2123,"title":{},"name":{},"text":{"19":{}},"component":{}}],["base_row",{"_index":1230,"title":{},"name":{},"text":{"12":{}},"component":{}}],["base_row.checked_sub(1",{"_index":1233,"title":{},"name":{},"text":{"12":{}},"component":{}}],["basi",{"_index":2176,"title":{},"name":{},"text":{"20":{}},"component":{}}],["basic",{"_index":1140,"title":{},"name":{},"text":{"11":{}},"component":{}}],["basin",{"_index":155,"title":{"10":{}},"name":{},"text":{"1":{}},"component":{}}],["basin_s",{"_index":1115,"title":{},"name":{},"text":{"10":{}},"component":{}}],["basin_sizes(&self",{"_index":1114,"title":{},"name":{},"text":{"10":{}},"component":{}}],["basin_sizes.into_iter().take(3).product",{"_index":1139,"title":{},"name":{},"text":{"10":{}},"component":{}}],["basin_sizes.push(visited_idxs.len",{"_index":1134,"title":{},"name":{},"text":{"10":{}},"component":{}}],["basin_sizes.sort_unstable_by_key(|&s",{"_index":1137,"title":{},"name":{},"text":{"10":{}},"component":{}}],["bbb",{"_index":2514,"title":{},"name":{},"text":{"23":{}},"component":{}}],["bc",{"_index":1003,"title":{},"name":{},"text":{"9":{}},"component":{}}],["be",{"_index":51,"title":{},"name":{},"text":{"1":{},"12":{},"16":{},"18":{},"19":{}},"component":{}}],["beacon",{"_index":182,"title":{"20":{}},"name":{},"text":{"1":{},"20":{}},"component":{}}],["becom",{"_index":2361,"title":{},"name":{},"text":{"21":{},"23":{}},"component":{}}],["befor",{"_index":2522,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["begin",{"_index":1698,"title":{},"name":{},"text":{"17":{}},"component":{}}],["begin{cas",{"_index":1908,"title":{},"name":{},"text":{"18":{}},"component":{}}],["behavior",{"_index":1336,"title":{},"name":{},"text":{"13":{}},"component":{}}],["believ",{"_index":1484,"title":{},"name":{},"text":{"15":{}},"component":{}}],["belong",{"_index":649,"title":{},"name":{},"text":{"6":{}},"component":{}}],["below",{"_index":31,"title":{},"name":{},"text":{"1":{},"5":{},"13":{},"18":{},"20":{}},"component":{}}],["best",{"_index":772,"title":{},"name":{},"text":{"8":{}},"component":{}}],["better",{"_index":2885,"title":{},"name":{},"text":{"25":{}},"component":{}}],["between",{"_index":437,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"10":{},"13":{},"15":{},"18":{},"20":{},"23":{},"24":{}},"component":{}}],["big",{"_index":1263,"title":{},"name":{},"text":{"13":{}},"component":{}}],["bin_bit",{"_index":1746,"title":{},"name":{},"text":{"17":{}},"component":{}}],["bin_bits.extend_from_slice(&chunk[1",{"_index":1750,"title":{},"name":{},"text":{"17":{}},"component":{}}],["binari",{"_index":137,"title":{"4":{}},"name":{},"text":{"1":{},"4":{},"17":{},"19":{},"21":{}},"component":{}}],["binary(vec",{"_index":1707,"title":{},"name":{},"text":{"17":{}},"component":{}}],["binary::as_packet",{"_index":1678,"title":{},"name":{},"text":{"17":{}},"component":{}}],["binary::from_hex(input).unwrap",{"_index":1786,"title":{},"name":{},"text":{"17":{}},"component":{}}],["binary_digits_msbf",{"_index":112,"title":{},"name":{},"text":{"1":{}},"component":{}}],["bingo",{"_index":85,"title":{},"name":{},"text":{"1":{},"5":{}},"component":{}}],["bit",{"_index":1689,"title":{},"name":{},"text":{"17":{},"18":{},"21":{}},"component":{}}],["bit_vec",{"_index":354,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bit_vec).ok",{"_index":368,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bit_vec.len",{"_index":366,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bit_vec.push(c",{"_index":363,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bitand(self",{"_index":930,"title":{},"name":{},"text":{"9":{}},"component":{}}],["bitor(self",{"_index":926,"title":{},"name":{},"text":{"9":{}},"component":{}}],["bitwis",{"_index":999,"title":{},"name":{},"text":{"9":{}},"component":{}}],["bitwise_not",{"_index":968,"title":{},"name":{},"text":{"9":{}},"component":{}}],["block",{"_index":1425,"title":{},"name":{},"text":{"14":{},"25":{}},"component":{}}],["block.instr",{"_index":2853,"title":{},"name":{},"text":{"25":{}},"component":{}}],["blocks.as_ref",{"_index":2918,"title":{},"name":{},"text":{"25":{}},"component":{}}],["blocks.iter().enumer",{"_index":2925,"title":{},"name":{},"text":{"25":{}},"component":{}}],["blocks.len",{"_index":2920,"title":{},"name":{},"text":{"25":{}},"component":{}}],["blocks.push(instrblock",{"_index":2867,"title":{},"name":{},"text":{"25":{}},"component":{}}],["bn+1b_{n+1}bn+1",{"_index":2512,"title":{},"name":{},"text":{"23":{}},"component":{}}],["board",{"_index":481,"title":{},"name":{},"text":{"5":{},"22":{}},"component":{}}],["board.get_ans(num",{"_index":588,"title":{},"name":{},"text":{"5":{}},"component":{}}],["board.has_won",{"_index":587,"title":{},"name":{},"text":{"5":{}},"component":{}}],["board.play_number(num",{"_index":586,"title":{},"name":{},"text":{"5":{}},"component":{}}],["board.siz",{"_index":2447,"title":{},"name":{},"text":{"22":{}},"component":{}}],["board::new(this_board.as_slic",{"_index":565,"title":{},"name":{},"text":{"5":{}},"component":{}}],["board_idx",{"_index":597,"title":{},"name":{},"text":{"5":{}},"component":{}}],["boardprogress",{"_index":526,"title":{},"name":{},"text":{"5":{}},"component":{}}],["boardprogress::new(n_row",{"_index":546,"title":{},"name":{},"text":{"5":{}},"component":{}}],["boards.push(board",{"_index":567,"title":{},"name":{},"text":{"5":{}},"component":{}}],["board’",{"_index":491,"title":{},"name":{},"text":{"5":{}},"component":{}}],["bookkeep",{"_index":1077,"title":{},"name":{},"text":{"10":{},"17":{}},"component":{}}],["bool",{"_index":451,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"10":{},"13":{},"17":{},"19":{},"21":{},"22":{},"24":{},"25":{},"26":{}},"component":{}}],["boolean",{"_index":1337,"title":{},"name":{},"text":{"13":{}},"component":{}}],["boost",{"_index":2676,"title":{},"name":{},"text":{"24":{}},"component":{}}],["bore",{"_index":1631,"title":{},"name":{},"text":{"16":{}},"component":{}}],["borrowing(elem",{"_index":2122,"title":{},"name":{},"text":{"19":{}},"component":{}}],["both",{"_index":206,"title":{},"name":{},"text":{"1":{},"2":{},"8":{},"11":{},"19":{},"21":{},"24":{}},"component":{}}],["bother",{"_index":1487,"title":{},"name":{},"text":{"15":{}},"component":{}}],["bottom",{"_index":98,"title":{},"name":{},"text":{"1":{},"14":{},"16":{}},"component":{}}],["bounc",{"_index":1270,"title":{},"name":{},"text":{"13":{}},"component":{}}],["bound",{"_index":2612,"title":{},"name":{},"text":{"23":{}},"component":{}}],["boundari",{"_index":94,"title":{},"name":{},"text":{"1":{}},"component":{}}],["box",{"_index":2510,"title":{},"name":{},"text":{"23":{}},"component":{}}],["brace",{"_index":1143,"title":{},"name":{},"text":{"11":{}},"component":{}}],["break",{"_index":457,"title":{},"name":{},"text":{"4":{},"12":{},"17":{},"18":{},"19":{},"22":{},"23":{},"24":{}},"component":{}}],["bring",{"_index":2438,"title":{},"name":{},"text":{"22":{}},"component":{}}],["brutal",{"_index":1659,"title":{},"name":{},"text":{"17":{}},"component":{}}],["brute",{"_index":1842,"title":{},"name":{},"text":{"18":{}},"component":{}}],["btreemap",{"_index":950,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["btreeset",{"_index":522,"title":{},"name":{},"text":{"5":{},"9":{},"20":{},"24":{},"25":{}},"component":{}}],["btreeset::new",{"_index":2279,"title":{},"name":{},"text":{"20":{},"24":{}},"component":{}}],["buffer",{"_index":245,"title":{},"name":{},"text":{"2":{}},"component":{}}],["bug",{"_index":1780,"title":{},"name":{},"text":{"17":{}},"component":{}}],["buggi",{"_index":1497,"title":{},"name":{},"text":{"15":{}},"component":{}}],["build",{"_index":1274,"title":{},"name":{},"text":{"13":{},"15":{}},"component":{}}],["burrow",{"_index":2717,"title":{},"name":{},"text":{"24":{}},"component":{}}],["by_adding_lines_in",{"_index":2106,"title":{},"name":{},"text":{"19":{}},"component":{}}],["by_ref",{"_index":1392,"title":{},"name":{},"text":{"14":{}},"component":{}}],["c",{"_index":361,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"10":{},"11":{},"12":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"26":{}},"component":{}}],["c.is_ascii_lowercase()).all(|b",{"_index":1294,"title":{},"name":{},"text":{"13":{}},"component":{}}],["c.to_digit(10).and_then(|d",{"_index":1089,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["c.to_digit(10).unwrap",{"_index":2100,"title":{},"name":{},"text":{"19":{}},"component":{}}],["c.to_digit(16",{"_index":1711,"title":{},"name":{},"text":{"17":{}},"component":{}}],["c.x_rang",{"_index":2578,"title":{},"name":{},"text":{"23":{}},"component":{}}],["c.y_rang",{"_index":2585,"title":{},"name":{},"text":{"23":{}},"component":{}}],["c.z_rang",{"_index":2590,"title":{},"name":{},"text":{"23":{}},"component":{}}],["c1",{"_index":1455,"title":{},"name":{},"text":{"15":{},"23":{}},"component":{}}],["c1_multipli",{"_index":1535,"title":{},"name":{},"text":{"15":{}},"component":{}}],["c2",{"_index":1456,"title":{},"name":{},"text":{"15":{},"23":{}},"component":{}}],["c2.x_rang",{"_index":2584,"title":{},"name":{},"text":{"23":{}},"component":{}}],["c2.y_rang",{"_index":2575,"title":{},"name":{},"text":{"23":{}},"component":{}}],["c2.z_rang",{"_index":2576,"title":{},"name":{},"text":{"23":{}},"component":{}}],["c2_multipli",{"_index":1536,"title":{},"name":{},"text":{"15":{}},"component":{}}],["c3",{"_index":1457,"title":{},"name":{},"text":{"15":{}},"component":{}}],["c_is_digit",{"_index":2098,"title":{},"name":{},"text":{"19":{}},"component":{}}],["cach",{"_index":1640,"title":{},"name":{},"text":{"16":{},"19":{}},"component":{}}],["call",{"_index":1287,"title":{},"name":{},"text":{"13":{},"16":{}},"component":{}}],["can_continu",{"_index":2953,"title":{},"name":{},"text":{"25":{}},"component":{}}],["can_visit_one_small_cave_twic",{"_index":1311,"title":{},"name":{},"text":{"13":{}},"component":{}}],["candid",{"_index":424,"title":{},"name":{},"text":{"4":{},"9":{},"20":{},"25":{}},"component":{}}],["candidate.n_on",{"_index":989,"title":{},"name":{},"text":{"9":{}},"component":{}}],["candidatedigit",{"_index":2954,"title":{},"name":{},"text":{"25":{}},"component":{}}],["candidates.len",{"_index":2959,"title":{},"name":{},"text":{"25":{}},"component":{}}],["candidates.mapv(|c",{"_index":455,"title":{},"name":{},"text":{"4":{}},"component":{}}],["candidates.push((transform",{"_index":2297,"title":{},"name":{},"text":{"20":{}},"component":{}}],["candidates[[i",{"_index":462,"title":{},"name":{},"text":{"4":{}},"component":{}}],["candidates_for_merge(&self",{"_index":2278,"title":{},"name":{},"text":{"20":{}},"component":{}}],["can’t",{"_index":1859,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["cap",{"_index":630,"title":{},"name":{},"text":{"6":{},"18":{}},"component":{}}],["capit",{"_index":1412,"title":{},"name":{},"text":{"14":{}},"component":{}}],["caps.get(i).and_then(|m",{"_index":1894,"title":{},"name":{},"text":{"18":{}},"component":{}}],["caps.get(i)?.as_str().parse::().ok",{"_index":637,"title":{},"name":{},"text":{"6":{}},"component":{}}],["cartesian",{"_index":486,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["case",{"_index":75,"title":{},"name":{},"text":{"1":{},"2":{},"7":{},"9":{},"13":{},"15":{},"17":{}},"component":{}}],["catch",{"_index":809,"title":{},"name":{},"text":{"8":{}},"component":{}}],["caus",{"_index":2168,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["cave",{"_index":1258,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cave.traverse(fals",{"_index":1340,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cave.traverse(tru",{"_index":1342,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cave_system",{"_index":1325,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cave_visit_count",{"_index":1310,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cave_visit_counts.entry(next_cave.name).or_insert(0",{"_index":1317,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cavekind",{"_index":1289,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cavekind::big",{"_index":1296,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cavekind::smal",{"_index":1295,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cavesystem",{"_index":1297,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cavesystem::from_str(input).unwrap",{"_index":1326,"title":{},"name":{},"text":{"13":{}},"component":{}}],["center_col",{"_index":2389,"title":{},"name":{},"text":{"21":{}},"component":{}}],["center_row",{"_index":2387,"title":{},"name":{},"text":{"21":{}},"component":{}}],["center_row.checked_sub(1",{"_index":2393,"title":{},"name":{},"text":{"21":{}},"component":{}}],["certain",{"_index":1253,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cf",{"_index":867,"title":{},"name":{},"text":{"9":{}},"component":{}}],["chain(other.elems.as_ref",{"_index":2045,"title":{},"name":{},"text":{"19":{}},"component":{}}],["chain(rest.iter().enumerate().filter_map(|(j",{"_index":2315,"title":{},"name":{},"text":{"20":{}},"component":{}}],["challeng",{"_index":316,"title":{},"name":{},"text":{"4":{},"6":{},"17":{}},"component":{}}],["changed_l_idx",{"_index":2025,"title":{},"name":{},"text":{"19":{}},"component":{}}],["changed_r_idx",{"_index":2029,"title":{},"name":{},"text":{"19":{}},"component":{}}],["char",{"_index":1087,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"15":{},"21":{},"24":{}},"component":{}}],["char_count",{"_index":1533,"title":{},"name":{},"text":{"15":{}},"component":{}}],["char_counts.valu",{"_index":1542,"title":{},"name":{},"text":{"15":{}},"component":{}}],["char_counts_2x",{"_index":1534,"title":{},"name":{},"text":{"15":{}},"component":{}}],["char_counts_2x.entry(c).or_insert(0",{"_index":1538,"title":{},"name":{},"text":{"15":{}},"component":{}}],["char_pair_count",{"_index":1531,"title":{},"name":{},"text":{"15":{}},"component":{}}],["charact",{"_index":335,"title":{},"name":{},"text":{"4":{},"15":{},"17":{},"19":{}},"component":{}}],["cheaper",{"_index":1582,"title":{},"name":{},"text":{"16":{}},"component":{}}],["cheapest",{"_index":2670,"title":{},"name":{},"text":{"24":{}},"component":{}}],["check",{"_index":237,"title":{},"name":{},"text":{"2":{},"15":{},"25":{}},"component":{}}],["child",{"_index":1692,"title":{},"name":{},"text":{"17":{}},"component":{}}],["children",{"_index":1690,"title":{},"name":{},"text":{"17":{}},"component":{}}],["chiton",{"_index":172,"title":{"16":{}},"name":{},"text":{"1":{}},"component":{}}],["choic",{"_index":1282,"title":{},"name":{},"text":{"13":{},"18":{}},"component":{}}],["choices1",{"_index":972,"title":{},"name":{},"text":{"9":{}},"component":{}}],["choices2",{"_index":975,"title":{},"name":{},"text":{"9":{}},"component":{}}],["choos",{"_index":383,"title":{},"name":{},"text":{"4":{},"16":{}},"component":{}}],["chunk",{"_index":1748,"title":{},"name":{},"text":{"17":{}},"component":{}}],["chunk[0",{"_index":1751,"title":{},"name":{},"text":{"17":{}},"component":{}}],["chunk_siz",{"_index":1745,"title":{},"name":{},"text":{"17":{}},"component":{}}],["circularbuff",{"_index":229,"title":{},"name":{},"text":{"2":{}},"component":{}}],["classic",{"_index":1550,"title":{},"name":{},"text":{"16":{},"24":{}},"component":{}}],["classifi",{"_index":1262,"title":{},"name":{},"text":{"13":{}},"component":{}}],["clearli",{"_index":2428,"title":{},"name":{},"text":{"22":{}},"component":{}}],["clone",{"_index":910,"title":{},"name":{},"text":{"9":{},"14":{},"15":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["cmp(&self",{"_index":2686,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cmp_predic",{"_index":449,"title":{},"name":{},"text":{"4":{}},"component":{}}],["cmp_predicate(2",{"_index":465,"title":{},"name":{},"text":{"4":{}},"component":{}}],["co2",{"_index":418,"title":{},"name":{},"text":{"4":{}},"component":{}}],["co2_rat",{"_index":419,"title":{},"name":{},"text":{"4":{}},"component":{}}],["code",{"_index":4,"title":{"1":{}},"name":{},"text":{"1":{},"5":{},"13":{},"15":{},"17":{},"20":{},"25":{}},"component":{}}],["coincid",{"_index":1920,"title":{},"name":{},"text":{"18":{}},"component":{}}],["col",{"_index":488,"title":{},"name":{},"text":{"5":{},"10":{},"20":{},"24":{},"26":{}},"component":{}}],["col(&self",{"_index":2206,"title":{},"name":{},"text":{"20":{}},"component":{}}],["col)).unwrap_or(&wal",{"_index":2732,"title":{},"name":{},"text":{"24":{}},"component":{}}],["col[i]).sum",{"_index":2221,"title":{},"name":{},"text":{"20":{}},"component":{}}],["col_has_more_ones_than_zero",{"_index":405,"title":{},"name":{},"text":{"4":{}},"component":{}}],["col_rang",{"_index":2802,"title":{},"name":{},"text":{"24":{}},"component":{}}],["collaps",{"_index":2057,"title":{},"name":{},"text":{"19":{}},"component":{}}],["collect",{"_index":305,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["collections::btreeset",{"_index":2183,"title":{},"name":{},"text":{"20":{}},"component":{}}],["collections::{btreemap",{"_index":521,"title":{},"name":{},"text":{"5":{},"24":{},"25":{}},"component":{}}],["column",{"_index":378,"title":{},"name":{},"text":{"4":{},"5":{},"20":{}},"component":{}}],["combin",{"_index":1999,"title":{},"name":{},"text":{"19":{},"23":{}},"component":{}}],["combine(&self",{"_index":1809,"title":{},"name":{},"text":{"17":{}},"component":{}}],["come",{"_index":1687,"title":{},"name":{},"text":{"17":{},"23":{}},"component":{}}],["common",{"_index":377,"title":{},"name":{},"text":{"4":{}},"component":{}}],["commonli",{"_index":101,"title":{},"name":{},"text":{"1":{}},"component":{}}],["comp",{"_index":1395,"title":{},"name":{},"text":{"14":{},"20":{},"23":{}},"component":{}}],["compar",{"_index":234,"title":{},"name":{},"text":{"2":{},"24":{},"25":{}},"component":{}}],["compare(comparitor",{"_index":1818,"title":{},"name":{},"text":{"17":{}},"component":{}}],["compare(eq",{"_index":1825,"title":{},"name":{},"text":{"17":{}},"component":{}}],["compare(gt",{"_index":1823,"title":{},"name":{},"text":{"17":{}},"component":{}}],["compare(lt",{"_index":1824,"title":{},"name":{},"text":{"17":{}},"component":{}}],["comparitor",{"_index":1812,"title":{},"name":{},"text":{"17":{}},"component":{}}],["comparitor.apply(first",{"_index":1836,"title":{},"name":{},"text":{"17":{}},"component":{}}],["compil",{"_index":68,"title":{},"name":{},"text":{"1":{}},"component":{}}],["complic",{"_index":1063,"title":{},"name":{},"text":{"10":{},"18":{}},"component":{}}],["compon",{"_index":233,"title":{},"name":{},"text":{"2":{}},"component":{}}],["compris",{"_index":1691,"title":{},"name":{},"text":{"17":{},"24":{}},"component":{}}],["comps.next",{"_index":2604,"title":{},"name":{},"text":{"23":{}},"component":{}}],["comps.next()?.parse().ok",{"_index":2326,"title":{},"name":{},"text":{"20":{}},"component":{}}],["comps.next()?.parse::().ok",{"_index":1396,"title":{},"name":{},"text":{"14":{}},"component":{}}],["comput",{"_index":346,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"15":{},"17":{}},"component":{}}],["computation",{"_index":1446,"title":{},"name":{},"text":{"15":{},"18":{},"22":{},"24":{},"25":{}},"component":{}}],["computer’",{"_index":858,"title":{},"name":{},"text":{"9":{}},"component":{}}],["concaten",{"_index":1627,"title":{},"name":{},"text":{"16":{},"19":{}},"component":{}}],["concav",{"_index":817,"title":{},"name":{},"text":{"8":{}},"component":{}}],["concern",{"_index":2898,"title":{},"name":{},"text":{"25":{}},"component":{}}],["condit",{"_index":324,"title":{},"name":{},"text":{"4":{}},"component":{}}],["connect",{"_index":1070,"title":{},"name":{},"text":{"10":{}},"component":{}}],["consecut",{"_index":2054,"title":{},"name":{},"text":{"19":{}},"component":{}}],["consid",{"_index":2653,"title":{},"name":{},"text":{"24":{}},"component":{}}],["consider",{"_index":1952,"title":{},"name":{},"text":{"18":{}},"component":{}}],["consist",{"_index":1660,"title":{},"name":{},"text":{"17":{},"22":{}},"component":{}}],["const",{"_index":713,"title":{},"name":{},"text":{"7":{},"9":{},"24":{}},"component":{}}],["constant",{"_index":743,"title":{},"name":{},"text":{"8":{}},"component":{}}],["constraint",{"_index":1251,"title":{},"name":{},"text":{"13":{},"18":{},"24":{}},"component":{}}],["construct",{"_index":1626,"title":{},"name":{},"text":{"16":{},"24":{}},"component":{}}],["consum",{"_index":1684,"title":{},"name":{},"text":{"17":{},"25":{}},"component":{}}],["contain",{"_index":1072,"title":{},"name":{},"text":{"10":{},"14":{},"15":{},"17":{},"19":{},"23":{},"25":{}},"component":{}}],["content",{"_index":2355,"title":{},"name":{},"text":{"21":{}},"component":{}}],["contextu",{"_index":29,"title":{},"name":{},"text":{"1":{}},"component":{}}],["continu",{"_index":601,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"10":{},"13":{},"16":{},"17":{},"18":{},"20":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["control",{"_index":705,"title":{},"name":{},"text":{"7":{}},"component":{}}],["convert",{"_index":337,"title":{},"name":{},"text":{"4":{}},"component":{}}],["coord",{"_index":550,"title":{},"name":{},"text":{"5":{},"16":{},"23":{}},"component":{}}],["coordin",{"_index":487,"title":{},"name":{},"text":{"5":{},"18":{},"23":{}},"component":{}}],["coords_stack",{"_index":1123,"title":{},"name":{},"text":{"10":{}},"component":{}}],["coords_stack.pop",{"_index":1126,"title":{},"name":{},"text":{"10":{}},"component":{}}],["coords_stack.push(nghbr_idx",{"_index":1132,"title":{},"name":{},"text":{"10":{}},"component":{}}],["copi",{"_index":726,"title":{},"name":{},"text":{"7":{},"9":{},"11":{},"16":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["copy>(&self",{"_index":2274,"title":{},"name":{},"text":{"20":{}},"component":{}}],["corner",{"_index":1350,"title":{},"name":{},"text":{"14":{},"16":{}},"component":{}}],["correct",{"_index":57,"title":{},"name":{},"text":{"1":{},"9":{},"15":{},"17":{}},"component":{}}],["correctli",{"_index":69,"title":{},"name":{},"text":{"1":{},"3":{},"9":{},"12":{}},"component":{}}],["correspond",{"_index":334,"title":{},"name":{},"text":{"4":{},"9":{},"23":{}},"component":{}}],["corrupt",{"_index":1147,"title":{},"name":{},"text":{"11":{}},"component":{}}],["corrupted(token",{"_index":1162,"title":{},"name":{},"text":{"11":{}},"component":{}}],["cost",{"_index":787,"title":{},"name":{},"text":{"8":{},"16":{},"24":{}},"component":{}}],["cost(0",{"_index":2764,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cost(cost.0",{"_index":2812,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cost(mean",{"_index":822,"title":{},"name":{},"text":{"8":{}},"component":{}}],["cost(mean_rounded_down",{"_index":830,"title":{},"name":{},"text":{"8":{}},"component":{}}],["cost(us",{"_index":2684,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cost::max",{"_index":1612,"title":{},"name":{},"text":{"16":{}},"component":{}}],["cost::try_from(outer_r",{"_index":1650,"title":{},"name":{},"text":{"16":{}},"component":{}}],["count",{"_index":321,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"9":{},"13":{},"15":{},"17":{},"20":{},"21":{},"22":{}},"component":{}}],["counter",{"_index":641,"title":{},"name":{},"text":{"6":{}},"component":{}}],["counter.entry(point(x",{"_index":667,"title":{},"name":{},"text":{"6":{}},"component":{}}],["counteract",{"_index":1778,"title":{},"name":{},"text":{"17":{}},"component":{}}],["counts[r1",{"_index":2488,"title":{},"name":{},"text":{"22":{}},"component":{}}],["coupl",{"_index":2246,"title":{},"name":{},"text":{"20":{}},"component":{}}],["crap",{"_index":1839,"title":{},"name":{},"text":{"18":{}},"component":{}}],["crate::answ",{"_index":246,"title":{},"name":{},"text":{"2":{},"5":{},"6":{},"7":{},"9":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"19":{},"20":{},"22":{},"25":{},"26":{}},"component":{}}],["crate::{utils::abs_diff",{"_index":754,"title":{},"name":{},"text":{"8":{},"24":{}},"component":{}}],["crate::{utils::to_big_decim",{"_index":1703,"title":{},"name":{},"text":{"17":{}},"component":{}}],["crate::{utils::to_decim",{"_index":349,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{}}],["creat",{"_index":80,"title":{},"name":{},"text":{"1":{},"4":{},"23":{},"24":{}},"component":{}}],["cross",{"_index":853,"title":{},"name":{},"text":{"9":{}},"component":{}}],["crux",{"_index":2650,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cs",{"_index":1551,"title":{},"name":{},"text":{"16":{},"23":{}},"component":{}}],["cs.sort_by_key(|c",{"_index":2577,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[0].x_range[0",{"_index":2582,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[0].x_range[1",{"_index":2579,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[0].y_range[0",{"_index":2588,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[0].y_range[1",{"_index":2586,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[0].z_range[0",{"_index":2593,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[0].z_range[1",{"_index":2591,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[1].x_range[0",{"_index":2580,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[1].x_range[1",{"_index":2583,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[1].y_range[0",{"_index":2587,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[1].y_range[1",{"_index":2589,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[1].z_range[0",{"_index":2592,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cs[1].z_range[1",{"_index":2594,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cube",{"_index":2505,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cuboid",{"_index":2531,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cuboid.intersection(&bound",{"_index":2618,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cuboid.s",{"_index":2635,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cuboid::from_coords_str(str_comps.next",{"_index":2611,"title":{},"name":{},"text":{"23":{}},"component":{}}],["cucumb",{"_index":201,"title":{"26":{}},"name":{},"text":{"1":{}},"component":{}}],["curli",{"_index":1154,"title":{},"name":{},"text":{"11":{}},"component":{}}],["curr",{"_index":1167,"title":{},"name":{},"text":{"11":{}},"component":{}}],["curr.borrow",{"_index":1168,"title":{},"name":{},"text":{"11":{}},"component":{}}],["curr.brac",{"_index":1175,"title":{},"name":{},"text":{"11":{}},"component":{}}],["curr.orient",{"_index":1173,"title":{},"name":{},"text":{"11":{}},"component":{}}],["curr_cav",{"_index":1308,"title":{},"name":{},"text":{"13":{}},"component":{}}],["curr_col",{"_index":2798,"title":{},"name":{},"text":{"24":{}},"component":{}}],["curr_depth",{"_index":2074,"title":{},"name":{},"text":{"19":{}},"component":{}}],["curr_in_reg",{"_index":2861,"title":{},"name":{},"text":{"25":{}},"component":{}}],["curr_instr",{"_index":2862,"title":{},"name":{},"text":{"25":{}},"component":{}}],["curr_instrs.clear",{"_index":2870,"title":{},"name":{},"text":{"25":{}},"component":{}}],["curr_instrs.clon",{"_index":2868,"title":{},"name":{},"text":{"25":{}},"component":{}}],["curr_instrs.push(mathinstr",{"_index":2874,"title":{},"name":{},"text":{"25":{}},"component":{}}],["curr_loc",{"_index":2788,"title":{},"name":{},"text":{"24":{}},"component":{}}],["curr_loc[col",{"_index":2794,"title":{},"name":{},"text":{"24":{}},"component":{}}],["curr_loc[row",{"_index":2795,"title":{},"name":{},"text":{"24":{}},"component":{}}],["curr_row",{"_index":2797,"title":{},"name":{},"text":{"24":{}},"component":{}}],["curr_z",{"_index":2931,"title":{},"name":{},"text":{"25":{}},"component":{}}],["curr_zs.entry(z).or_insert_with(set::new).insert(prev_z",{"_index":2938,"title":{},"name":{},"text":{"25":{}},"component":{}}],["current",{"_index":218,"title":{},"name":{},"text":{"2":{},"3":{},"13":{},"16":{},"17":{},"24":{}},"component":{}}],["cursor",{"_index":1681,"title":{},"name":{},"text":{"17":{}},"component":{}}],["cut",{"_index":2435,"title":{},"name":{},"text":{"22":{}},"component":{}}],["c|f",{"_index":906,"title":{},"name":{},"text":{"9":{}},"component":{}}],["d",{"_index":896,"title":{},"name":{},"text":{"9":{},"18":{},"24":{}},"component":{}}],["d.borrow",{"_index":1044,"title":{},"name":{},"text":{"9":{}},"component":{}}],["d=1",{"_index":2915,"title":{},"name":{},"text":{"25":{}},"component":{}}],["d=9",{"_index":2916,"title":{},"name":{},"text":{"25":{}},"component":{}}],["d_cost",{"_index":1649,"title":{},"name":{},"text":{"16":{}},"component":{}}],["data",{"_index":771,"title":{},"name":{},"text":{"8":{},"10":{},"12":{},"17":{},"21":{}},"component":{}}],["data).ok",{"_index":1093,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["data).unwrap",{"_index":2373,"title":{},"name":{},"text":{"21":{}},"component":{}}],["data.extend",{"_index":1086,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["data.into_iter().collect",{"_index":1213,"title":{},"name":{},"text":{"12":{}},"component":{}}],["data.iter().copied().collect",{"_index":1091,"title":{},"name":{},"text":{"10":{}},"component":{}}],["data.len",{"_index":2372,"title":{},"name":{},"text":{"21":{}},"component":{}}],["data_bit",{"_index":1738,"title":{},"name":{},"text":{"17":{}},"component":{}}],["data_bits.chunks_exact(5",{"_index":1749,"title":{},"name":{},"text":{"17":{}},"component":{}}],["data_bits[0",{"_index":1757,"title":{},"name":{},"text":{"17":{}},"component":{}}],["dataset",{"_index":765,"title":{},"name":{},"text":{"8":{}},"component":{}}],["datum_abov",{"_index":782,"title":{},"name":{},"text":{"8":{}},"component":{}}],["datum_below",{"_index":780,"title":{},"name":{},"text":{"8":{}},"component":{}}],["day",{"_index":130,"title":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["ddd",{"_index":2056,"title":{},"name":{},"text":{"19":{}},"component":{}}],["dddd",{"_index":843,"title":{},"name":{},"text":{"9":{}},"component":{}}],["de",{"_index":903,"title":{},"name":{},"text":{"9":{}},"component":{}}],["debug",{"_index":1152,"title":{},"name":{},"text":{"11":{},"12":{},"14":{},"15":{},"20":{},"24":{},"26":{}},"component":{}}],["decim",{"_index":341,"title":{},"name":{},"text":{"4":{}},"component":{}}],["decod",{"_index":175,"title":{"17":{}},"name":{},"text":{"1":{}},"component":{}}],["decreas",{"_index":773,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["decrement",{"_index":509,"title":{},"name":{},"text":{"5":{},"17":{}},"component":{}}],["deduc",{"_index":833,"title":{},"name":{},"text":{"9":{}},"component":{}}],["deep",{"_index":273,"title":{},"name":{},"text":{"3":{}},"component":{}}],["deeper",{"_index":2062,"title":{},"name":{},"text":{"19":{},"24":{}},"component":{}}],["def",{"_index":901,"title":{},"name":{},"text":{"9":{}},"component":{}}],["defin",{"_index":428,"title":{},"name":{},"text":{"4":{},"6":{},"17":{}},"component":{}}],["definit",{"_index":1572,"title":{},"name":{},"text":{"16":{},"18":{}},"component":{}}],["delet",{"_index":2007,"title":{},"name":{},"text":{"19":{}},"component":{}}],["depend",{"_index":1264,"title":{},"name":{},"text":{"13":{},"21":{}},"component":{}}],["depth",{"_index":219,"title":{},"name":{},"text":{"2":{},"17":{},"19":{}},"component":{}}],["depth_buf",{"_index":252,"title":{},"name":{},"text":{"2":{}},"component":{}}],["depth_buf.extend(depths.by_ref().take(n",{"_index":256,"title":{},"name":{},"text":{"2":{}},"component":{}}],["depth_buf.len",{"_index":257,"title":{},"name":{},"text":{"2":{}},"component":{}}],["depth_stack",{"_index":2069,"title":{},"name":{},"text":{"19":{}},"component":{}}],["depth_stack.extend([prev_depth",{"_index":2081,"title":{},"name":{},"text":{"19":{}},"component":{}}],["depth_stack.pop",{"_index":2072,"title":{},"name":{},"text":{"19":{}},"component":{}}],["depth_stack.push(curr_depth",{"_index":2078,"title":{},"name":{},"text":{"19":{}},"component":{}}],["depth_stack.push(depth",{"_index":2071,"title":{},"name":{},"text":{"19":{}},"component":{}}],["deriv",{"_index":888,"title":{},"name":{},"text":{"9":{},"18":{}},"component":{}}],["derive(clon",{"_index":1151,"title":{},"name":{},"text":{"11":{},"12":{},"14":{},"20":{},"22":{},"24":{},"26":{}},"component":{}}],["derive(copi",{"_index":1370,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["derive(debug",{"_index":525,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"10":{},"13":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["derive(eq",{"_index":2683,"title":{},"name":{},"text":{"24":{}},"component":{}}],["descend",{"_index":1697,"title":{},"name":{},"text":{"17":{},"19":{}},"component":{}}],["descent",{"_index":1980,"title":{},"name":{},"text":{"18":{}},"component":{}}],["describ",{"_index":504,"title":{},"name":{},"text":{"5":{},"24":{}},"component":{}}],["descript",{"_index":215,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["desir",{"_index":2060,"title":{},"name":{},"text":{"19":{}},"component":{}}],["despit",{"_index":1574,"title":{},"name":{},"text":{"16":{},"17":{}},"component":{}}],["dest",{"_index":1302,"title":{},"name":{},"text":{"13":{}},"component":{}}],["dest_col",{"_index":2789,"title":{},"name":{},"text":{"24":{}},"component":{}}],["dest_col(self",{"_index":2697,"title":{},"name":{},"text":{"24":{}},"component":{}}],["destin",{"_index":1250,"title":{},"name":{},"text":{"13":{},"24":{}},"component":{}}],["determin",{"_index":2050,"title":{},"name":{},"text":{"19":{}},"component":{}}],["determinist",{"_index":2424,"title":{},"name":{},"text":{"22":{}},"component":{}}],["deterministicdi",{"_index":2450,"title":{},"name":{},"text":{"22":{}},"component":{}}],["deterministicdie::new(1",{"_index":2464,"title":{},"name":{},"text":{"22":{}},"component":{}}],["deviat",{"_index":762,"title":{},"name":{},"text":{"8":{}},"component":{}}],["df",{"_index":1074,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{}}],["diag_count",{"_index":697,"title":{},"name":{},"text":{"6":{}},"component":{}}],["diag_counter.entry(k).or_default",{"_index":699,"title":{},"name":{},"text":{"6":{}},"component":{}}],["diagnost",{"_index":138,"title":{"4":{}},"name":{},"text":{"1":{}},"component":{}}],["diagon",{"_index":672,"title":{},"name":{},"text":{"6":{}},"component":{}}],["diamond",{"_index":2899,"title":{},"name":{},"text":{"25":{}},"component":{}}],["dice",{"_index":189,"title":{"22":{}},"name":{},"text":{"1":{},"22":{}},"component":{}}],["dictionari",{"_index":483,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["did_modifi",{"_index":1615,"title":{},"name":{},"text":{"16":{}},"component":{}}],["didn’t",{"_index":1486,"title":{},"name":{},"text":{"15":{},"16":{}},"component":{}}],["die",{"_index":2422,"title":{},"name":{},"text":{"22":{}},"component":{}}],["die.n_rol",{"_index":2471,"title":{},"name":{},"text":{"22":{}},"component":{}}],["die.roll()).sum",{"_index":2453,"title":{},"name":{},"text":{"22":{}},"component":{}}],["die_n_fac",{"_index":2476,"title":{},"name":{},"text":{"22":{}},"component":{}}],["diff",{"_index":825,"title":{},"name":{},"text":{"8":{},"20":{}},"component":{}}],["differ",{"_index":15,"title":{},"name":{},"text":{"1":{},"8":{},"9":{},"20":{},"24":{}},"component":{}}],["digit",{"_index":340,"title":{},"name":{},"text":{"4":{},"9":{},"17":{},"19":{},"25":{}},"component":{}}],["digit..=9",{"_index":2964,"title":{},"name":{},"text":{"25":{}},"component":{}}],["digit.segments.map(u8::from",{"_index":939,"title":{},"name":{},"text":{"9":{}},"component":{}}],["digit::from(n",{"_index":955,"title":{},"name":{},"text":{"9":{}},"component":{}}],["digit::new([fals",{"_index":1024,"title":{},"name":{},"text":{"9":{}},"component":{}}],["digit_idx",{"_index":2924,"title":{},"name":{},"text":{"25":{}},"component":{}}],["digit_sum",{"_index":459,"title":{},"name":{},"text":{"4":{}},"component":{}}],["digitrang",{"_index":2951,"title":{},"name":{},"text":{"25":{}},"component":{}}],["digits_w_same_n_seg",{"_index":961,"title":{},"name":{},"text":{"9":{}},"component":{}}],["digits_w_same_n_segments.clon",{"_index":964,"title":{},"name":{},"text":{"9":{}},"component":{}}],["dimens",{"_index":2570,"title":{},"name":{},"text":{"23":{}},"component":{}}],["dimension",{"_index":2161,"title":{},"name":{},"text":{"20":{}},"component":{}}],["dirac",{"_index":188,"title":{"22":{}},"name":{},"text":{"1":{}},"component":{}}],["direct",{"_index":286,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"18":{}},"component":{}}],["direction::from_str(tokens_iter.next",{"_index":302,"title":{},"name":{},"text":{"3":{}},"component":{}}],["discrimin",{"_index":1946,"title":{},"name":{},"text":{"18":{}},"component":{}}],["discuss",{"_index":1633,"title":{},"name":{},"text":{"16":{},"22":{}},"component":{}}],["disjoint",{"_index":998,"title":{},"name":{},"text":{"9":{},"24":{}},"component":{}}],["display",{"_index":837,"title":{},"name":{},"text":{"9":{},"14":{},"19":{}},"component":{}}],["dist",{"_index":296,"title":{},"name":{},"text":{"3":{},"16":{}},"component":{}}],["distanc",{"_index":789,"title":{},"name":{},"text":{"8":{},"20":{}},"component":{}}],["distinct",{"_index":446,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["div",{"_index":2842,"title":{},"name":{},"text":{"25":{}},"component":{}}],["div_mod_floor(i",{"_index":544,"title":{},"name":{},"text":{"5":{}},"component":{}}],["dive",{"_index":135,"title":{"3":{}},"name":{},"text":{"1":{}},"component":{}}],["divid",{"_index":1466,"title":{},"name":{},"text":{"15":{},"23":{}},"component":{}}],["divis",{"_index":1479,"title":{},"name":{},"text":{"15":{}},"component":{}}],["do",{"_index":1277,"title":{},"name":{},"text":{"13":{},"23":{}},"component":{}}],["do_fold",{"_index":1388,"title":{},"name":{},"text":{"14":{}},"component":{}}],["doc",{"_index":7,"title":{},"name":{},"text":{"1":{},"5":{}},"component":{}}],["document",{"_index":35,"title":{},"name":{},"text":{"1":{}},"component":{}}],["doesn’t",{"_index":1459,"title":{},"name":{},"text":{"15":{},"20":{}},"component":{}}],["domin",{"_index":802,"title":{},"name":{},"text":{"8":{}},"component":{}}],["done",{"_index":899,"title":{},"name":{},"text":{"9":{},"11":{},"20":{},"23":{},"25":{}},"component":{}}],["don’t",{"_index":38,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"13":{}},"component":{}}],["doorway",{"_index":2663,"title":{},"name":{},"text":{"24":{}},"component":{}}],["dot",{"_index":1343,"title":{},"name":{},"text":{"14":{}},"component":{}}],["dots.insert(p.folded(fold",{"_index":1386,"title":{},"name":{},"text":{"14":{}},"component":{}}],["dots.into_iter().collect",{"_index":1382,"title":{},"name":{},"text":{"14":{}},"component":{}}],["doubl",{"_index":1445,"title":{},"name":{},"text":{"15":{}},"component":{}}],["down",{"_index":288,"title":{},"name":{},"text":{"3":{},"4":{},"8":{},"9":{},"18":{},"22":{},"26":{}},"component":{}}],["downs.insert(loc",{"_index":2970,"title":{},"name":{},"text":{"26":{}},"component":{}}],["drag",{"_index":1857,"title":{},"name":{},"text":{"18":{}},"component":{}}],["draw",{"_index":581,"title":{},"name":{},"text":{"5":{}},"component":{}}],["drawn",{"_index":482,"title":{},"name":{},"text":{"5":{}},"component":{}}],["due",{"_index":1563,"title":{},"name":{},"text":{"16":{},"24":{}},"component":{}}],["dumbo",{"_index":160,"title":{"12":{}},"name":{},"text":{"1":{}},"component":{}}],["dummi",{"_index":2863,"title":{},"name":{},"text":{"25":{}},"component":{}}],["duplic",{"_index":1797,"title":{},"name":{},"text":{"17":{},"25":{}},"component":{}}],["durat",{"_index":2366,"title":{},"name":{},"text":{"21":{}},"component":{}}],["dure",{"_index":854,"title":{},"name":{},"text":{"9":{}},"component":{}}],["dyn",{"_index":966,"title":{},"name":{},"text":{"9":{}},"component":{}}],["d−1d",{"_index":2058,"title":{},"name":{},"text":{"19":{}},"component":{}}],["e",{"_index":844,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["e.g",{"_index":1002,"title":{},"name":{},"text":{"9":{}},"component":{}}],["e1",{"_index":2017,"title":{},"name":{},"text":{"19":{}},"component":{}}],["e1,…,ene_1,\\ldots,e_ne1​,…,en",{"_index":2175,"title":{},"name":{},"text":{"20":{}},"component":{}}],["e1.depth",{"_index":2020,"title":{},"name":{},"text":{"19":{}},"component":{}}],["e2",{"_index":2019,"title":{},"name":{},"text":{"19":{}},"component":{}}],["e2.depth",{"_index":2021,"title":{},"name":{},"text":{"19":{}},"component":{}}],["each",{"_index":17,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"9":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["easi",{"_index":1668,"title":{},"name":{},"text":{"17":{},"18":{},"19":{}},"component":{}}],["easier",{"_index":1477,"title":{},"name":{},"text":{"15":{},"19":{},"20":{}},"component":{}}],["edg",{"_index":1254,"title":{},"name":{},"text":{"13":{},"18":{},"20":{},"23":{},"25":{}},"component":{}}],["effect",{"_index":738,"title":{},"name":{},"text":{"8":{}},"component":{}}],["effici",{"_index":1846,"title":{},"name":{},"text":{"18":{},"24":{}},"component":{}}],["eight",{"_index":1411,"title":{},"name":{},"text":{"14":{},"21":{}},"component":{}}],["eight_i",{"_index":1968,"title":{},"name":{},"text":{"18":{}},"component":{}}],["eight_y.ab",{"_index":1970,"title":{},"name":{},"text":{"18":{}},"component":{}}],["elem",{"_index":427,"title":{},"name":{},"text":{"4":{},"19":{},"20":{}},"component":{}}],["elem.valu",{"_index":2032,"title":{},"name":{},"text":{"19":{}},"component":{}}],["element",{"_index":322,"title":{},"name":{},"text":{"4":{},"6":{},"19":{},"21":{}},"component":{}}],["elems.insert",{"_index":2038,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems.iter().enumer",{"_index":2070,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems.iter().enumerate().find_map(|(i",{"_index":2031,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems.len",{"_index":2067,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems.remove(r_idx",{"_index":2028,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems.split_at(i",{"_index":2075,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems[idx].valu",{"_index":2026,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems[l_idx",{"_index":2023,"title":{},"name":{},"text":{"19":{}},"component":{}}],["elems[split_idx",{"_index":2037,"title":{},"name":{},"text":{"19":{}},"component":{}}],["empti",{"_index":1149,"title":{},"name":{},"text":{"11":{},"23":{}},"component":{}}],["encount",{"_index":72,"title":{},"name":{},"text":{"1":{}},"component":{}}],["end",{"_index":856,"title":{},"name":{},"text":{"9":{},"11":{},"13":{},"14":{},"15":{},"17":{},"25":{}},"component":{}}],["endpoint",{"_index":643,"title":{},"name":{},"text":{"6":{},"23":{}},"component":{}}],["endpointpair",{"_index":665,"title":{},"name":{},"text":{"6":{}},"component":{}}],["endpointpair(point",{"_index":624,"title":{},"name":{},"text":{"6":{}},"component":{}}],["endpointpair(point(x1",{"_index":666,"title":{},"name":{},"text":{"6":{}},"component":{}}],["end{align*}x(t,vx​)y(t,vy​)​={vx​t−21​t(t−1)21​vx​(vx​+1)​t≤vx​t≥vx​​=vy​t−21​t(t−1",{"_index":1916,"title":{},"name":{},"text":{"18":{}},"component":{}}],["end{cas",{"_index":1914,"title":{},"name":{},"text":{"18":{}},"component":{}}],["end{cases}vx​={2t2x+t(t−1)​2−1±1+8x​​​t≤vx​t≥vx",{"_index":1936,"title":{},"name":{},"text":{"18":{}},"component":{}}],["energy(self",{"_index":2698,"title":{},"name":{},"text":{"24":{}},"component":{}}],["enough",{"_index":1433,"title":{},"name":{},"text":{"14":{},"20":{},"23":{}},"component":{}}],["enqueu",{"_index":2750,"title":{},"name":{},"text":{"24":{}},"component":{}}],["entir",{"_index":878,"title":{},"name":{},"text":{"9":{},"25":{}},"component":{}}],["entri",{"_index":1066,"title":{},"name":{},"text":{"10":{},"13":{},"15":{},"20":{},"24":{}},"component":{}}],["entries.iter_mut().enumer",{"_index":2220,"title":{},"name":{},"text":{"20":{}},"component":{}}],["entries[i",{"_index":2214,"title":{},"name":{},"text":{"20":{}},"component":{}}],["entry(digit.n_on",{"_index":956,"title":{},"name":{},"text":{"9":{}},"component":{}}],["entry(next_cave.nam",{"_index":1322,"title":{},"name":{},"text":{"13":{}},"component":{}}],["entry(orig",{"_index":1304,"title":{},"name":{},"text":{"13":{}},"component":{}}],["entry_costs.dim",{"_index":1609,"title":{},"name":{},"text":{"16":{}},"component":{}}],["entry_costs[nghbr_coord",{"_index":1621,"title":{},"name":{},"text":{"16":{}},"component":{}}],["enum",{"_index":285,"title":{},"name":{},"text":{"3":{},"11":{},"13":{},"15":{},"16":{},"17":{},"20":{},"23":{},"24":{},"25":{}},"component":{}}],["enumer",{"_index":116,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"15":{},"19":{},"22":{}},"component":{}}],["enumit",{"_index":2224,"title":{},"name":{},"text":{"20":{}},"component":{}}],["epsilon_r",{"_index":374,"title":{},"name":{},"text":{"4":{}},"component":{}}],["eq",{"_index":620,"title":{},"name":{},"text":{"6":{},"9":{},"11":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"24":{},"26":{}},"component":{}}],["eql",{"_index":2844,"title":{},"name":{},"text":{"25":{}},"component":{}}],["eqn_sid",{"_index":1363,"title":{},"name":{},"text":{"14":{}},"component":{}}],["eqn_sides.next",{"_index":1366,"title":{},"name":{},"text":{"14":{}},"component":{}}],["eqn_sides.next()?.parse::().ok",{"_index":1367,"title":{},"name":{},"text":{"14":{}},"component":{}}],["equal",{"_index":1215,"title":{},"name":{},"text":{"12":{},"16":{}},"component":{}}],["equat",{"_index":1900,"title":{},"name":{},"text":{"18":{}},"component":{}}],["equival",{"_index":2652,"title":{},"name":{},"text":{"24":{}},"component":{}}],["err",{"_index":2052,"title":{},"name":{},"text":{"19":{}},"component":{}}],["err(map",{"_index":1022,"title":{},"name":{},"text":{"9":{}},"component":{}}],["err(self.elems.as_ref()[0].valu",{"_index":2068,"title":{},"name":{},"text":{"19":{}},"component":{}}],["err(tokenizationerr::corrupted(curr",{"_index":1176,"title":{},"name":{},"text":{"11":{}},"component":{}}],["err(tokenizationerr::corrupted(t",{"_index":1191,"title":{},"name":{},"text":{"11":{}},"component":{}}],["err(tokenizationerr::incomplet",{"_index":1179,"title":{},"name":{},"text":{"11":{}},"component":{}}],["err(tokenizationerr::incomplete(token",{"_index":1199,"title":{},"name":{},"text":{"11":{}},"component":{}}],["err(val",{"_index":2089,"title":{},"name":{},"text":{"19":{}},"component":{}}],["error",{"_index":46,"title":{},"name":{},"text":{"1":{},"8":{},"15":{}},"component":{}}],["essenti",{"_index":1803,"title":{},"name":{},"text":{"17":{},"20":{}},"component":{}}],["etc",{"_index":2152,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["evalu",{"_index":1674,"title":{},"name":{},"text":{"17":{}},"component":{}}],["even",{"_index":89,"title":{},"name":{},"text":{"1":{},"9":{},"18":{}},"component":{}}],["eventu",{"_index":907,"title":{},"name":{},"text":{"9":{}},"component":{}}],["everyth",{"_index":1148,"title":{},"name":{},"text":{"11":{},"15":{},"18":{}},"component":{}}],["exactli",{"_index":865,"title":{},"name":{},"text":{"9":{},"17":{}},"component":{}}],["examin",{"_index":1555,"title":{},"name":{},"text":{"16":{}},"component":{}}],["exampl",{"_index":344,"title":{},"name":{},"text":{"4":{},"24":{}},"component":{}}],["exceed",{"_index":801,"title":{},"name":{},"text":{"8":{}},"component":{}}],["except",{"_index":49,"title":{},"name":{},"text":{"1":{},"4":{},"16":{}},"component":{}}],["exclud",{"_index":1951,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["exhaust",{"_index":1285,"title":{},"name":{},"text":{"13":{}},"component":{}}],["exist",{"_index":1438,"title":{},"name":{},"text":{"15":{},"18":{},"19":{},"20":{}},"component":{}}],["expand_grid(grid",{"_index":1635,"title":{},"name":{},"text":{"16":{}},"component":{}}],["expect",{"_index":1682,"title":{},"name":{},"text":{"17":{}},"component":{}}],["explanatori",{"_index":2083,"title":{},"name":{},"text":{"19":{}},"component":{}}],["explicitli",{"_index":44,"title":{},"name":{},"text":{"1":{}},"component":{}}],["explod",{"_index":2005,"title":{},"name":{},"text":{"19":{}},"component":{}}],["explode_first",{"_index":2118,"title":{},"name":{},"text":{"19":{}},"component":{}}],["explode_first(&mut",{"_index":2009,"title":{},"name":{},"text":{"19":{}},"component":{}}],["explor",{"_index":1256,"title":{},"name":{},"text":{"13":{},"24":{}},"component":{}}],["expon",{"_index":2436,"title":{},"name":{},"text":{"22":{}},"component":{}}],["express",{"_index":1675,"title":{},"name":{},"text":{"17":{}},"component":{}}],["extend",{"_index":169,"title":{"15":{}},"name":{},"text":{"1":{}},"component":{}}],["exterior",{"_index":2357,"title":{},"name":{},"text":{"21":{}},"component":{}}],["f",{"_index":845,"title":{},"name":{},"text":{"9":{},"14":{}},"component":{}}],["f(x",{"_index":924,"title":{},"name":{},"text":{"9":{}},"component":{}}],["f.write_char(c",{"_index":1714,"title":{},"name":{},"text":{"17":{}},"component":{}}],["f.write_str(\"\\n",{"_index":1427,"title":{},"name":{},"text":{"14":{}},"component":{}}],["f.write_str(if",{"_index":1422,"title":{},"name":{},"text":{"14":{}},"component":{}}],["face",{"_index":2164,"title":{},"name":{},"text":{"20":{},"23":{}},"component":{}}],["fact",{"_index":689,"title":{},"name":{},"text":{"6":{},"8":{},"16":{},"17":{},"18":{},"24":{},"25":{}},"component":{}}],["factor",{"_index":744,"title":{},"name":{},"text":{"8":{},"22":{}},"component":{}}],["fall",{"_index":1629,"title":{},"name":{},"text":{"16":{}},"component":{}}],["fals",{"_index":336,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"13":{},"16":{},"19":{},"21":{},"24":{},"26":{}},"component":{}}],["famili",{"_index":1799,"title":{},"name":{},"text":{"17":{}},"component":{}}],["familiar",{"_index":9,"title":{},"name":{},"text":{"1":{}},"component":{}}],["fan",{"_index":2901,"title":{},"name":{},"text":{"25":{}},"component":{}}],["far",{"_index":1685,"title":{},"name":{},"text":{"17":{},"24":{},"25":{}},"component":{}}],["fashion",{"_index":706,"title":{},"name":{},"text":{"7":{}},"component":{}}],["faster",{"_index":1570,"title":{},"name":{},"text":{"16":{}},"component":{}}],["feasibl",{"_index":1494,"title":{},"name":{},"text":{"15":{},"22":{},"23":{}},"component":{}}],["feel",{"_index":1568,"title":{},"name":{},"text":{"16":{}},"component":{}}],["fewest",{"_index":2654,"title":{},"name":{},"text":{"24":{}},"component":{}}],["file",{"_index":327,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filter",{"_index":319,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filter(|&n",{"_index":1056,"title":{},"name":{},"text":{"9":{}},"component":{}}],["filter_map(|(&k",{"_index":1519,"title":{},"name":{},"text":{"15":{}},"component":{}}],["filter_map(|(i",{"_index":460,"title":{},"name":{},"text":{"4":{},"22":{}},"component":{}}],["filter_map(|lin",{"_index":1031,"title":{},"name":{},"text":{"9":{}},"component":{}}],["filter_map(|r",{"_index":1198,"title":{},"name":{},"text":{"11":{}},"component":{}}],["filter_map(|splat",{"_index":2602,"title":{},"name":{},"text":{"23":{}},"component":{}}],["final",{"_index":945,"title":{},"name":{},"text":{"9":{},"13":{},"15":{},"24":{},"25":{}},"component":{}}],["find",{"_index":217,"title":{},"name":{},"text":{"2":{},"4":{},"8":{},"10":{},"16":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{}},"component":{}}],["find_digit",{"_index":2947,"title":{},"name":{},"text":{"25":{}},"component":{}}],["find_map(|((i1",{"_index":2016,"title":{},"name":{},"text":{"19":{}},"component":{}}],["find_map(|(i",{"_index":470,"title":{},"name":{},"text":{"4":{}},"component":{}}],["find_ts_and_vys_for_y(i",{"_index":1955,"title":{},"name":{},"text":{"18":{}},"component":{}}],["find_velocities(t",{"_index":1937,"title":{},"name":{},"text":{"18":{}},"component":{}}],["finish",{"_index":2815,"title":{},"name":{},"text":{"24":{}},"component":{}}],["finit",{"_index":2353,"title":{},"name":{},"text":{"21":{}},"component":{}}],["fire",{"_index":1851,"title":{},"name":{},"text":{"18":{}},"component":{}}],["first",{"_index":325,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"13":{},"15":{},"17":{},"19":{},"20":{},"22":{},"23":{},"25":{}},"component":{}}],["first.borrow",{"_index":2303,"title":{},"name":{},"text":{"20":{}},"component":{}}],["first.candidates_for_merge(",{"_index":2310,"title":{},"name":{},"text":{"20":{}},"component":{}}],["first.clon",{"_index":2306,"title":{},"name":{},"text":{"20":{}},"component":{}}],["first.merged_with(&transformed_scann",{"_index":2312,"title":{},"name":{},"text":{"20":{}},"component":{}}],["first_digit",{"_index":2948,"title":{},"name":{},"text":{"25":{}},"component":{}}],["first_lin",{"_index":356,"title":{},"name":{},"text":{"4":{},"16":{}},"component":{}}],["first_line.char",{"_index":1590,"title":{},"name":{},"text":{"16":{}},"component":{}}],["first_line.len",{"_index":359,"title":{},"name":{},"text":{"4":{}},"component":{}}],["first_po",{"_index":1523,"title":{},"name":{},"text":{"15":{}},"component":{}}],["first_pos)).or_default",{"_index":1526,"title":{},"name":{},"text":{"15":{}},"component":{}}],["fit",{"_index":2145,"title":{},"name":{},"text":{"20":{}},"component":{}}],["five",{"_index":869,"title":{},"name":{},"text":{"9":{}},"component":{}}],["fix",{"_index":741,"title":{},"name":{},"text":{"8":{},"14":{},"17":{}},"component":{}}],["flash",{"_index":1217,"title":{},"name":{},"text":{"12":{}},"component":{}}],["flash_thresh",{"_index":1216,"title":{},"name":{},"text":{"12":{}},"component":{}}],["flash_thresh).then_some(idx",{"_index":1227,"title":{},"name":{},"text":{"12":{}},"component":{}}],["flashing_octopi_idx",{"_index":1224,"title":{},"name":{},"text":{"12":{}},"component":{}}],["flashing_octopi_idxs.is_empti",{"_index":1228,"title":{},"name":{},"text":{"12":{}},"component":{}}],["flashing_octopi_idxs.len",{"_index":1229,"title":{},"name":{},"text":{"12":{}},"component":{}}],["flat",{"_index":2006,"title":{},"name":{},"text":{"19":{}},"component":{}}],["flat_map(|lin",{"_index":2369,"title":{},"name":{},"text":{"21":{}},"component":{}}],["flat_map(|piec",{"_index":2630,"title":{},"name":{},"text":{"23":{}},"component":{}}],["flat_map(|r",{"_index":1117,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["flavor",{"_index":1688,"title":{},"name":{},"text":{"17":{}},"component":{}}],["flip(self",{"_index":1158,"title":{},"name":{},"text":{"11":{}},"component":{}}],["floor",{"_index":1478,"title":{},"name":{},"text":{"15":{}},"component":{}}],["fmt(&self",{"_index":1414,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fmt::write",{"_index":2682,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["fn",{"_index":108,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["fn(bool",{"_index":922,"title":{},"name":{},"text":{"9":{}},"component":{}}],["fn(digit",{"_index":967,"title":{},"name":{},"text":{"9":{}},"component":{}}],["fn(num",{"_index":2950,"title":{},"name":{},"text":{"25":{}},"component":{}}],["fn(usiz",{"_index":450,"title":{},"name":{},"text":{"4":{}},"component":{}}],["fnonce(&mut",{"_index":2857,"title":{},"name":{},"text":{"25":{}},"component":{}}],["fold",{"_index":1347,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold(0",{"_index":2633,"title":{},"name":{},"text":{"23":{}},"component":{}}],["fold.borrow",{"_index":1390,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold::x(fold_x",{"_index":1373,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold::y(fold_i",{"_index":1377,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold_eqn",{"_index":1362,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold_eqn.split",{"_index":1364,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold_i",{"_index":1379,"title":{},"name":{},"text":{"14":{}},"component":{}}],["fold_x",{"_index":1375,"title":{},"name":{},"text":{"14":{}},"component":{}}],["folded(&self",{"_index":1371,"title":{},"name":{},"text":{"14":{}},"component":{}}],["folded_across(&self",{"_index":1383,"title":{},"name":{},"text":{"14":{}},"component":{}}],["folds.iter()))).into",{"_index":1405,"title":{},"name":{},"text":{"14":{}},"component":{}}],["folds[0",{"_index":1403,"title":{},"name":{},"text":{"14":{}},"component":{}}],["follow",{"_index":421,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"17":{},"18":{},"19":{},"25":{}},"component":{}}],["for_col(col",{"_index":2696,"title":{},"name":{},"text":{"24":{}},"component":{}}],["forc",{"_index":1843,"title":{},"name":{},"text":{"18":{}},"component":{}}],["forev",{"_index":1273,"title":{},"name":{},"text":{"13":{},"17":{},"18":{}},"component":{}}],["form",{"_index":605,"title":{},"name":{},"text":{"6":{},"16":{},"20":{},"25":{}},"component":{}}],["former",{"_index":1586,"title":{},"name":{},"text":{"16":{}},"component":{}}],["forth",{"_index":1272,"title":{},"name":{},"text":{"13":{}},"component":{}}],["forward",{"_index":209,"title":{},"name":{},"text":{"1":{},"3":{}},"component":{}}],["found",{"_index":676,"title":{},"name":{},"text":{"6":{},"19":{},"25":{}},"component":{}}],["four",{"_index":1581,"title":{},"name":{},"text":{"16":{},"19":{},"20":{},"25":{}},"component":{}}],["frac",{"_index":1934,"title":{},"name":{},"text":{"18":{}},"component":{}}],["frac{1}{2}t(t",{"_index":1909,"title":{},"name":{},"text":{"18":{}},"component":{}}],["frac{1}{2}v_x(v_x+1)&t",{"_index":1912,"title":{},"name":{},"text":{"18":{}},"component":{}}],["frac{2x+t(t",{"_index":1932,"title":{},"name":{},"text":{"18":{}},"component":{}}],["frac{n(n+1)}{2}∑k=1n​k=2n(n+1",{"_index":791,"title":{},"name":{},"text":{"8":{}},"component":{}}],["friendli",{"_index":1641,"title":{},"name":{},"text":{"16":{}},"component":{}}],["from(axi",{"_index":2231,"title":{},"name":{},"text":{"20":{}},"component":{}}],["from(digit",{"_index":938,"title":{},"name":{},"text":{"9":{}},"component":{}}],["from(n",{"_index":934,"title":{},"name":{},"text":{"9":{},"17":{}},"component":{}}],["from(swivel",{"_index":2264,"title":{},"name":{},"text":{"20":{}},"component":{}}],["from(transl",{"_index":2266,"title":{},"name":{},"text":{"20":{}},"component":{}}],["from_char(c",{"_index":1159,"title":{},"name":{},"text":{"11":{},"24":{}},"component":{}}],["from_col",{"_index":1599,"title":{},"name":{},"text":{"16":{}},"component":{}}],["from_cols(x",{"_index":2188,"title":{},"name":{},"text":{"20":{}},"component":{}}],["from_coords_str(",{"_index":2599,"title":{},"name":{},"text":{"23":{}},"component":{}}],["from_dots(dot",{"_index":1380,"title":{},"name":{},"text":{"14":{}},"component":{}}],["from_hex(",{"_index":1708,"title":{},"name":{},"text":{"17":{}},"component":{}}],["from_line(lin",{"_index":2093,"title":{},"name":{},"text":{"19":{},"23":{}},"component":{}}],["from_row",{"_index":1598,"title":{},"name":{},"text":{"16":{}},"component":{}}],["from_running_block_on",{"_index":2856,"title":{},"name":{},"text":{"25":{}},"component":{}}],["from_str(",{"_index":289,"title":{},"name":{},"text":{"3":{},"5":{},"9":{},"12":{},"14":{},"15":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["from_str(input",{"_index":1298,"title":{},"name":{},"text":{"13":{},"19":{},"26":{}},"component":{}}],["from_usize(n",{"_index":2695,"title":{},"name":{},"text":{"24":{}},"component":{}}],["full",{"_index":425,"title":{},"name":{},"text":{"4":{},"9":{},"14":{}},"component":{}}],["fun",{"_index":203,"title":{},"name":{},"text":{"1":{},"14":{},"18":{}},"component":{}}],["function",{"_index":87,"title":{},"name":{},"text":{"1":{},"4":{},"6":{},"9":{},"17":{},"19":{},"20":{},"25":{}},"component":{}}],["further",{"_index":1634,"title":{},"name":{},"text":{"16":{}},"component":{}}],["g",{"_index":935,"title":{},"name":{},"text":{"9":{}},"component":{}}],["game",{"_index":479,"title":{},"name":{},"text":{"5":{},"22":{}},"component":{}}],["game.board",{"_index":585,"title":{},"name":{},"text":{"5":{}},"component":{}}],["game.boards.iter_mut().enumer",{"_index":598,"title":{},"name":{},"text":{"5":{}},"component":{}}],["game.numb",{"_index":584,"title":{},"name":{},"text":{"5":{}},"component":{}}],["game1",{"_index":574,"title":{},"name":{},"text":{"5":{}},"component":{}}],["game2",{"_index":575,"title":{},"name":{},"text":{"5":{}},"component":{}}],["game::from_str(input).unwrap",{"_index":577,"title":{},"name":{},"text":{"5":{}},"component":{}}],["gamma",{"_index":373,"title":{},"name":{},"text":{"4":{}},"component":{}}],["gamma_r",{"_index":372,"title":{},"name":{},"text":{"4":{}},"component":{}}],["garbl",{"_index":881,"title":{},"name":{},"text":{"9":{}},"component":{}}],["garbled1",{"_index":971,"title":{},"name":{},"text":{"9":{}},"component":{}}],["garbled2",{"_index":974,"title":{},"name":{},"text":{"9":{}},"component":{}}],["garbled2).n_on",{"_index":1011,"title":{},"name":{},"text":{"9":{}},"component":{}}],["garbled_digit",{"_index":952,"title":{},"name":{},"text":{"9":{}},"component":{}}],["garden",{"_index":2987,"title":{},"name":{},"text":{"26":{}},"component":{}}],["garden.run_until_no_mov",{"_index":2992,"title":{},"name":{},"text":{"26":{}},"component":{}}],["gd",{"_index":959,"title":{},"name":{},"text":{"9":{}},"component":{}}],["gd.borrow",{"_index":960,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ge",{"_index":1913,"title":{},"name":{},"text":{"18":{}},"component":{}}],["gener",{"_index":81,"title":{},"name":{},"text":{"1":{},"15":{},"24":{}},"component":{}}],["get",{"_index":943,"title":{},"name":{},"text":{"9":{}},"component":{}}],["get(&[row",{"_index":2782,"title":{},"name":{},"text":{"24":{}},"component":{}}],["get_an",{"_index":312,"title":{},"name":{},"text":{"3":{}},"component":{}}],["get_ans(&all_count",{"_index":700,"title":{},"name":{},"text":{"6":{}},"component":{}}],["get_ans(&get_hv_point_counts(endpoint",{"_index":670,"title":{},"name":{},"text":{"6":{}},"component":{}}],["get_ans(&self",{"_index":282,"title":{},"name":{},"text":{"3":{},"5":{}},"component":{}}],["get_ans(polym",{"_index":1530,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_answer_from_final_game_st",{"_index":516,"title":{},"name":{},"text":{"5":{}},"component":{}}],["get_diag_point_counts(endpoint",{"_index":691,"title":{},"name":{},"text":{"6":{}},"component":{}}],["get_hv_point_counts(endpoint",{"_index":664,"title":{},"name":{},"text":{"6":{}},"component":{}}],["get_initial_char_pair_counts(&self",{"_index":1509,"title":{},"name":{},"text":{"15":{}},"component":{}}],["get_lines(input",{"_index":626,"title":{},"name":{},"text":{"6":{}},"component":{}}],["get_lines(input).unwrap",{"_index":644,"title":{},"name":{},"text":{"6":{}},"component":{}}],["get_mapping_from_garbled_digit",{"_index":951,"title":{},"name":{},"text":{"9":{}},"component":{}}],["get_mapping_from_garbled_digits(in_digits).ok",{"_index":1041,"title":{},"name":{},"text":{"9":{}},"component":{}}],["get_n_increasing_running_sum_of_depths(input",{"_index":248,"title":{},"name":{},"text":{"2":{}},"component":{}}],["get_neighbor_idx",{"_index":1081,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_neighbor_idxs(idx",{"_index":1103,"title":{},"name":{},"text":{"10":{}},"component":{}}],["get_next_digit",{"_index":2952,"title":{},"name":{},"text":{"25":{}},"component":{}}],["get_spans(my_span",{"_index":2544,"title":{},"name":{},"text":{"23":{}},"component":{}}],["get_spans(self.x_rang",{"_index":2557,"title":{},"name":{},"text":{"23":{}},"component":{}}],["get_spans(self.y_rang",{"_index":2559,"title":{},"name":{},"text":{"23":{}},"component":{}}],["get_spans(self.z_rang",{"_index":2561,"title":{},"name":{},"text":{"23":{}},"component":{}}],["get_valid_zs(&block",{"_index":2877,"title":{},"name":{},"text":{"25":{}},"component":{}}],["get_valid_zs(block",{"_index":2917,"title":{},"name":{},"text":{"25":{}},"component":{}}],["get_x(t",{"_index":1987,"title":{},"name":{},"text":{"18":{}},"component":{}}],["gggg",{"_index":846,"title":{},"name":{},"text":{"9":{}},"component":{}}],["giant",{"_index":140,"title":{"5":{}},"name":{},"text":{"1":{}},"component":{}}],["gibberish",{"_index":857,"title":{},"name":{},"text":{"9":{}},"component":{}}],["give",{"_index":12,"title":{},"name":{},"text":{"1":{},"20":{},"25":{}},"component":{}}],["given",{"_index":27,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"15":{},"16":{},"18":{},"20":{},"21":{},"24":{}},"component":{}}],["global",{"_index":820,"title":{},"name":{},"text":{"8":{}},"component":{}}],["go",{"_index":274,"title":{},"name":{},"text":{"3":{},"4":{},"17":{},"20":{},"24":{},"25":{}},"component":{}}],["good_digit1",{"_index":985,"title":{},"name":{},"text":{"9":{}},"component":{}}],["good_digit2",{"_index":986,"title":{},"name":{},"text":{"9":{}},"component":{}}],["goosey",{"_index":64,"title":{},"name":{},"text":{"1":{}},"component":{}}],["gracefulli",{"_index":76,"title":{},"name":{},"text":{"1":{}},"component":{}}],["graph",{"_index":1249,"title":{},"name":{},"text":{"13":{},"24":{},"25":{}},"component":{}}],["graviti",{"_index":1862,"title":{},"name":{},"text":{"18":{}},"component":{}}],["greater",{"_index":220,"title":{},"name":{},"text":{"2":{},"12":{}},"component":{}}],["grid",{"_index":484,"title":{},"name":{},"text":{"5":{},"16":{},"23":{},"24":{}},"component":{}}],["grid).ok",{"_index":1595,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grid.apply_step(step.borrow",{"_index":2644,"title":{},"name":{},"text":{"23":{}},"component":{}}],["grid.dim",{"_index":1602,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grid.insert(x",{"_index":545,"title":{},"name":{},"text":{"5":{}},"component":{}}],["grid.len",{"_index":1592,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grid.n_on",{"_index":2645,"title":{},"name":{},"text":{"23":{}},"component":{}}],["grid.push(c.to_digit(10",{"_index":1591,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grid::from_shape_simple_fn((n_row",{"_index":1611,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grid::new_unbound",{"_index":2646,"title":{},"name":{},"text":{"23":{}},"component":{}}],["grid::new_with_size(50",{"_index":2643,"title":{},"name":{},"text":{"23":{}},"component":{}}],["grid[(inner_r",{"_index":1648,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grid’",{"_index":1548,"title":{},"name":{},"text":{"16":{}},"component":{}}],["grouped_by_n_on",{"_index":953,"title":{},"name":{},"text":{"9":{}},"component":{}}],["grouped_by_n_on[&gd.n_on",{"_index":962,"title":{},"name":{},"text":{"9":{}},"component":{}}],["grow",{"_index":2365,"title":{},"name":{},"text":{"21":{}},"component":{}}],["grown_mat",{"_index":2379,"title":{},"name":{},"text":{"21":{}},"component":{}}],["grown_mat[[r",{"_index":2395,"title":{},"name":{},"text":{"21":{}},"component":{}}],["gt",{"_index":1813,"title":{},"name":{},"text":{"17":{}},"component":{}}],["guarante",{"_index":444,"title":{},"name":{},"text":{"4":{}},"component":{}}],["guess",{"_index":1481,"title":{},"name":{},"text":{"15":{}},"component":{}}],["guesswork",{"_index":1498,"title":{},"name":{},"text":{"15":{}},"component":{}}],["h",{"_index":279,"title":{},"name":{},"text":{"3":{},"24":{}},"component":{}}],["hack",{"_index":1763,"title":{},"name":{},"text":{"17":{}},"component":{}}],["half",{"_index":766,"title":{},"name":{},"text":{"8":{},"15":{},"20":{}},"component":{}}],["hallway",{"_index":2665,"title":{},"name":{},"text":{"24":{}},"component":{}}],["hallway_row",{"_index":2756,"title":{},"name":{},"text":{"24":{}},"component":{}}],["hallway_row..curr_row",{"_index":2799,"title":{},"name":{},"text":{"24":{}},"component":{}}],["halv",{"_index":1480,"title":{},"name":{},"text":{"15":{}},"component":{}}],["hand",{"_index":2247,"title":{},"name":{},"text":{"20":{},"24":{}},"component":{}}],["handl",{"_index":45,"title":{},"name":{},"text":{"1":{},"13":{}},"component":{}}],["handle_entry(&mut",{"_index":533,"title":{},"name":{},"text":{"5":{}},"component":{}}],["happen",{"_index":445,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["hard",{"_index":1670,"title":{},"name":{},"text":{"17":{},"18":{}},"component":{}}],["has_visited_a_small_cave_twic",{"_index":1312,"title":{},"name":{},"text":{"13":{}},"component":{}}],["has_won",{"_index":528,"title":{},"name":{},"text":{"5":{}},"component":{}}],["has_won(&self",{"_index":552,"title":{},"name":{},"text":{"5":{}},"component":{}}],["hash",{"_index":618,"title":{},"name":{},"text":{"6":{},"24":{}},"component":{}}],["hashbrown::hash_map::defaulthashbuild",{"_index":2680,"title":{},"name":{},"text":{"24":{}},"component":{}}],["hasher",{"_index":1571,"title":{},"name":{},"text":{"16":{}},"component":{}}],["hashmap",{"_index":1564,"title":{},"name":{},"text":{"16":{}},"component":{}}],["hasn't",{"_index":1770,"title":{},"name":{},"text":{"17":{}},"component":{}}],["have",{"_index":883,"title":{},"name":{},"text":{"9":{}},"component":{}}],["haven’t",{"_index":493,"title":{},"name":{},"text":{"5":{}},"component":{}}],["head",{"_index":1683,"title":{},"name":{},"text":{"17":{}},"component":{}}],["header_length",{"_index":1725,"title":{},"name":{},"text":{"17":{}},"component":{}}],["heap",{"_index":2677,"title":{},"name":{},"text":{"24":{}},"component":{}}],["heavi",{"_index":2177,"title":{},"name":{},"text":{"20":{}},"component":{}}],["height",{"_index":1084,"title":{},"name":{},"text":{"10":{},"12":{},"18":{},"24":{},"26":{}},"component":{}}],["heightmap",{"_index":1079,"title":{},"name":{},"text":{"10":{}},"component":{}}],["heightmap::from_str(input).unwrap",{"_index":1095,"title":{},"name":{},"text":{"10":{}},"component":{}}],["help",{"_index":610,"title":{},"name":{},"text":{"6":{},"18":{}},"component":{}}],["here",{"_index":25,"title":{},"name":{},"text":{"1":{},"3":{},"10":{},"14":{},"17":{},"19":{},"20":{}},"component":{}}],["hex",{"_index":1662,"title":{},"name":{},"text":{"17":{}},"component":{}}],["high",{"_index":701,"title":{},"name":{},"text":{"7":{}},"component":{}}],["hipod_locs_map",{"_index":2741,"title":{},"name":{},"text":{"24":{}},"component":{}}],["hit",{"_index":499,"title":{},"name":{},"text":{"5":{},"18":{},"25":{}},"component":{}}],["hm",{"_index":1094,"title":{},"name":{},"text":{"10":{}},"component":{}}],["hm.arr[idx",{"_index":1113,"title":{},"name":{},"text":{"10":{}},"component":{}}],["hm.basin_s",{"_index":1136,"title":{},"name":{},"text":{"10":{}},"component":{}}],["hm.idxs_where_lower_than_neighbor",{"_index":1111,"title":{},"name":{},"text":{"10":{}},"component":{}}],["hold",{"_index":860,"title":{},"name":{},"text":{"9":{}},"component":{}}],["holi",{"_index":1838,"title":{},"name":{},"text":{"18":{}},"component":{}}],["hook",{"_index":836,"title":{},"name":{},"text":{"9":{}},"component":{}}],["horizont",{"_index":650,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["hv_counter",{"_index":695,"title":{},"name":{},"text":{"6":{}},"component":{}}],["hydrotherm",{"_index":142,"title":{"6":{}},"name":{},"text":{"1":{}},"component":{}}],["i+1",{"_index":2003,"title":{},"name":{},"text":{"19":{}},"component":{}}],["i.",{"_index":242,"title":{},"name":{},"text":{"2":{},"5":{},"8":{},"11":{},"14":{},"17":{},"20":{}},"component":{}}],["i2",{"_index":2018,"title":{},"name":{},"text":{"19":{}},"component":{}}],["i32",{"_index":280,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"20":{},"23":{},"25":{}},"component":{}}],["i64",{"_index":1706,"title":{},"name":{},"text":{"17":{},"18":{}},"component":{}}],["i64::from(match",{"_index":1816,"title":{},"name":{},"text":{"17":{}},"component":{}}],["i64::try_from(to_big_decimal(bin_bits)).unwrap",{"_index":1752,"title":{},"name":{},"text":{"17":{}},"component":{}}],["idea",{"_index":380,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ident",{"_index":965,"title":{},"name":{},"text":{"9":{},"20":{},"21":{}},"component":{}}],["identity(&self",{"_index":1806,"title":{},"name":{},"text":{"17":{}},"component":{}}],["idod",{"_index":1040,"title":{},"name":{},"text":{"9":{}},"component":{}}],["idx",{"_index":1099,"title":{},"name":{},"text":{"10":{},"12":{},"19":{}},"component":{}}],["idx_pair",{"_index":1104,"title":{},"name":{},"text":{"10":{}},"component":{}}],["idxs.push([r",{"_index":1109,"title":{},"name":{},"text":{"10":{}},"component":{}}],["ignor",{"_index":2155,"title":{},"name":{},"text":{"20":{}},"component":{}}],["im",{"_index":2413,"title":{},"name":{},"text":{"21":{}},"component":{}}],["im.mat.map(|&bit",{"_index":2415,"title":{},"name":{},"text":{"21":{}},"component":{}}],["im.tick_n_times(2",{"_index":2414,"title":{},"name":{},"text":{"21":{}},"component":{}}],["im.tick_n_times(50",{"_index":2418,"title":{},"name":{},"text":{"21":{}},"component":{}}],["im1",{"_index":2402,"title":{},"name":{},"text":{"21":{}},"component":{}}],["im1.clon",{"_index":2405,"title":{},"name":{},"text":{"21":{}},"component":{}}],["im2",{"_index":2404,"title":{},"name":{},"text":{"21":{}},"component":{}}],["imag",{"_index":2367,"title":{},"name":{},"text":{"21":{}},"component":{}}],["image::from_str(input).unwrap",{"_index":2403,"title":{},"name":{},"text":{"21":{}},"component":{}}],["immedi",{"_index":396,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{}}],["impl",{"_index":281,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["implement",{"_index":514,"title":{},"name":{},"text":{"5":{},"7":{},"16":{},"17":{},"18":{},"25":{}},"component":{}}],["implicitli",{"_index":50,"title":{},"name":{},"text":{"1":{}},"component":{}}],["import",{"_index":1864,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{}}],["imposs",{"_index":1954,"title":{},"name":{},"text":{"18":{}},"component":{}}],["improv",{"_index":2429,"title":{},"name":{},"text":{"22":{}},"component":{}}],["in_digit",{"_index":1035,"title":{},"name":{},"text":{"9":{}},"component":{}}],["in_out",{"_index":1033,"title":{},"name":{},"text":{"9":{}},"component":{}}],["in_out_lin",{"_index":1045,"title":{},"name":{},"text":{"9":{}},"component":{}}],["in_reg",{"_index":2847,"title":{},"name":{},"text":{"25":{}},"component":{}}],["includ",{"_index":1332,"title":{},"name":{},"text":{"13":{},"18":{}},"component":{}}],["include_str!(\"input.txt",{"_index":647,"title":{},"name":{},"text":{"6":{}},"component":{}}],["inclus",{"_index":613,"title":{},"name":{},"text":{"6":{},"7":{},"10":{}},"component":{}}],["incom",{"_index":238,"title":{},"name":{},"text":{"2":{}},"component":{}}],["incomplet",{"_index":1150,"title":{},"name":{},"text":{"11":{}},"component":{}}],["incomplete(vec",{"_index":1163,"title":{},"name":{},"text":{"11":{}},"component":{}}],["incorrectli",{"_index":835,"title":{},"name":{},"text":{"9":{}},"component":{}}],["increment",{"_index":1701,"title":{},"name":{},"text":{"17":{},"19":{}},"component":{}}],["index",{"_index":6,"title":{},"name":{"1":{}},"text":{"4":{},"15":{},"19":{},"20":{},"21":{},"24":{},"25":{}},"component":{}}],["index(&self",{"_index":2223,"title":{},"name":{},"text":{"20":{},"24":{},"25":{}},"component":{}}],["index_for(am",{"_index":2703,"title":{},"name":{},"text":{"24":{}},"component":{}}],["index_mut(&mut",{"_index":2712,"title":{},"name":{},"text":{"24":{},"25":{}},"component":{}}],["indexmut",{"_index":2834,"title":{},"name":{},"text":{"25":{}},"component":{}}],["indic",{"_index":502,"title":{},"name":{},"text":{"5":{},"19":{}},"component":{}}],["individu",{"_index":2640,"title":{},"name":{},"text":{"23":{}},"component":{}}],["infeas",{"_index":1447,"title":{},"name":{},"text":{"15":{},"22":{},"24":{},"25":{}},"component":{}}],["infinit",{"_index":1269,"title":{},"name":{},"text":{"13":{},"18":{},"21":{}},"component":{}}],["inform",{"_index":890,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ingest",{"_index":1275,"title":{},"name":{},"text":{"13":{}},"component":{}}],["initi",{"_index":422,"title":{},"name":{},"text":{"4":{},"7":{},"15":{},"16":{},"18":{},"24":{},"25":{}},"component":{}}],["initial_loc",{"_index":2744,"title":{},"name":{},"text":{"24":{}},"component":{}}],["initial_st",{"_index":2761,"title":{},"name":{},"text":{"24":{}},"component":{}}],["inner",{"_index":1505,"title":{},"name":{},"text":{"15":{}},"component":{}}],["inner_c",{"_index":1646,"title":{},"name":{},"text":{"16":{}},"component":{}}],["inner_r",{"_index":1644,"title":{},"name":{},"text":{"16":{}},"component":{}}],["inordin",{"_index":1559,"title":{},"name":{},"text":{"16":{}},"component":{}}],["inp",{"_index":2866,"title":{},"name":{},"text":{"25":{}},"component":{}}],["input",{"_index":16,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["input.lin",{"_index":353,"title":{},"name":{},"text":{"4":{},"13":{},"14":{},"16":{}},"component":{}}],["input.lines().enumer",{"_index":2967,"title":{},"name":{},"text":{"26":{}},"component":{}}],["input.lines().map(|lin",{"_index":254,"title":{},"name":{},"text":{"2":{}},"component":{}}],["input/output",{"_index":33,"title":{},"name":{},"text":{"1":{}},"component":{}}],["insert",{"_index":1439,"title":{},"name":{},"text":{"15":{}},"component":{}}],["insert(digit",{"_index":958,"title":{},"name":{},"text":{"9":{}},"component":{}}],["insid",{"_index":2660,"title":{},"name":{},"text":{"24":{}},"component":{}}],["instanc",{"_index":438,"title":{},"name":{},"text":{"4":{},"9":{},"18":{},"23":{},"25":{}},"component":{}}],["instantiatedburrow",{"_index":2716,"title":{},"name":{},"text":{"24":{}},"component":{}}],["instantiatedburrow::::from_str(include_str!(\"input_1.txt\")).unwrap",{"_index":2818,"title":{},"name":{},"text":{"24":{}},"component":{}}],["instantiatedburrow::::from_str(include_str!(\"input_2.txt\")).unwrap",{"_index":2820,"title":{},"name":{},"text":{"24":{}},"component":{}}],["instead",{"_index":381,"title":{},"name":{},"text":{"4":{},"16":{},"25":{}},"component":{}}],["instr",{"_index":2848,"title":{},"name":{},"text":{"25":{}},"component":{}}],["instr_str",{"_index":2865,"title":{},"name":{},"text":{"25":{}},"component":{}}],["instrblock",{"_index":2846,"title":{},"name":{},"text":{"25":{}},"component":{}}],["instruct",{"_index":2830,"title":{},"name":{},"text":{"25":{}},"component":{}}],["int",{"_index":704,"title":{},"name":{},"text":{"7":{}},"component":{}}],["integ",{"_index":519,"title":{},"name":{},"text":{"5":{},"6":{},"7":{},"8":{},"15":{},"18":{},"23":{},"24":{},"25":{}},"component":{}}],["integr",{"_index":1962,"title":{},"name":{},"text":{"18":{}},"component":{}}],["interchang",{"_index":742,"title":{},"name":{},"text":{"8":{}},"component":{}}],["interest",{"_index":513,"title":{},"name":{},"text":{"5":{},"9":{},"12":{},"14":{},"26":{}},"component":{}}],["interesting",{"_index":1210,"title":{},"name":{},"text":{"12":{}},"component":{}}],["interfac",{"_index":1804,"title":{},"name":{},"text":{"17":{}},"component":{}}],["interior",{"_index":232,"title":{},"name":{},"text":{"2":{},"21":{}},"component":{}}],["intersect",{"_index":886,"title":{},"name":{},"text":{"9":{},"20":{},"23":{}},"component":{}}],["intersection(&self",{"_index":2538,"title":{},"name":{},"text":{"23":{}},"component":{}}],["intersection(&transformed_other.beacon",{"_index":2294,"title":{},"name":{},"text":{"20":{}},"component":{}}],["intersection.x_rang",{"_index":2558,"title":{},"name":{},"text":{"23":{}},"component":{}}],["intersection.y_rang",{"_index":2560,"title":{},"name":{},"text":{"23":{}},"component":{}}],["intersection.z_rang",{"_index":2562,"title":{},"name":{},"text":{"23":{}},"component":{}}],["intersection_span",{"_index":2545,"title":{},"name":{},"text":{"23":{}},"component":{}}],["intersection_span[0",{"_index":2548,"title":{},"name":{},"text":{"23":{}},"component":{}}],["intersection_span[1",{"_index":2552,"title":{},"name":{},"text":{"23":{}},"component":{}}],["into_it",{"_index":469,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"15":{},"23":{}},"component":{}}],["into_shape((n_col",{"_index":411,"title":{},"name":{},"text":{"4":{}},"component":{}}],["intoiter",{"_index":1381,"title":{},"name":{},"text":{"14":{}},"component":{}}],["intoiterator>(lin",{"_index":2107,"title":{},"name":{},"text":{"19":{}},"component":{}}],["involv",{"_index":1442,"title":{},"name":{},"text":{"15":{}},"component":{}}],["is_don",{"_index":2748,"title":{},"name":{},"text":{"24":{}},"component":{}}],["is_empty(&self",{"_index":1719,"title":{},"name":{},"text":{"17":{}},"component":{}}],["is_lower_than_neighbors(&self",{"_index":1098,"title":{},"name":{},"text":{"10":{}},"component":{}}],["is_on",{"_index":118,"title":{},"name":{},"text":{"1":{}},"component":{}}],["is_p0s_turn",{"_index":2473,"title":{},"name":{},"text":{"22":{}},"component":{}}],["is_smal",{"_index":1292,"title":{},"name":{},"text":{"13":{}},"component":{}}],["is_small_cav",{"_index":1318,"title":{},"name":{},"text":{"13":{}},"component":{}}],["isn’t",{"_index":270,"title":{},"name":{},"text":{"3":{},"11":{},"13":{},"17":{},"24":{}},"component":{}}],["it'",{"_index":1981,"title":{},"name":{},"text":{"18":{},"20":{},"25":{}},"component":{}}],["iter",{"_index":114,"title":{},"name":{},"text":{"1":{},"3":{},"4":{},"6":{},"8":{},"9":{},"11":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"22":{},"23":{},"24":{}},"component":{}}],["iter_item",{"_index":2769,"title":{},"name":{},"text":{"24":{}},"component":{}}],["iter_items(&self",{"_index":2707,"title":{},"name":{},"text":{"24":{}},"component":{}}],["itself",{"_index":812,"title":{},"name":{},"text":{"8":{}},"component":{}}],["it’",{"_index":662,"title":{},"name":{},"text":{"6":{},"8":{},"14":{},"15":{},"18":{},"22":{}},"component":{}}],["j",{"_index":2205,"title":{},"name":{},"text":{"20":{},"23":{}},"component":{}}],["jigsaw",{"_index":2143,"title":{},"name":{},"text":{"20":{}},"component":{}}],["join",{"_index":2960,"title":{},"name":{},"text":{"25":{}},"component":{}}],["k",{"_index":698,"title":{},"name":{},"text":{"6":{},"8":{},"9":{},"15":{},"16":{},"25":{}},"component":{}}],["k).n_on",{"_index":1025,"title":{},"name":{},"text":{"9":{}},"component":{}}],["k1",{"_index":1971,"title":{},"name":{},"text":{"18":{}},"component":{}}],["k2",{"_index":1974,"title":{},"name":{},"text":{"18":{}},"component":{}}],["k=1nk=n(n+1)2\\sum_{k=1}^n",{"_index":790,"title":{},"name":{},"text":{"8":{}},"component":{}}],["k=2k=2k=2",{"_index":2409,"title":{},"name":{},"text":{"21":{}},"component":{}}],["k=50k=50k=50",{"_index":2410,"title":{},"name":{},"text":{"21":{}},"component":{}}],["k=5k=5k=5",{"_index":439,"title":{},"name":{},"text":{"4":{}},"component":{}}],["keep",{"_index":230,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"9":{},"15":{},"24":{},"25":{}},"component":{}}],["key",{"_index":709,"title":{},"name":{},"text":{"7":{},"9":{},"15":{}},"component":{}}],["kind",{"_index":1290,"title":{},"name":{},"text":{"13":{},"17":{},"20":{},"24":{}},"component":{}}],["kind_numb",{"_index":1736,"title":{},"name":{},"text":{"17":{}},"component":{}}],["kkk",{"_index":379,"title":{},"name":{},"text":{"4":{},"6":{},"21":{},"23":{}},"component":{}}],["kkkth",{"_index":376,"title":{},"name":{},"text":{"4":{},"6":{}},"component":{}}],["know",{"_index":863,"title":{},"name":{},"text":{"9":{},"11":{},"21":{},"25":{}},"component":{}}],["knowledg",{"_index":748,"title":{},"name":{},"text":{"8":{},"9":{}},"component":{}}],["known",{"_index":808,"title":{},"name":{},"text":{"8":{}},"component":{}}],["l1l_1l1",{"_index":763,"title":{},"name":{},"text":{"8":{}},"component":{}}],["l2l_2l2",{"_index":806,"title":{},"name":{},"text":{"8":{}},"component":{}}],["l_elem",{"_index":2012,"title":{},"name":{},"text":{"19":{}},"component":{}}],["l_elem.depth",{"_index":2024,"title":{},"name":{},"text":{"19":{}},"component":{}}],["l_elem.valu",{"_index":2027,"title":{},"name":{},"text":{"19":{}},"component":{}}],["l_idx",{"_index":2011,"title":{},"name":{},"text":{"19":{}},"component":{}}],["label",{"_index":840,"title":{},"name":{},"text":{"9":{}},"component":{}}],["land",{"_index":1849,"title":{},"name":{},"text":{"18":{}},"component":{}}],["languag",{"_index":11,"title":{},"name":{},"text":{"1":{}},"component":{}}],["lanternfish",{"_index":145,"title":{"7":{}},"name":{},"text":{"1":{}},"component":{}}],["larg",{"_index":1490,"title":{},"name":{},"text":{"15":{},"18":{},"21":{}},"component":{}}],["larger",{"_index":1560,"title":{},"name":{},"text":{"16":{},"20":{},"23":{}},"component":{}}],["largest",{"_index":2909,"title":{},"name":{},"text":{"25":{}},"component":{}}],["last",{"_index":591,"title":{},"name":{},"text":{"5":{},"15":{},"17":{},"24":{},"25":{}},"component":{}}],["later",{"_index":1765,"title":{},"name":{},"text":{"17":{}},"component":{}}],["latter",{"_index":1585,"title":{},"name":{},"text":{"16":{}},"component":{}}],["layer",{"_index":2420,"title":{},"name":{},"text":{"22":{}},"component":{}}],["lazi",{"_index":2679,"title":{},"name":{},"text":{"24":{}},"component":{}}],["ldot",{"_index":2173,"title":{},"name":{},"text":{"20":{}},"component":{}}],["le",{"_index":1911,"title":{},"name":{},"text":{"18":{}},"component":{}}],["lead",{"_index":815,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{}}],["learn",{"_index":204,"title":{},"name":{},"text":{"1":{}},"component":{}}],["leav",{"_index":775,"title":{},"name":{},"text":{"8":{}},"component":{}}],["led",{"_index":2889,"title":{},"name":{},"text":{"25":{}},"component":{}}],["left",{"_index":946,"title":{},"name":{},"text":{"9":{},"11":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"25":{}},"component":{}}],["left.magnitud",{"_index":2087,"title":{},"name":{},"text":{"19":{}},"component":{}}],["leftmost",{"_index":431,"title":{},"name":{},"text":{"4":{}},"component":{}}],["len",{"_index":828,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["length",{"_index":224,"title":{},"name":{},"text":{"2":{},"6":{},"9":{},"15":{},"17":{},"22":{}},"component":{}}],["length_typ",{"_index":1756,"title":{},"name":{},"text":{"17":{}},"component":{}}],["less",{"_index":1676,"title":{},"name":{},"text":{"17":{}},"component":{}}],["letter",{"_index":1413,"title":{},"name":{},"text":{"14":{}},"component":{}}],["level",{"_index":702,"title":{},"name":{},"text":{"7":{},"17":{},"19":{}},"component":{}}],["lib.r",{"_index":105,"title":{},"name":{},"text":{"1":{}},"component":{}}],["lie",{"_index":1354,"title":{},"name":{},"text":{"14":{}},"component":{}}],["lift",{"_index":2178,"title":{},"name":{},"text":{"20":{}},"component":{}}],["light",{"_index":862,"title":{},"name":{},"text":{"9":{}},"component":{}}],["limit",{"_index":1267,"title":{},"name":{},"text":{"13":{}},"component":{}}],["line",{"_index":352,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["line.byt",{"_index":362,"title":{},"name":{},"text":{"4":{}},"component":{}}],["line.char",{"_index":1593,"title":{},"name":{},"text":{"16":{}},"component":{}}],["line.chars().count",{"_index":2968,"title":{},"name":{},"text":{"26":{}},"component":{}}],["line.chars().enumer",{"_index":2723,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["line.is_empti",{"_index":563,"title":{},"name":{},"text":{"5":{},"9":{},"20":{}},"component":{}}],["line.parse::().unwrap",{"_index":255,"title":{},"name":{},"text":{"2":{}},"component":{}}],["line.split",{"_index":1034,"title":{},"name":{},"text":{"9":{},"13":{},"14":{},"15":{},"20":{},"22":{}},"component":{}}],["line.split_ascii_whitespac",{"_index":2609,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["line.split_whitespac",{"_index":301,"title":{},"name":{},"text":{"3":{}},"component":{}}],["line.split_whitespace().map(|",{"_index":569,"title":{},"name":{},"text":{"5":{}},"component":{}}],["line.starts_with",{"_index":2322,"title":{},"name":{},"text":{"20":{}},"component":{}}],["line.trim",{"_index":1032,"title":{},"name":{},"text":{"9":{},"10":{},"11":{},"12":{}},"component":{}}],["line.trim().char",{"_index":2097,"title":{},"name":{},"text":{"19":{}},"component":{}}],["line.trim().chars().map(|c",{"_index":2370,"title":{},"name":{},"text":{"21":{}},"component":{}}],["line.trim().is_empti",{"_index":1394,"title":{},"name":{},"text":{"14":{}},"component":{}}],["line_length",{"_index":358,"title":{},"name":{},"text":{"4":{}},"component":{}}],["line_r",{"_index":627,"title":{},"name":{},"text":{"6":{}},"component":{}}],["line_re.captures(lin",{"_index":631,"title":{},"name":{},"text":{"6":{}},"component":{}}],["lines.into_it",{"_index":2108,"title":{},"name":{},"text":{"19":{}},"component":{}}],["lines.map(fold::::from_str).collect",{"_index":1399,"title":{},"name":{},"text":{"14":{}},"component":{}}],["lines.next",{"_index":357,"title":{},"name":{},"text":{"4":{},"15":{},"16":{}},"component":{}}],["lines.next()?.to_own",{"_index":1501,"title":{},"name":{},"text":{"15":{}},"component":{}}],["line’",{"_index":657,"title":{},"name":{},"text":{"6":{}},"component":{}}],["link",{"_index":2893,"title":{},"name":{},"text":{"25":{}},"component":{}}],["list",{"_index":423,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"9":{},"13":{},"19":{},"23":{},"25":{}},"component":{}}],["lit",{"_index":851,"title":{},"name":{},"text":{"9":{}},"component":{}}],["liter",{"_index":1785,"title":{},"name":{},"text":{"17":{}},"component":{}}],["littl",{"_index":20,"title":{},"name":{},"text":{"1":{}},"component":{}}],["loc",{"_index":2738,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["local",{"_index":818,"title":{},"name":{},"text":{"8":{},"10":{},"19":{}},"component":{}}],["locs[am",{"_index":2742,"title":{},"name":{},"text":{"24":{}},"component":{}}],["logic",{"_index":197,"title":{"25":{}},"name":{},"text":{"1":{},"9":{}},"component":{}}],["long",{"_index":393,"title":{},"name":{},"text":{"4":{},"17":{},"24":{}},"component":{}}],["longer",{"_index":803,"title":{},"name":{},"text":{"8":{},"21":{}},"component":{}}],["look",{"_index":208,"title":{},"name":{},"text":{"1":{},"8":{},"9":{},"17":{},"18":{},"20":{},"21":{},"23":{},"25":{}},"component":{}}],["loop",{"_index":969,"title":{},"name":{},"text":{"9":{},"12":{},"13":{},"16":{},"19":{},"22":{},"23":{}},"component":{}}],["loosey",{"_index":63,"title":{},"name":{},"text":{"1":{}},"component":{}}],["lord",{"_index":1658,"title":{},"name":{},"text":{"17":{}},"component":{}}],["loser",{"_index":2466,"title":{},"name":{},"text":{"22":{}},"component":{}}],["loser.scor",{"_index":2472,"title":{},"name":{},"text":{"22":{}},"component":{}}],["lot",{"_index":202,"title":{},"name":{},"text":{"1":{},"17":{}},"component":{}}],["low",{"_index":707,"title":{},"name":{},"text":{"7":{}},"component":{}}],["lower",{"_index":2541,"title":{},"name":{},"text":{"23":{}},"component":{}}],["lpl_plp",{"_index":752,"title":{},"name":{},"text":{"8":{}},"component":{}}],["lt",{"_index":1814,"title":{},"name":{},"text":{"17":{}},"component":{}}],["m",{"_index":1963,"title":{},"name":{},"text":{"18":{}},"component":{}}],["m.as_str().parse().ok",{"_index":1895,"title":{},"name":{},"text":{"18":{}},"component":{}}],["m.len",{"_index":1018,"title":{},"name":{},"text":{"9":{}},"component":{}}],["m^2",{"_index":1964,"title":{},"name":{},"text":{"18":{}},"component":{}}],["made",{"_index":864,"title":{},"name":{},"text":{"9":{},"16":{}},"component":{}}],["mag1",{"_index":2137,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mag2",{"_index":2139,"title":{},"name":{},"text":{"19":{}},"component":{}}],["magnitud",{"_index":2082,"title":{},"name":{},"text":{"19":{}},"component":{}}],["magnitude(&self",{"_index":2084,"title":{},"name":{},"text":{"19":{}},"component":{}}],["main",{"_index":1677,"title":{},"name":{},"text":{"17":{}},"component":{}}],["maintain",{"_index":1279,"title":{},"name":{},"text":{"13":{},"15":{},"16":{},"17":{},"19":{}},"component":{}}],["major",{"_index":1638,"title":{},"name":{},"text":{"16":{}},"component":{}}],["make",{"_index":19,"title":{},"name":{},"text":{"1":{},"9":{},"11":{},"15":{},"19":{},"24":{}},"component":{}}],["manag",{"_index":1205,"title":{},"name":{},"text":{"12":{}},"component":{}}],["manhattan",{"_index":2336,"title":{},"name":{},"text":{"20":{}},"component":{}}],["manhattan_dist(&self",{"_index":2260,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mani",{"_index":648,"title":{},"name":{},"text":{"6":{},"8":{},"13":{},"18":{},"22":{},"24":{}},"component":{}}],["manifest",{"_index":2041,"title":{},"name":{},"text":{"19":{}},"component":{}}],["manipul",{"_index":1245,"title":{},"name":{},"text":{"13":{},"16":{},"19":{},"21":{},"26":{}},"component":{}}],["manner",{"_index":834,"title":{},"name":{},"text":{"9":{},"18":{},"21":{}},"component":{}}],["map",{"_index":186,"title":{"21":{}},"name":{},"text":{"1":{},"5":{},"6":{},"7":{},"9":{},"13":{},"15":{},"24":{},"25":{}},"component":{}}],["map(digit::from_str",{"_index":1030,"title":{},"name":{},"text":{"9":{}},"component":{}}],["map(player::new",{"_index":2441,"title":{},"name":{},"text":{"22":{}},"component":{}}],["map(rebootstep::from_lin",{"_index":2636,"title":{},"name":{},"text":{"23":{}},"component":{}}],["map(snailnumowned::from_lin",{"_index":2132,"title":{},"name":{},"text":{"19":{}},"component":{}}],["map(token::from_char",{"_index":1183,"title":{},"name":{},"text":{"11":{}},"component":{}}],["map(|",{"_index":560,"title":{},"name":{},"text":{"5":{},"7":{}},"component":{}}],["map(|&elem",{"_index":2046,"title":{},"name":{},"text":{"19":{}},"component":{}}],["map(|&n",{"_index":824,"title":{},"name":{},"text":{"8":{}},"component":{}}],["map(|(am",{"_index":2773,"title":{},"name":{},"text":{"24":{}},"component":{}}],["map(|(in_d",{"_index":1047,"title":{},"name":{},"text":{"9":{}},"component":{}}],["map(|(k",{"_index":1020,"title":{},"name":{},"text":{"9":{},"15":{}},"component":{}}],["map(|(pow10",{"_index":1059,"title":{},"name":{},"text":{"9":{}},"component":{}}],["map(|(pow2",{"_index":117,"title":{},"name":{},"text":{"1":{}},"component":{}}],["map(|c",{"_index":1088,"title":{},"name":{},"text":{"10":{},"12":{},"21":{}},"component":{}}],["map(|count",{"_index":642,"title":{},"name":{},"text":{"6":{}},"component":{}}],["map(|d",{"_index":1042,"title":{},"name":{},"text":{"9":{}},"component":{}}],["map(|idx",{"_index":1112,"title":{},"name":{},"text":{"10":{}},"component":{}}],["map(|lin",{"_index":299,"title":{},"name":{},"text":{"3":{},"6":{},"11":{},"14":{},"22":{}},"component":{}}],["map(|n",{"_index":756,"title":{},"name":{},"text":{"8":{}},"component":{}}],["map(|traj",{"_index":1994,"title":{},"name":{},"text":{"18":{}},"component":{}}],["map(|v",{"_index":1054,"title":{},"name":{},"text":{"9":{},"11":{}},"component":{}}],["map::new",{"_index":541,"title":{},"name":{},"text":{"5":{},"6":{},"9":{},"13":{},"15":{},"24":{}},"component":{}}],["map_collect(|&candid",{"_index":468,"title":{},"name":{},"text":{"4":{}},"component":{}}],["map_collect(|n_o",{"_index":408,"title":{},"name":{},"text":{"4":{}},"component":{}}],["map_or(tru",{"_index":2783,"title":{},"name":{},"text":{"24":{}},"component":{}}],["mapentri",{"_index":949,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mapentry::occupied(mut",{"_index":994,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mapentry::vacant(v",{"_index":992,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mapping.insert((left",{"_index":1507,"title":{},"name":{},"text":{"15":{}},"component":{}}],["mappings.insert(gd",{"_index":963,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mappings.iter().enumer",{"_index":973,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mappings.iter().skip(i",{"_index":976,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mappings.len",{"_index":1016,"title":{},"name":{},"text":{"9":{}},"component":{}}],["mappings.values().all(|m",{"_index":1017,"title":{},"name":{},"text":{"9":{}},"component":{}}],["map’",{"_index":708,"title":{},"name":{},"text":{"7":{}},"component":{}}],["massiv",{"_index":2891,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mat",{"_index":369,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{}}],["mat.dim",{"_index":399,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mat.index_axis(axis(0",{"_index":472,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mat.index_axis(axis(1",{"_index":458,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mat.map(|x",{"_index":401,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mat_mul(&self",{"_index":2208,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mat_mul(mat_to_rotate_about_up",{"_index":2253,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mat_to_bring_face_to_up",{"_index":2241,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mat_to_rotate_about_up",{"_index":2249,"title":{},"name":{},"text":{"20":{}},"component":{}}],["match",{"_index":311,"title":{},"name":{},"text":{"3":{},"5":{},"9":{},"10":{},"11":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["matches!(n_col",{"_index":571,"title":{},"name":{},"text":{"5":{}},"component":{}}],["matches!(self",{"_index":1720,"title":{},"name":{},"text":{"17":{}},"component":{}}],["matches!(tiles[[row",{"_index":2735,"title":{},"name":{},"text":{"24":{}},"component":{}}],["math",{"_index":1899,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["mathemat",{"_index":1871,"title":{},"name":{},"text":{"18":{}},"component":{}}],["mathinstr",{"_index":2845,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mathop",{"_index":2840,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mathop::from_str(instr_str",{"_index":2871,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mathrm{abs}(v_\\mathrm{max})−abs(vmax",{"_index":1869,"title":{},"name":{},"text":{"18":{}},"component":{}}],["matrix",{"_index":1065,"title":{},"name":{},"text":{"10":{},"20":{}},"component":{}}],["matrix3",{"_index":2187,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3([i32",{"_index":2186,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3::from_cols(negi",{"_index":2252,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3::from_cols(negx",{"_index":2248,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3::from_cols(negz",{"_index":2244,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3::from_cols(posi",{"_index":2251,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3::from_cols(posx",{"_index":2245,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix3::from_cols(posz",{"_index":2243,"title":{},"name":{},"text":{"20":{}},"component":{}}],["matrix’",{"_index":1068,"title":{},"name":{},"text":{"10":{}},"component":{}}],["matter",{"_index":2160,"title":{},"name":{},"text":{"20":{}},"component":{}}],["max",{"_index":1552,"title":{},"name":{},"text":{"16":{},"17":{},"22":{}},"component":{}}],["max_col",{"_index":1604,"title":{},"name":{},"text":{"16":{}},"component":{}}],["max_count",{"_index":1539,"title":{},"name":{},"text":{"15":{}},"component":{}}],["max_dist",{"_index":1614,"title":{},"name":{},"text":{"16":{}},"component":{}}],["max_i",{"_index":1418,"title":{},"name":{},"text":{"14":{}},"component":{}}],["max_mag",{"_index":2130,"title":{},"name":{},"text":{"19":{}},"component":{}}],["max_mag.max(mag1).max(mag2",{"_index":2141,"title":{},"name":{},"text":{"19":{}},"component":{}}],["max_manh_dist",{"_index":2341,"title":{},"name":{},"text":{"20":{}},"component":{}}],["max_manh_dist.max(diff.manhattan_dist",{"_index":2351,"title":{},"name":{},"text":{"20":{}},"component":{}}],["max_row",{"_index":1603,"title":{},"name":{},"text":{"16":{}},"component":{}}],["max_sum",{"_index":2482,"title":{},"name":{},"text":{"22":{}},"component":{}}],["max_x",{"_index":1417,"title":{},"name":{},"text":{"14":{}},"component":{}}],["maxim",{"_index":1069,"title":{},"name":{},"text":{"10":{},"23":{}},"component":{}}],["maximum",{"_index":1990,"title":{},"name":{},"text":{"18":{},"19":{},"20":{}},"component":{}}],["mayb",{"_index":2000,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mean",{"_index":503,"title":{},"name":{},"text":{"5":{},"8":{},"9":{},"12":{},"19":{}},"component":{}}],["mean_rounded_down",{"_index":829,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mean_rounded_up",{"_index":831,"title":{},"name":{},"text":{"8":{}},"component":{}}],["measur",{"_index":740,"title":{},"name":{},"text":{"8":{}},"component":{}}],["median",{"_index":764,"title":{},"name":{},"text":{"8":{}},"component":{}}],["median)).sum",{"_index":786,"title":{},"name":{},"text":{"8":{}},"component":{}}],["memori",{"_index":1450,"title":{},"name":{},"text":{"15":{}},"component":{}}],["mere",{"_index":236,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"13":{},"20":{},"22":{}},"component":{}}],["merg",{"_index":2180,"title":{},"name":{},"text":{"20":{},"23":{}},"component":{}}],["merge_al",{"_index":2298,"title":{},"name":{},"text":{"20":{}},"component":{}}],["merge_result",{"_index":2317,"title":{},"name":{},"text":{"20":{}},"component":{}}],["merged_cuboid",{"_index":2574,"title":{},"name":{},"text":{"23":{}},"component":{}}],["merged_scann",{"_index":2311,"title":{},"name":{},"text":{"20":{}},"component":{}}],["merged_with(&self",{"_index":2272,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mesh",{"_index":2149,"title":{},"name":{},"text":{"20":{}},"component":{}}],["middl",{"_index":1471,"title":{},"name":{},"text":{"15":{},"23":{},"25":{}},"component":{}}],["migrat",{"_index":1346,"title":{},"name":{},"text":{"14":{}},"component":{}}],["min",{"_index":1801,"title":{},"name":{},"text":{"17":{},"22":{}},"component":{}}],["min_col",{"_index":1601,"title":{},"name":{},"text":{"16":{}},"component":{}}],["min_count",{"_index":1540,"title":{},"name":{},"text":{"15":{}},"component":{}}],["min_row",{"_index":1600,"title":{},"name":{},"text":{"16":{}},"component":{}}],["minim",{"_index":739,"title":{},"name":{},"text":{"8":{},"16":{}},"component":{}}],["minima",{"_index":1067,"title":{},"name":{},"text":{"10":{}},"component":{}}],["minimum",{"_index":819,"title":{},"name":{},"text":{"8":{}},"component":{}}],["mismatch",{"_index":1146,"title":{},"name":{},"text":{"11":{}},"component":{}}],["mod",{"_index":2843,"title":{},"name":{},"text":{"25":{}},"component":{}}],["model",{"_index":908,"title":{},"name":{},"text":{"9":{},"15":{}},"component":{}}],["modif",{"_index":1589,"title":{},"name":{},"text":{"16":{},"24":{}},"component":{}}],["modifi",{"_index":703,"title":{},"name":{},"text":{"7":{},"16":{},"19":{}},"component":{}}],["monolith",{"_index":2363,"title":{},"name":{},"text":{"21":{}},"component":{}}],["moot",{"_index":1982,"title":{},"name":{},"text":{"18":{}},"component":{}}],["more",{"_index":797,"title":{},"name":{},"text":{"8":{},"9":{},"13":{},"16":{},"17":{},"18":{}},"component":{}}],["most_common_digit",{"_index":464,"title":{},"name":{},"text":{"4":{}},"component":{}}],["mostli",{"_index":317,"title":{},"name":{},"text":{"4":{}},"component":{}}],["move",{"_index":769,"title":{},"name":{},"text":{"8":{},"14":{},"22":{},"24":{}},"component":{}}],["move_dist",{"_index":2451,"title":{},"name":{},"text":{"22":{}},"component":{}}],["movement",{"_index":2648,"title":{},"name":{},"text":{"24":{}},"component":{}}],["mse",{"_index":805,"title":{},"name":{},"text":{"8":{}},"component":{}}],["much",{"_index":663,"title":{},"name":{},"text":{"6":{},"16":{},"17":{},"19":{}},"component":{}}],["mul",{"_index":2841,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mul_vec(&self",{"_index":2219,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mul_vec(point",{"_index":2254,"title":{},"name":{},"text":{"20":{}},"component":{}}],["mult",{"_index":1537,"title":{},"name":{},"text":{"15":{}},"component":{}}],["multipl",{"_index":2170,"title":{},"name":{},"text":{"20":{}},"component":{}}],["multipli",{"_index":1975,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["mut",{"_index":251,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["mutat",{"_index":496,"title":{},"name":{},"text":{"5":{}},"component":{}}],["my_cuboid",{"_index":2622,"title":{},"name":{},"text":{"23":{}},"component":{}}],["my_span[0",{"_index":2547,"title":{},"name":{},"text":{"23":{}},"component":{}}],["my_span[1",{"_index":2553,"title":{},"name":{},"text":{"23":{}},"component":{}}],["myself",{"_index":1877,"title":{},"name":{},"text":{"18":{}},"component":{}}],["n",{"_index":250,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"9":{},"12":{},"15":{},"16":{},"17":{},"18":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["n(n+1)2\\frac{n(n+1)}{2}2n(n+1",{"_index":799,"title":{},"name":{},"text":{"8":{}},"component":{}}],["n)*(m+n",{"_index":1967,"title":{},"name":{},"text":{"18":{}},"component":{}}],["n.parse().ok",{"_index":757,"title":{},"name":{},"text":{"8":{}},"component":{}}],["n2+nn^2+nn2+n",{"_index":794,"title":{},"name":{},"text":{"8":{}},"component":{}}],["n2n^2n2",{"_index":798,"title":{},"name":{},"text":{"8":{}},"component":{}}],["n2≥nn^2\\ge",{"_index":792,"title":{},"name":{},"text":{"8":{}},"component":{}}],["n=1n=1n=1",{"_index":227,"title":{},"name":{},"text":{"2":{}},"component":{}}],["n=3n=3n=3",{"_index":228,"title":{},"name":{},"text":{"2":{}},"component":{}}],["n^2",{"_index":1965,"title":{},"name":{},"text":{"18":{}},"component":{}}],["n_amphipod",{"_index":2675,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_amphipods_per_kind",{"_index":2701,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_bit",{"_index":1761,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n_bits_consum",{"_index":1744,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n_bits_for_length",{"_index":1755,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n_candidates_remain",{"_index":454,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n_chunk",{"_index":1747,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n_col",{"_index":331,"title":{},"name":{},"text":{"4":{},"5":{},"10":{},"12":{},"16":{},"21":{}},"component":{}}],["n_cols.unwrap",{"_index":566,"title":{},"name":{},"text":{"5":{}},"component":{}}],["n_digit",{"_index":2919,"title":{},"name":{},"text":{"25":{}},"component":{}}],["n_finish",{"_index":1309,"title":{},"name":{},"text":{"13":{}},"component":{}}],["n_flash",{"_index":1223,"title":{},"name":{},"text":{"12":{}},"component":{}}],["n_in_correct_sideroom_by_kind",{"_index":2775,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_in_correct_sideroom_by_kind[am.kind",{"_index":2792,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_increas",{"_index":259,"title":{},"name":{},"text":{"2":{}},"component":{}}],["n_kind",{"_index":2694,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_line",{"_index":365,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n_o",{"_index":410,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n_on",{"_index":912,"title":{},"name":{},"text":{"9":{}},"component":{}}],["n_on(&self",{"_index":2625,"title":{},"name":{},"text":{"23":{}},"component":{}}],["n_one",{"_index":400,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n_ones.map(|n",{"_index":404,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n_packet",{"_index":1758,"title":{},"name":{},"text":{"17":{}},"component":{}}],["n_pair",{"_index":1510,"title":{},"name":{},"text":{"15":{}},"component":{}}],["n_roll",{"_index":2455,"title":{},"name":{},"text":{"22":{}},"component":{}}],["n_rolls_per_turn",{"_index":2477,"title":{},"name":{},"text":{"22":{}},"component":{}}],["n_row",{"_index":330,"title":{},"name":{},"text":{"4":{},"5":{},"10":{},"12":{},"16":{},"21":{}},"component":{}}],["n_segment",{"_index":911,"title":{},"name":{},"text":{"9":{}},"component":{}}],["n_step",{"_index":2745,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_steps_to_hallway",{"_index":2808,"title":{},"name":{},"text":{"24":{}},"component":{}}],["n_timer",{"_index":714,"title":{},"name":{},"text":{"7":{}},"component":{}}],["n_visit",{"_index":1320,"title":{},"name":{},"text":{"13":{}},"component":{}}],["n_way",{"_index":2474,"title":{},"name":{},"text":{"22":{}},"component":{}}],["n_ways_to_get_her",{"_index":2495,"title":{},"name":{},"text":{"22":{}},"component":{}}],["n_ways_to_have_gotten_her",{"_index":2490,"title":{},"name":{},"text":{"22":{}},"component":{}}],["n_ways_to_roll_thi",{"_index":2494,"title":{},"name":{},"text":{"22":{}},"component":{}}],["n_z",{"_index":409,"title":{},"name":{},"text":{"4":{}},"component":{}}],["n_zero",{"_index":403,"title":{},"name":{},"text":{"4":{}},"component":{}}],["naiv",{"_index":745,"title":{},"name":{},"text":{"8":{},"24":{},"25":{}},"component":{}}],["name",{"_index":1265,"title":{},"name":{},"text":{"13":{}},"component":{}}],["name.chars().map(|c",{"_index":1293,"title":{},"name":{},"text":{"13":{}},"component":{}}],["narrow",{"_index":434,"title":{},"name":{},"text":{"4":{},"9":{}},"component":{}}],["natur",{"_index":810,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["nbits(us",{"_index":1717,"title":{},"name":{},"text":{"17":{}},"component":{}}],["ndarray::array2",{"_index":328,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ndarray::prelud",{"_index":350,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"16":{},"21":{},"24":{}},"component":{}}],["ndarray::zip::from(&candid",{"_index":466,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ndarray::zip::from(&n_on",{"_index":406,"title":{},"name":{},"text":{"4":{}},"component":{}}],["nearli",{"_index":2408,"title":{},"name":{},"text":{"21":{}},"component":{}}],["necessari",{"_index":2913,"title":{},"name":{},"text":{"25":{}},"component":{}}],["necessarili",{"_index":1863,"title":{},"name":{},"text":{"18":{},"21":{}},"component":{}}],["need",{"_index":392,"title":{},"name":{},"text":{"4":{},"5":{},"8":{},"9":{},"18":{},"20":{},"22":{},"23":{},"25":{}},"component":{}}],["needless",{"_index":2668,"title":{},"name":{},"text":{"24":{}},"component":{}}],["neg",{"_index":1556,"title":{},"name":{},"text":{"16":{}},"component":{}}],["negi",{"_index":2228,"title":{},"name":{},"text":{"20":{}},"component":{}}],["negx",{"_index":2226,"title":{},"name":{},"text":{"20":{}},"component":{}}],["negz",{"_index":2230,"title":{},"name":{},"text":{"20":{}},"component":{}}],["neighbor",{"_index":1102,"title":{},"name":{},"text":{"10":{},"16":{}},"component":{}}],["neighbor_idx",{"_index":1128,"title":{},"name":{},"text":{"10":{}},"component":{}}],["neighbor’",{"_index":1583,"title":{},"name":{},"text":{"16":{}},"component":{}}],["nest",{"_index":1998,"title":{},"name":{},"text":{"19":{}},"component":{}}],["net_cost_to_travel_her",{"_index":1620,"title":{},"name":{},"text":{"16":{}},"component":{}}],["net_cost_to_travel_to_nghbr_thru_her",{"_index":1619,"title":{},"name":{},"text":{"16":{}},"component":{}}],["net_travel_cost",{"_index":1610,"title":{},"name":{},"text":{"16":{}},"component":{}}],["net_travel_costs[(0",{"_index":1613,"title":{},"name":{},"text":{"16":{}},"component":{}}],["never",{"_index":99,"title":{},"name":{},"text":{"1":{},"17":{}},"component":{}}],["new",{"_index":243,"title":{},"name":{},"text":{"2":{},"4":{},"16":{},"17":{},"20":{},"25":{}},"component":{}}],["new(beacon",{"_index":2271,"title":{},"name":{},"text":{"20":{}},"component":{}}],["new(min",{"_index":2456,"title":{},"name":{},"text":{"22":{}},"component":{}}],["new(n_row",{"_index":529,"title":{},"name":{},"text":{"5":{}},"component":{}}],["new(nam",{"_index":1291,"title":{},"name":{},"text":{"13":{}},"component":{}}],["new(num",{"_index":537,"title":{},"name":{},"text":{"5":{}},"component":{}}],["new(po",{"_index":2443,"title":{},"name":{},"text":{"22":{}},"component":{}}],["new(seg",{"_index":913,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new(up_fac",{"_index":2237,"title":{},"name":{},"text":{"20":{}},"component":{}}],["new_col",{"_index":1606,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_cost",{"_index":1652,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_curr_z",{"_index":2944,"title":{},"name":{},"text":{"25":{}},"component":{}}],["new_curr_zs.extend(prev_zs.get(z).unwrap().iter().copi",{"_index":2946,"title":{},"name":{},"text":{"25":{}},"component":{}}],["new_down",{"_index":2980,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_downs.insert(*old_loc",{"_index":2984,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_downs.insert(new_loc",{"_index":2985,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_elem",{"_index":2036,"title":{},"name":{},"text":{"19":{}},"component":{}}],["new_elem.depth",{"_index":2039,"title":{},"name":{},"text":{"19":{}},"component":{}}],["new_garbl",{"_index":979,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_garbled.n_on",{"_index":982,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_garbled_key",{"_index":1007,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_garbled_keys.contains(&segment_union",{"_index":1013,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_garbled_keys.iter().enumer",{"_index":1009,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_garbled_keys.iter().skip(i",{"_index":1010,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_good_candid",{"_index":983,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_good_candidates.insert(candid",{"_index":990,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_grid",{"_index":1636,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_grid[(new_grid_r",{"_index":1655,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_grid_c",{"_index":1654,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_grid_r",{"_index":1653,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_i",{"_index":1378,"title":{},"name":{},"text":{"14":{}},"component":{}}],["new_l_valu",{"_index":2034,"title":{},"name":{},"text":{"19":{}},"component":{}}],["new_loc",{"_index":2793,"title":{},"name":{},"text":{"24":{},"26":{}},"component":{}}],["new_map",{"_index":970,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_mappings.entry(new_garbl",{"_index":991,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_mappings.keys().copied().collect",{"_index":1008,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_mappings.remove(k",{"_index":1015,"title":{},"name":{},"text":{"9":{}},"component":{}}],["new_mat",{"_index":2385,"title":{},"name":{},"text":{"21":{}},"component":{}}],["new_mat[[center_row",{"_index":2398,"title":{},"name":{},"text":{"21":{}},"component":{}}],["new_po",{"_index":2445,"title":{},"name":{},"text":{"22":{}},"component":{}}],["new_r_valu",{"_index":2035,"title":{},"name":{},"text":{"19":{}},"component":{}}],["new_right",{"_index":2972,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_rights.contains(&new_loc",{"_index":2983,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_rights.insert(*old_loc",{"_index":2978,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_rights.insert(new_loc",{"_index":2979,"title":{},"name":{},"text":{"26":{}},"component":{}}],["new_row",{"_index":1605,"title":{},"name":{},"text":{"16":{}},"component":{}}],["new_scann",{"_index":2313,"title":{},"name":{},"text":{"20":{}},"component":{}}],["new_stat",{"_index":2746,"title":{},"name":{},"text":{"24":{}},"component":{}}],["new_surround",{"_index":2375,"title":{},"name":{},"text":{"21":{}},"component":{}}],["new_total_st",{"_index":2810,"title":{},"name":{},"text":{"24":{}},"component":{}}],["new_total_state[am",{"_index":2811,"title":{},"name":{},"text":{"24":{}},"component":{}}],["new_unbound",{"_index":2614,"title":{},"name":{},"text":{"23":{}},"component":{}}],["new_with_size(n",{"_index":2613,"title":{},"name":{},"text":{"23":{}},"component":{}}],["new_x",{"_index":1374,"title":{},"name":{},"text":{"14":{}},"component":{}}],["newli",{"_index":1768,"title":{},"name":{},"text":{"17":{}},"component":{}}],["next",{"_index":210,"title":{},"name":{},"text":{"1":{},"5":{},"13":{},"16":{},"17":{},"20":{},"21":{},"22":{},"23":{},"25":{}},"component":{}}],["next_cav",{"_index":1313,"title":{},"name":{},"text":{"13":{}},"component":{}}],["next_cave.kind",{"_index":1319,"title":{},"name":{},"text":{"13":{}},"component":{}}],["next_cave.nam",{"_index":1315,"title":{},"name":{},"text":{"13":{}},"component":{}}],["next_digit_attempt",{"_index":2956,"title":{},"name":{},"text":{"25":{}},"component":{}}],["nghbr_coord",{"_index":1618,"title":{},"name":{},"text":{"16":{}},"component":{}}],["nghbr_idx",{"_index":1129,"title":{},"name":{},"text":{"10":{}},"component":{}}],["nn2≥n",{"_index":793,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nnn",{"_index":226,"title":{},"name":{},"text":{"2":{},"8":{}},"component":{}}],["node",{"_index":1247,"title":{},"name":{},"text":{"13":{},"16":{},"19":{}},"component":{}}],["node’",{"_index":1283,"title":{},"name":{},"text":{"13":{}},"component":{}}],["non",{"_index":2055,"title":{},"name":{},"text":{"19":{}},"component":{}}],["none",{"_index":294,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"9":{},"11":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["nonempti",{"_index":612,"title":{},"name":{},"text":{"6":{}},"component":{}}],["nonintersecting_cuboid",{"_index":2626,"title":{},"name":{},"text":{"23":{}},"component":{}}],["nonintersecting_cuboids.extend(piec",{"_index":2632,"title":{},"name":{},"text":{"23":{}},"component":{}}],["nonsens",{"_index":90,"title":{},"name":{},"text":{"1":{}},"component":{}}],["norm",{"_index":753,"title":{},"name":{},"text":{"8":{}},"component":{}}],["not(self",{"_index":932,"title":{},"name":{},"text":{"9":{}},"component":{}}],["not_yet_visited_idx",{"_index":1116,"title":{},"name":{},"text":{"10":{}},"component":{}}],["not_yet_visited_idxs.pop_first",{"_index":1121,"title":{},"name":{},"text":{"10":{}},"component":{}}],["not_yet_visited_idxs.remove(idx",{"_index":1133,"title":{},"name":{},"text":{"10":{}},"component":{}}],["notabl",{"_index":2042,"title":{},"name":{},"text":{"19":{},"21":{}},"component":{}}],["notat",{"_index":348,"title":{},"name":{},"text":{"4":{}},"component":{}}],["note",{"_index":1255,"title":{},"name":{},"text":{"13":{},"15":{},"18":{},"22":{},"23":{},"25":{}},"component":{}}],["noth",{"_index":1062,"title":{},"name":{},"text":{"10":{}},"component":{}}],["notion",{"_index":909,"title":{},"name":{},"text":{"9":{}},"component":{}}],["now",{"_index":1218,"title":{},"name":{},"text":{"12":{},"13":{},"15":{},"18":{},"23":{},"25":{}},"component":{}}],["npackets(us",{"_index":1718,"title":{},"name":{},"text":{"17":{}},"component":{}}],["nth_back(0",{"_index":2440,"title":{},"name":{},"text":{"22":{},"23":{}},"component":{}}],["num",{"_index":558,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"18":{},"19":{},"25":{}},"component":{}}],["num::integ",{"_index":615,"title":{},"name":{},"text":{"6":{}},"component":{}}],["num::iter::rangestepinclus",{"_index":640,"title":{},"name":{},"text":{"6":{}},"component":{}}],["num::on",{"_index":1421,"title":{},"name":{},"text":{"14":{}},"component":{}}],["num::range_step_inclusive(num::zero",{"_index":1420,"title":{},"name":{},"text":{"14":{}},"component":{}}],["num::zero",{"_index":1419,"title":{},"name":{},"text":{"14":{}},"component":{}}],["num::{integer::div_mod_floor",{"_index":518,"title":{},"name":{},"text":{"5":{}},"component":{}}],["number",{"_index":239,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"8":{},"9":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"22":{},"24":{},"25":{}},"component":{}}],["number(n",{"_index":2854,"title":{},"name":{},"text":{"25":{}},"component":{}}],["number(num",{"_index":2836,"title":{},"name":{},"text":{"25":{}},"component":{}}],["number(v",{"_index":2838,"title":{},"name":{},"text":{"25":{}},"component":{}}],["number::max",{"_index":1807,"title":{},"name":{},"text":{"17":{}},"component":{}}],["number::min",{"_index":1808,"title":{},"name":{},"text":{"17":{}},"component":{}}],["numer",{"_index":23,"title":{},"name":{},"text":{"1":{}},"component":{}}],["nums).min(cost(mean_rounded_up",{"_index":832,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums.as_ref",{"_index":826,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums.as_ref().to_vec",{"_index":778,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums.it",{"_index":823,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums.iter().enumer",{"_index":542,"title":{},"name":{},"text":{"5":{}},"component":{}}],["nums.iter().map(|&n",{"_index":784,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums.iter().sum",{"_index":827,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums.len",{"_index":539,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["nums.sort_unst",{"_index":779,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums[1",{"_index":783,"title":{},"name":{},"text":{"8":{}},"component":{}}],["nums[nums.len",{"_index":781,"title":{},"name":{},"text":{"8":{}},"component":{}}],["o",{"_index":995,"title":{},"name":{},"text":{"9":{}},"component":{}}],["o.insert(o.get",{"_index":996,"title":{},"name":{},"text":{"9":{}},"component":{}}],["object",{"_index":93,"title":{},"name":{},"text":{"1":{}},"component":{}}],["observ",{"_index":873,"title":{},"name":{},"text":{"9":{}},"component":{}}],["obtain",{"_index":1472,"title":{},"name":{},"text":{"15":{},"20":{}},"component":{}}],["occur",{"_index":1475,"title":{},"name":{},"text":{"15":{},"23":{}},"component":{}}],["octopi",{"_index":1211,"title":{},"name":{},"text":{"12":{}},"component":{}}],["octopi.arr.iter().any(|&v",{"_index":1244,"title":{},"name":{},"text":{"12":{}},"component":{}}],["octopi.tick_in_place_and_count_flash",{"_index":1240,"title":{},"name":{},"text":{"12":{}},"component":{}}],["octopi::from_str(input).unwrap",{"_index":1235,"title":{},"name":{},"text":{"12":{}},"component":{}}],["octopu",{"_index":161,"title":{"12":{}},"name":{},"text":{"1":{}},"component":{}}],["odd",{"_index":2411,"title":{},"name":{},"text":{"21":{}},"component":{}}],["offer",{"_index":750,"title":{},"name":{},"text":{"8":{}},"component":{}}],["ok",{"_index":1182,"title":{},"name":{},"text":{"11":{},"14":{},"17":{},"18":{},"19":{},"22":{},"23":{}},"component":{}}],["ok((left",{"_index":2086,"title":{},"name":{},"text":{"19":{}},"component":{}}],["ok(map",{"_index":1019,"title":{},"name":{},"text":{"9":{}},"component":{}}],["old_cost",{"_index":1647,"title":{},"name":{},"text":{"16":{}},"component":{}}],["old_depth",{"_index":258,"title":{},"name":{},"text":{"2":{}},"component":{}}],["old_loc",{"_index":2973,"title":{},"name":{},"text":{"26":{}},"component":{}}],["oldest",{"_index":244,"title":{},"name":{},"text":{"2":{}},"component":{}}],["omit",{"_index":2090,"title":{},"name":{},"text":{"19":{}},"component":{}}],["on",{"_index":443,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"7":{},"9":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{}},"component":{}}],["on_cuboid",{"_index":2563,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.extend(my_cuboid.difference(&cuboid",{"_index":2624,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.iter().enumer",{"_index":2572,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.iter().enumerate().skip(i",{"_index":2573,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.push(cuboid",{"_index":2567,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.push(merged_cuboid",{"_index":2598,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.swap_remove(i",{"_index":2597,"title":{},"name":{},"text":{"23":{}},"component":{}}],["on_cuboids.swap_remove(j",{"_index":2596,"title":{},"name":{},"text":{"23":{}},"component":{}}],["onc",{"_index":395,"title":{},"name":{},"text":{"4":{},"13":{},"14":{},"15":{},"18":{},"20":{}},"component":{}}],["ongoing_game_idx",{"_index":595,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ongoing_game_idxs.contains(&board_idx",{"_index":600,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ongoing_game_idxs.len",{"_index":602,"title":{},"name":{},"text":{"5":{}},"component":{}}],["ongoing_game_idxs.remove(&board_idx",{"_index":603,"title":{},"name":{},"text":{"5":{}},"component":{}}],["onto",{"_index":1281,"title":{},"name":{},"text":{"13":{},"17":{},"20":{}},"component":{}}],["op",{"_index":478,"title":{},"name":{},"text":{"4":{},"17":{}},"component":{}}],["op.into",{"_index":1775,"title":{},"name":{},"text":{"17":{}},"component":{}}],["op1",{"_index":977,"title":{},"name":{},"text":{"9":{}},"component":{}}],["op1(garbled1",{"_index":980,"title":{},"name":{},"text":{"9":{}},"component":{}}],["op1(good_digit1",{"_index":987,"title":{},"name":{},"text":{"9":{}},"component":{}}],["op2",{"_index":978,"title":{},"name":{},"text":{"9":{}},"component":{}}],["op2(garbled2",{"_index":981,"title":{},"name":{},"text":{"9":{}},"component":{}}],["op2(good_digit2",{"_index":988,"title":{},"name":{},"text":{"9":{}},"component":{}}],["op_data_length",{"_index":1754,"title":{},"name":{},"text":{"17":{}},"component":{}}],["open",{"_index":37,"title":{},"name":{},"text":{"1":{}},"component":{}}],["oper",{"_index":1700,"title":{},"name":{},"text":{"17":{},"19":{},"23":{},"25":{}},"component":{}}],["operand",{"_index":2835,"title":{},"name":{},"text":{"25":{}},"component":{}}],["operand::from_str(splat.next",{"_index":2873,"title":{},"name":{},"text":{"25":{}},"component":{}}],["operatorss",{"_index":1802,"title":{},"name":{},"text":{"17":{}},"component":{}}],["oppos",{"_index":48,"title":{},"name":{},"text":{"1":{}},"component":{}}],["opposit",{"_index":384,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ops::{index",{"_index":2833,"title":{},"name":{},"text":{"25":{}},"component":{}}],["optim",{"_index":1566,"title":{},"name":{},"text":{"16":{}},"component":{}}],["option",{"_index":66,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["or_insert_with(set::new",{"_index":957,"title":{},"name":{},"text":{"9":{}},"component":{}}],["or_insert_with(vec::new",{"_index":1305,"title":{},"name":{},"text":{"13":{}},"component":{}}],["ord",{"_index":622,"title":{},"name":{},"text":{"6":{},"9":{},"13":{},"14":{},"15":{},"20":{},"24":{},"26":{}},"component":{}}],["order",{"_index":28,"title":{},"name":{},"text":{"1":{},"9":{},"16":{},"19":{}},"component":{}}],["ordinari",{"_index":2147,"title":{},"name":{},"text":{"20":{}},"component":{}}],["orient",{"_index":1156,"title":{},"name":{},"text":{"11":{},"20":{}},"component":{}}],["orig",{"_index":1301,"title":{},"name":{},"text":{"13":{}},"component":{}}],["orig_data",{"_index":1724,"title":{},"name":{},"text":{"17":{}},"component":{}}],["orig_data[cursor",{"_index":1733,"title":{},"name":{},"text":{"17":{}},"component":{}}],["origami",{"_index":167,"title":{"14":{}},"name":{},"text":{"1":{}},"component":{}}],["origin",{"_index":1246,"title":{},"name":{},"text":{"13":{},"15":{},"17":{},"18":{}},"component":{}}],["other.applying(swivel",{"_index":2284,"title":{},"name":{},"text":{"20":{}},"component":{}}],["other.col(c",{"_index":2213,"title":{},"name":{},"text":{"20":{}},"component":{}}],["other_col",{"_index":2212,"title":{},"name":{},"text":{"20":{}},"component":{}}],["other_col[i]).sum",{"_index":2217,"title":{},"name":{},"text":{"20":{}},"component":{}}],["otherwis",{"_index":494,"title":{},"name":{},"text":{"5":{},"17":{}},"component":{}}],["out",{"_index":36,"title":{},"name":{},"text":{"1":{},"14":{},"15":{},"17":{},"21":{},"24":{},"25":{}},"component":{}}],["out_d",{"_index":1048,"title":{},"name":{},"text":{"9":{}},"component":{}}],["out_d.it",{"_index":1050,"title":{},"name":{},"text":{"9":{}},"component":{}}],["out_digit",{"_index":1037,"title":{},"name":{},"text":{"9":{}},"component":{}}],["outcom",{"_index":2432,"title":{},"name":{},"text":{"22":{}},"component":{}}],["outcome_count",{"_index":2481,"title":{},"name":{},"text":{"22":{}},"component":{}}],["outer_c",{"_index":1645,"title":{},"name":{},"text":{"16":{}},"component":{}}],["outer_c).unwrap",{"_index":1651,"title":{},"name":{},"text":{"16":{}},"component":{}}],["outer_char",{"_index":1502,"title":{},"name":{},"text":{"15":{}},"component":{}}],["outer_chars.next",{"_index":1504,"title":{},"name":{},"text":{"15":{}},"component":{}}],["outer_r",{"_index":1642,"title":{},"name":{},"text":{"16":{}},"component":{}}],["outgo",{"_index":241,"title":{},"name":{},"text":{"2":{}},"component":{}}],["output",{"_index":861,"title":{},"name":{},"text":{"9":{},"14":{},"20":{},"24":{},"25":{}},"component":{}}],["output_digit",{"_index":1046,"title":{},"name":{},"text":{"9":{}},"component":{}}],["over",{"_index":711,"title":{},"name":{},"text":{"7":{},"14":{},"15":{}},"component":{}}],["overlap",{"_index":1918,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["own",{"_index":2120,"title":{},"name":{},"text":{"19":{}},"component":{}}],["owning(elem",{"_index":2112,"title":{},"name":{},"text":{"19":{}},"component":{}}],["oxy_r",{"_index":417,"title":{},"name":{},"text":{"4":{}},"component":{}}],["oxygen",{"_index":414,"title":{},"name":{},"text":{"4":{}},"component":{}}],["p",{"_index":1384,"title":{},"name":{},"text":{"14":{},"17":{}},"component":{}}],["p1_n_win",{"_index":2500,"title":{},"name":{},"text":{"22":{}},"component":{}}],["p1_n_wins.max(p2_n_win",{"_index":2503,"title":{},"name":{},"text":{"22":{}},"component":{}}],["p2_n_win",{"_index":2501,"title":{},"name":{},"text":{"22":{}},"component":{}}],["packet",{"_index":174,"title":{"17":{}},"name":{},"text":{"1":{},"17":{}},"component":{}}],["packet.version_number).sum",{"_index":1795,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packet_bit",{"_index":1732,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packet_bits[header_length",{"_index":1739,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packet_depth",{"_index":1830,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packet_kind",{"_index":1829,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packetkind",{"_index":1784,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packetkind::liter",{"_index":1753,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packetkind::oper",{"_index":1774,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packets.iter().map(|packet",{"_index":1794,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packets.iter().rev",{"_index":1831,"title":{},"name":{},"text":{"17":{}},"component":{}}],["packets.push(packet",{"_index":1783,"title":{},"name":{},"text":{"17":{}},"component":{}}],["page",{"_index":1351,"title":{},"name":{},"text":{"14":{}},"component":{}}],["pair",{"_index":34,"title":{},"name":{},"text":{"1":{},"5":{},"9":{},"11":{},"15":{},"18":{},"19":{},"20":{},"22":{}},"component":{}}],["pair_count",{"_index":1516,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pair_counts.entry((c",{"_index":1527,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pair_counts.entry((c1",{"_index":1525,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pair_counts.get_mut(&key).unwrap",{"_index":1529,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pair_counts_vec",{"_index":1518,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pairwis",{"_index":897,"title":{},"name":{},"text":{"9":{},"19":{},"20":{}},"component":{}}],["panic!(\"cannot",{"_index":936,"title":{},"name":{},"text":{"9":{},"24":{}},"component":{}}],["panic!(\"could",{"_index":2814,"title":{},"name":{},"text":{"24":{}},"component":{}}],["panic!(\"digit",{"_index":940,"title":{},"name":{},"text":{"9":{}},"component":{}}],["panic!(\"unexpect",{"_index":2104,"title":{},"name":{},"text":{"19":{}},"component":{}}],["paper",{"_index":1345,"title":{},"name":{},"text":{"14":{}},"component":{}}],["paper.do_folds(fold",{"_index":1430,"title":{},"name":{},"text":{"14":{}},"component":{}}],["paper.folded_across(fold",{"_index":1391,"title":{},"name":{},"text":{"14":{}},"component":{}}],["paper.folded_across(fold).dots.len",{"_index":1408,"title":{},"name":{},"text":{"14":{}},"component":{}}],["paper::::from_dots(point",{"_index":1398,"title":{},"name":{},"text":{"14":{}},"component":{}}],["paper::from_dots(dot",{"_index":1387,"title":{},"name":{},"text":{"14":{}},"component":{}}],["parallel",{"_index":2521,"title":{},"name":{},"text":{"23":{}},"component":{}}],["paramet",{"_index":2914,"title":{},"name":{},"text":{"25":{}},"component":{}}],["paren",{"_index":1153,"title":{},"name":{},"text":{"11":{}},"component":{}}],["parent_packet_length",{"_index":1740,"title":{},"name":{},"text":{"17":{}},"component":{}}],["parent’",{"_index":1702,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pars",{"_index":30,"title":{},"name":{},"text":{"1":{},"11":{},"17":{},"19":{},"22":{}},"component":{}}],["parse_line(v.it",{"_index":1185,"title":{},"name":{},"text":{"11":{}},"component":{}}],["parse_line>(lin",{"_index":1165,"title":{},"name":{},"text":{"11":{}},"component":{}}],["parse_st",{"_index":1730,"title":{},"name":{},"text":{"17":{}},"component":{}}],["parsed_lin",{"_index":1184,"title":{},"name":{},"text":{"11":{}},"component":{}}],["parseresult",{"_index":1164,"title":{},"name":{},"text":{"11":{}},"component":{}}],["parsest",{"_index":1723,"title":{},"name":{},"text":{"17":{}},"component":{}}],["part",{"_index":213,"title":{"2-2":{},"3-2":{},"3-3":{},"4-2":{},"4-3":{},"5-2":{},"5-3":{},"6-2":{},"6-3":{},"7-2":{},"8-2":{},"8-3":{},"9-2":{},"9-3":{},"10-2":{},"10-3":{},"11-2":{},"11-3":{},"12-2":{},"12-3":{},"13-2":{},"14-2":{},"14-3":{},"15-2":{},"16-2":{},"16-3":{},"17-2":{},"17-3":{},"18-2":{},"18-3":{},"19-2":{},"19-3":{},"20-2":{},"20-3":{},"21-2":{},"22-2":{},"22-3":{},"23-2":{},"24-2":{},"25-2":{},"26-1":{}},"name":{},"text":{"2":{},"6":{},"8":{},"10":{},"13":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["partial_cmp(&self",{"_index":2690,"title":{},"name":{},"text":{"24":{}},"component":{}}],["partialeq",{"_index":619,"title":{},"name":{},"text":{"6":{},"9":{},"11":{},"13":{},"14":{},"15":{},"18":{},"19":{},"20":{},"24":{},"26":{}},"component":{}}],["partialord",{"_index":621,"title":{},"name":{},"text":{"6":{},"9":{},"13":{},"14":{},"15":{},"20":{},"24":{},"26":{}},"component":{}}],["particip",{"_index":13,"title":{},"name":{},"text":{"1":{}},"component":{}}],["particular",{"_index":506,"title":{},"name":{},"text":{"5":{},"8":{},"18":{}},"component":{}}],["particularli",{"_index":512,"title":{},"name":{},"text":{"5":{}},"component":{}}],["passag",{"_index":163,"title":{"13":{}},"name":{},"text":{"1":{}},"component":{}}],["password",{"_index":1410,"title":{},"name":{},"text":{"14":{}},"component":{}}],["past",{"_index":231,"title":{},"name":{},"text":{"2":{}},"component":{}}],["path",{"_index":164,"title":{"13":{}},"name":{},"text":{"1":{},"13":{},"16":{},"24":{}},"component":{}}],["path’",{"_index":1549,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pattern",{"_index":850,"title":{},"name":{},"text":{"9":{}},"component":{}}],["penal",{"_index":796,"title":{},"name":{},"text":{"8":{}},"component":{}}],["peopl",{"_index":1841,"title":{},"name":{},"text":{"18":{}},"component":{}}],["per",{"_index":1461,"title":{},"name":{},"text":{"15":{}},"component":{}}],["perform",{"_index":1406,"title":{},"name":{},"text":{"14":{},"15":{},"16":{},"19":{},"20":{},"23":{},"24":{}},"component":{}}],["perhap",{"_index":1565,"title":{},"name":{},"text":{"16":{}},"component":{}}],["permiss",{"_index":2906,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pghzbfjc",{"_index":1435,"title":{},"name":{},"text":{"14":{}},"component":{}}],["phase",{"_index":2888,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pick",{"_index":813,"title":{},"name":{},"text":{"8":{},"20":{},"24":{}},"component":{}}],["piec",{"_index":1344,"title":{},"name":{},"text":{"14":{},"20":{},"23":{}},"component":{}}],["piece.difference(&c2",{"_index":2631,"title":{},"name":{},"text":{"23":{}},"component":{}}],["pixel",{"_index":2352,"title":{},"name":{},"text":{"21":{}},"component":{}}],["place",{"_index":1352,"title":{},"name":{},"text":{"14":{},"19":{}},"component":{}}],["plagu",{"_index":1482,"title":{},"name":{},"text":{"15":{}},"component":{}}],["plane",{"_index":604,"title":{},"name":{},"text":{"6":{}},"component":{}}],["play_number(&mut",{"_index":547,"title":{},"name":{},"text":{"5":{}},"component":{}}],["play_quantum_dic",{"_index":2475,"title":{},"name":{},"text":{"22":{}},"component":{}}],["play_quantum_dice(play",{"_index":2502,"title":{},"name":{},"text":{"22":{}},"component":{}}],["player",{"_index":86,"title":{},"name":{},"text":{"1":{},"22":{}},"component":{}}],["player.roll_deterministic_die(board",{"_index":2468,"title":{},"name":{},"text":{"22":{}},"component":{}}],["player.roll_value(board",{"_index":2497,"title":{},"name":{},"text":{"22":{}},"component":{}}],["player.scor",{"_index":2469,"title":{},"name":{},"text":{"22":{}},"component":{}}],["player_index",{"_index":2492,"title":{},"name":{},"text":{"22":{}},"component":{}}],["players[1",{"_index":2467,"title":{},"name":{},"text":{"22":{}},"component":{}}],["players[player_index",{"_index":2496,"title":{},"name":{},"text":{"22":{}},"component":{}}],["plu",{"_index":1476,"title":{},"name":{},"text":{"15":{}},"component":{}}],["po",{"_index":1878,"title":{},"name":{},"text":{"18":{},"22":{}},"component":{}}],["point",{"_index":70,"title":{},"name":{},"text":{"1":{},"6":{},"8":{},"14":{},"16":{},"18":{},"20":{},"24":{},"25":{},"26":{}},"component":{}}],["point(new_x",{"_index":1376,"title":{},"name":{},"text":{"14":{}},"component":{}}],["point(t",{"_index":623,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["point(x",{"_index":1372,"title":{},"name":{},"text":{"14":{}},"component":{}}],["point(x2",{"_index":639,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pointcount",{"_index":625,"title":{},"name":{},"text":{"6":{}},"component":{}}],["polym",{"_index":1499,"title":{},"name":{},"text":{"15":{}},"component":{}}],["polymer",{"_index":170,"title":{"15":{}},"name":{},"text":{"1":{}},"component":{}}],["polymer.apply_n_times(n",{"_index":1532,"title":{},"name":{},"text":{"15":{}},"component":{}}],["polymer::from_str(input).unwrap",{"_index":1543,"title":{},"name":{},"text":{"15":{}},"component":{}}],["poor",{"_index":2001,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pop",{"_index":1145,"title":{},"name":{},"text":{"11":{},"13":{}},"component":{}}],["portion",{"_index":2354,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pos0",{"_index":1470,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pos1",{"_index":1473,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pos2",{"_index":1474,"title":{},"name":{},"text":{"15":{}},"component":{}}],["posi",{"_index":2227,"title":{},"name":{},"text":{"20":{}},"component":{}}],["posit",{"_index":278,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"14":{},"15":{},"18":{},"22":{},"24":{}},"component":{}}],["position)).or_default",{"_index":1514,"title":{},"name":{},"text":{"15":{}},"component":{}}],["possibl",{"_index":747,"title":{},"name":{},"text":{"8":{},"18":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["posx",{"_index":2225,"title":{},"name":{},"text":{"20":{}},"component":{}}],["posz",{"_index":2229,"title":{},"name":{},"text":{"20":{}},"component":{}}],["potenti",{"_index":1206,"title":{},"name":{},"text":{"12":{},"18":{},"23":{}},"component":{}}],["ppp",{"_index":1579,"title":{},"name":{},"text":{"16":{}},"component":{}}],["ppp’",{"_index":1580,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pq",{"_index":2751,"title":{},"name":{},"text":{"24":{}},"component":{}}],["pq.pop",{"_index":2766,"title":{},"name":{},"text":{"24":{}},"component":{}}],["pq.push(initial_st",{"_index":2763,"title":{},"name":{},"text":{"24":{}},"component":{}}],["pq.push_increase(st",{"_index":2755,"title":{},"name":{},"text":{"24":{}},"component":{}}],["pr",{"_index":1197,"title":{},"name":{},"text":{"11":{}},"component":{}}],["practic",{"_index":2360,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pre",{"_index":1771,"title":{},"name":{},"text":{"17":{}},"component":{}}],["preced",{"_index":2894,"title":{},"name":{},"text":{"25":{}},"component":{}}],["precis",{"_index":1671,"title":{},"name":{},"text":{"17":{},"18":{}},"component":{}}],["precomput",{"_index":2433,"title":{},"name":{},"text":{"22":{}},"component":{}}],["precondit",{"_index":1353,"title":{},"name":{},"text":{"14":{}},"component":{}}],["preferenti",{"_index":2911,"title":{},"name":{},"text":{"25":{}},"component":{}}],["present",{"_index":1004,"title":{},"name":{},"text":{"9":{}},"component":{}}],["presum",{"_index":2639,"title":{},"name":{},"text":{"23":{}},"component":{}}],["pretti",{"_index":62,"title":{},"name":{},"text":{"1":{},"11":{},"18":{}},"component":{}}],["prev.brac",{"_index":1174,"title":{},"name":{},"text":{"11":{}},"component":{}}],["prev.orient",{"_index":1172,"title":{},"name":{},"text":{"11":{}},"component":{}}],["prev_depth",{"_index":2080,"title":{},"name":{},"text":{"19":{}},"component":{}}],["prev_was_digit",{"_index":2096,"title":{},"name":{},"text":{"19":{}},"component":{}}],["prev_z",{"_index":2929,"title":{},"name":{},"text":{"25":{}},"component":{}}],["prev_zs.key",{"_index":2933,"title":{},"name":{},"text":{"25":{}},"component":{}}],["previou",{"_index":221,"title":{},"name":{},"text":{"2":{}},"component":{}}],["print",{"_index":1434,"title":{},"name":{},"text":{"14":{}},"component":{}}],["println",{"_index":1431,"title":{},"name":{},"text":{"14":{}},"component":{}}],["prioriti",{"_index":1553,"title":{},"name":{},"text":{"16":{},"24":{}},"component":{}}],["priority_queue::priorityqueu",{"_index":2681,"title":{},"name":{},"text":{"24":{}},"component":{}}],["priorityqueu",{"_index":2752,"title":{},"name":{},"text":{"24":{}},"component":{}}],["priorityqueue::::with_default_hash",{"_index":2759,"title":{},"name":{},"text":{"24":{}},"component":{}}],["prism",{"_index":2509,"title":{},"name":{},"text":{"23":{}},"component":{}}],["problem",{"_index":1,"title":{"1-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["procedur",{"_index":420,"title":{},"name":{},"text":{"4":{},"14":{}},"component":{}}],["process",{"_index":1588,"title":{},"name":{},"text":{"16":{},"23":{}},"component":{}}],["processor",{"_index":2821,"title":{},"name":{},"text":{"25":{}},"component":{}}],["processor’",{"_index":2824,"title":{},"name":{},"text":{"25":{}},"component":{}}],["produc",{"_index":1441,"title":{},"name":{},"text":{"15":{},"25":{}},"component":{}}],["product",{"_index":658,"title":{},"name":{},"text":{"6":{},"17":{}},"component":{}}],["program",{"_index":95,"title":{},"name":{},"text":{"1":{},"25":{}},"component":{}}],["progress",{"_index":489,"title":{},"name":{},"text":{"5":{}},"component":{}}],["progress.cols[3",{"_index":508,"title":{},"name":{},"text":{"5":{}},"component":{}}],["progress.rows[2",{"_index":507,"title":{},"name":{},"text":{"5":{}},"component":{}}],["projectil",{"_index":1850,"title":{},"name":{},"text":{"18":{}},"component":{}}],["proof",{"_index":768,"title":{},"name":{},"text":{"8":{}},"component":{}}],["prove",{"_index":517,"title":{},"name":{},"text":{"5":{}},"component":{}}],["provid",{"_index":26,"title":{},"name":{},"text":{"1":{},"20":{}},"component":{}}],["prs.filter_map(|r",{"_index":1189,"title":{},"name":{},"text":{"11":{}},"component":{}}],["ps",{"_index":1776,"title":{},"name":{},"text":{"17":{}},"component":{}}],["ps.remain",{"_index":1777,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pt1",{"_index":2816,"title":{},"name":{},"text":{"24":{}},"component":{}}],["pt1(&block",{"_index":2878,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pt1(&cave_system",{"_index":1327,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pt1(&endpoint",{"_index":645,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pt1(&grid",{"_index":1622,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pt1(&hm",{"_index":1096,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pt1(&mat",{"_index":370,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pt1(&mut",{"_index":2989,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pt1(&num",{"_index":758,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pt1(&p",{"_index":1788,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pt1(&paper",{"_index":1402,"title":{},"name":{},"text":{"14":{}},"component":{}}],["pt1(&polym",{"_index":1544,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pt1(&scanner",{"_index":2332,"title":{},"name":{},"text":{"20":{}},"component":{}}],["pt1(&snail_num",{"_index":2127,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pt1(&timer",{"_index":730,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pt1(block",{"_index":2961,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pt1(cave",{"_index":1339,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pt1(directions.it",{"_index":307,"title":{},"name":{},"text":{"3":{}},"component":{}}],["pt1(endpoint",{"_index":669,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pt1(game1",{"_index":578,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pt1(garden",{"_index":2991,"title":{},"name":{},"text":{"26":{}},"component":{}}],["pt1(grid",{"_index":1624,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pt1(hm",{"_index":1110,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pt1(im",{"_index":2412,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pt1(im1",{"_index":2406,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pt1(input",{"_index":262,"title":{},"name":{},"text":{"2":{}},"component":{}}],["pt1(mat",{"_index":397,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pt1(mut",{"_index":583,"title":{},"name":{},"text":{"5":{},"22":{}},"component":{}}],["pt1(octopi",{"_index":1241,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pt1(octopi.clon",{"_index":1236,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pt1(output_digits.it",{"_index":1051,"title":{},"name":{},"text":{"9":{}},"component":{}}],["pt1(packet",{"_index":1793,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pt1(paper",{"_index":1407,"title":{},"name":{},"text":{"14":{}},"component":{}}],["pt1(parsed_lines.it",{"_index":1186,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pt1(player",{"_index":2463,"title":{},"name":{},"text":{"22":{}},"component":{}}],["pt1(polym",{"_index":1546,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pt1(scanner",{"_index":2334,"title":{},"name":{},"text":{"20":{}},"component":{}}],["pt1(steps.it",{"_index":2637,"title":{},"name":{},"text":{"23":{}},"component":{}}],["pt1(timer",{"_index":733,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pt1>(num",{"_index":777,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pt1>(out_digit",{"_index":1053,"title":{},"name":{},"text":{"9":{}},"component":{}}],["pt1>(pr",{"_index":1188,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pt1>(snail_num",{"_index":2128,"title":{},"name":{},"text":{"19":{}},"component":{}}],["pt1>(step",{"_index":309,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["pt1>(trajectori",{"_index":1993,"title":{},"name":{},"text":{"18":{}},"component":{}}],["pt2",{"_index":1428,"title":{},"name":{},"text":{"14":{},"17":{},"24":{}},"component":{}}],["pt2(&block",{"_index":2879,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pt2(&cave_system))).into",{"_index":1328,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pt2(&endpoints))).into",{"_index":646,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pt2(&grid))).into",{"_index":1623,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pt2(&hm))).into",{"_index":1097,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pt2(&mat))).into",{"_index":371,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pt2(&nums))).into",{"_index":759,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pt2(&p).unwrap())).into",{"_index":1789,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pt2(&paper",{"_index":1404,"title":{},"name":{},"text":{"14":{}},"component":{}}],["pt2(&polymer))).into",{"_index":1545,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pt2(&timers))).into",{"_index":731,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pt2(&translations))).into",{"_index":2333,"title":{},"name":{},"text":{"20":{}},"component":{}}],["pt2())).into",{"_index":2817,"title":{},"name":{},"text":{"24":{}},"component":{}}],["pt2(block",{"_index":2963,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pt2(cave",{"_index":1341,"title":{},"name":{},"text":{"13":{}},"component":{}}],["pt2(directions.iter()))).into",{"_index":308,"title":{},"name":{},"text":{"3":{}},"component":{}}],["pt2(endpoint",{"_index":694,"title":{},"name":{},"text":{"6":{}},"component":{}}],["pt2(game2))).into",{"_index":579,"title":{},"name":{},"text":{"5":{}},"component":{}}],["pt2(grid",{"_index":1656,"title":{},"name":{},"text":{"16":{}},"component":{}}],["pt2(hm",{"_index":1135,"title":{},"name":{},"text":{"10":{}},"component":{}}],["pt2(im",{"_index":2417,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pt2(im2))).into",{"_index":2407,"title":{},"name":{},"text":{"21":{}},"component":{}}],["pt2(input",{"_index":268,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["pt2(input))).into",{"_index":263,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["pt2(mat",{"_index":474,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pt2(mut",{"_index":594,"title":{},"name":{},"text":{"5":{},"12":{}},"component":{}}],["pt2(octopi))).into",{"_index":1237,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pt2(output_digits.iter()))).into",{"_index":1052,"title":{},"name":{},"text":{"9":{}},"component":{}}],["pt2(packet",{"_index":1826,"title":{},"name":{},"text":{"17":{}},"component":{}}],["pt2(parsed_lines.iter()))).into",{"_index":1187,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pt2(player",{"_index":2465,"title":{},"name":{},"text":{"22":{}},"component":{}}],["pt2(polym",{"_index":1547,"title":{},"name":{},"text":{"15":{}},"component":{}}],["pt2(steps.iter()))).into",{"_index":2638,"title":{},"name":{},"text":{"23":{}},"component":{}}],["pt2(timer",{"_index":736,"title":{},"name":{},"text":{"7":{}},"component":{}}],["pt2>(num",{"_index":821,"title":{},"name":{},"text":{"8":{}},"component":{}}],["pt2>(out_digit",{"_index":1058,"title":{},"name":{},"text":{"9":{}},"component":{}}],["pt2>(pr",{"_index":1196,"title":{},"name":{},"text":{"11":{}},"component":{}}],["pt2>(step",{"_index":313,"title":{},"name":{},"text":{"3":{},"23":{}},"component":{}}],["pt2>(translat",{"_index":2339,"title":{},"name":{},"text":{"20":{}},"component":{}}],["pub",{"_index":264,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["pub(crat",{"_index":107,"title":{},"name":{},"text":{"1":{}},"component":{}}],["purpos",{"_index":82,"title":{},"name":{},"text":{"1":{}},"component":{}}],["push",{"_index":1280,"title":{},"name":{},"text":{"13":{},"17":{}},"component":{}}],["push(cave::new(dest",{"_index":1306,"title":{},"name":{},"text":{"13":{}},"component":{}}],["puzzl",{"_index":2144,"title":{},"name":{},"text":{"20":{}},"component":{}}],["python",{"_index":53,"title":{},"name":{},"text":{"1":{}},"component":{}}],["quantiti",{"_index":1686,"title":{},"name":{},"text":{"17":{}},"component":{}}],["quarter",{"_index":2233,"title":{},"name":{},"text":{"20":{}},"component":{}}],["quartet",{"_index":1663,"title":{},"name":{},"text":{"17":{}},"component":{}}],["queri",{"_index":1207,"title":{},"name":{},"text":{"12":{}},"component":{}}],["question",{"_index":688,"title":{},"name":{},"text":{"6":{},"23":{}},"component":{}}],["queue",{"_index":1554,"title":{},"name":{},"text":{"16":{},"24":{}},"component":{}}],["quickli",{"_index":2671,"title":{},"name":{},"text":{"24":{}},"component":{}}],["quit",{"_index":2886,"title":{},"name":{},"text":{"25":{}},"component":{}}],["quot",{"_index":661,"title":{},"name":{},"text":{"6":{}},"component":{}}],["r",{"_index":543,"title":{},"name":{},"text":{"5":{},"10":{},"11":{},"12":{},"20":{},"21":{},"25":{}},"component":{}}],["r(x,y)∈r",{"_index":1924,"title":{},"name":{},"text":{"18":{}},"component":{}}],["r.borrow",{"_index":1190,"title":{},"name":{},"text":{"11":{}},"component":{}}],["r1",{"_index":2484,"title":{},"name":{},"text":{"22":{}},"component":{}}],["r2",{"_index":2486,"title":{},"name":{},"text":{"22":{}},"component":{}}],["r3",{"_index":2487,"title":{},"name":{},"text":{"22":{}},"component":{}}],["r=[xmin,xmax]×[ymin,ymax]r=[x_\\mathrm{min",{"_index":1853,"title":{},"name":{},"text":{"18":{}},"component":{}}],["r_elem",{"_index":2014,"title":{},"name":{},"text":{"19":{}},"component":{}}],["r_idx",{"_index":2013,"title":{},"name":{},"text":{"19":{}},"component":{}}],["r_min",{"_index":1617,"title":{},"name":{},"text":{"16":{}},"component":{}}],["ran",{"_index":2881,"title":{},"name":{},"text":{"25":{}},"component":{}}],["rang",{"_index":430,"title":{},"name":{},"text":{"4":{},"6":{},"22":{},"24":{},"25":{}},"component":{}}],["range_between(a",{"_index":611,"title":{},"name":{},"text":{"6":{}},"component":{}}],["range_between(x1",{"_index":659,"title":{},"name":{},"text":{"6":{}},"component":{}}],["range_between(y1",{"_index":660,"title":{},"name":{},"text":{"6":{}},"component":{}}],["rate",{"_index":416,"title":{},"name":{},"text":{"4":{}},"component":{}}],["rd",{"_index":1772,"title":{},"name":{},"text":{"17":{}},"component":{}}],["re",{"_index":1491,"title":{},"name":{},"text":{"15":{},"18":{}},"component":{}}],["re.captures(input.trim",{"_index":1893,"title":{},"name":{},"text":{"18":{}},"component":{}}],["reach",{"_index":1577,"title":{},"name":{},"text":{"16":{},"18":{},"25":{}},"component":{}}],["reachabl",{"_index":1276,"title":{},"name":{},"text":{"13":{}},"component":{}}],["reactor",{"_index":191,"title":{"23":{}},"name":{},"text":{"1":{}},"component":{}}],["read",{"_index":39,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"8":{},"14":{},"20":{},"25":{}},"component":{}}],["read_input(",{"_index":297,"title":{},"name":{},"text":{"3":{},"8":{},"20":{},"22":{},"25":{}},"component":{}}],["read_input(input",{"_index":351,"title":{},"name":{},"text":{"4":{},"7":{},"9":{},"11":{},"14":{},"16":{},"17":{},"18":{},"23":{}},"component":{}}],["read_input(input).unwrap",{"_index":306,"title":{},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"11":{},"16":{},"20":{},"22":{},"23":{},"25":{}},"component":{}}],["read_input::(input).unwrap",{"_index":1401,"title":{},"name":{},"text":{"14":{}},"component":{}}],["read_input_into_gam",{"_index":511,"title":{},"name":{},"text":{"5":{}},"component":{}}],["reader",{"_index":1904,"title":{},"name":{},"text":{"18":{}},"component":{}}],["real",{"_index":2002,"title":{},"name":{},"text":{"19":{}},"component":{}}],["realiz",{"_index":2651,"title":{},"name":{},"text":{"24":{}},"component":{}}],["realli",{"_index":271,"title":{},"name":{},"text":{"3":{},"16":{},"17":{}},"component":{}}],["realm",{"_index":2439,"title":{},"name":{},"text":{"22":{}},"component":{}}],["reason",{"_index":60,"title":{},"name":{},"text":{"1":{},"5":{}},"component":{}}],["reboot",{"_index":192,"title":{"23":{}},"name":{},"text":{"1":{}},"component":{}}],["rebootstep",{"_index":2607,"title":{},"name":{},"text":{"23":{}},"component":{}}],["receiv",{"_index":879,"title":{},"name":{},"text":{"9":{}},"component":{}}],["record",{"_index":882,"title":{},"name":{},"text":{"9":{},"19":{},"23":{},"25":{}},"component":{}}],["rect",{"_index":1882,"title":{},"name":{},"text":{"18":{}},"component":{}}],["rectangular",{"_index":1852,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{}}],["recurs",{"_index":2061,"title":{},"name":{},"text":{"19":{}},"component":{}}],["reduc",{"_index":1800,"title":{},"name":{},"text":{"17":{},"25":{}},"component":{}}],["reduce(&mut",{"_index":2116,"title":{},"name":{},"text":{"19":{}},"component":{}}],["reduce(max",{"_index":1822,"title":{},"name":{},"text":{"17":{}},"component":{}}],["reduce(min",{"_index":1821,"title":{},"name":{},"text":{"17":{}},"component":{}}],["reduce(product",{"_index":1820,"title":{},"name":{},"text":{"17":{}},"component":{}}],["reduce(reduc",{"_index":1817,"title":{},"name":{},"text":{"17":{}},"component":{}}],["reduce(sum",{"_index":1819,"title":{},"name":{},"text":{"17":{}},"component":{}}],["reduce(|a",{"_index":121,"title":{},"name":{},"text":{"1":{}},"component":{}}],["reduce_once(&mut",{"_index":2113,"title":{},"name":{},"text":{"19":{}},"component":{}}],["reducer.ident",{"_index":1833,"title":{},"name":{},"text":{"17":{}},"component":{}}],["redund",{"_index":1001,"title":{},"name":{},"text":{"9":{}},"component":{}}],["redundant_key",{"_index":1006,"title":{},"name":{},"text":{"9":{}},"component":{}}],["redundant_keys.insert(segment_union",{"_index":1014,"title":{},"name":{},"text":{"9":{}},"component":{}}],["refer",{"_index":1261,"title":{},"name":{},"text":{"13":{},"20":{},"21":{},"23":{},"25":{}},"component":{}}],["refin",{"_index":944,"title":{},"name":{},"text":{"9":{}},"component":{}}],["reflect",{"_index":1355,"title":{},"name":{},"text":{"14":{}},"component":{}}],["reg(regist",{"_index":2837,"title":{},"name":{},"text":{"25":{}},"component":{}}],["reg(register::from_str(",{"_index":2839,"title":{},"name":{},"text":{"25":{}},"component":{}}],["regardless",{"_index":1791,"title":{},"name":{},"text":{"17":{}},"component":{}}],["regex::new(r\"(\\d+),(\\d+)\\",{"_index":628,"title":{},"name":{},"text":{"6":{}},"component":{}}],["regex::regex",{"_index":616,"title":{},"name":{},"text":{"6":{}},"component":{}}],["regex::regex::new(r\"target",{"_index":1890,"title":{},"name":{},"text":{"18":{}},"component":{}}],["region",{"_index":1071,"title":{},"name":{},"text":{"10":{},"18":{},"20":{},"23":{}},"component":{}}],["regist",{"_index":2822,"title":{},"name":{},"text":{"25":{}},"component":{}}],["register::from_str(splat.next",{"_index":2872,"title":{},"name":{},"text":{"25":{}},"component":{}}],["register::z",{"_index":2937,"title":{},"name":{},"text":{"25":{}},"component":{}}],["register’",{"_index":2904,"title":{},"name":{},"text":{"25":{}},"component":{}}],["rel",{"_index":795,"title":{},"name":{},"text":{"8":{}},"component":{}}],["relax",{"_index":1330,"title":{},"name":{},"text":{"13":{}},"component":{}}],["remain",{"_index":435,"title":{},"name":{},"text":{"4":{},"14":{},"17":{},"21":{},"23":{}},"component":{}}],["remaining.is_empti",{"_index":1731,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata",{"_index":1716,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::nbits(0",{"_index":1721,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::nbits(n",{"_index":1741,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::nbits(n_bit",{"_index":1762,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::npackets(0",{"_index":1722,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::npackets(1",{"_index":1727,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::npackets(_",{"_index":1773,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::npackets(n",{"_index":1742,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::npackets(n_packet",{"_index":1760,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remainingdata::numbit",{"_index":1779,"title":{},"name":{},"text":{"17":{}},"component":{}}],["remov",{"_index":490,"title":{},"name":{},"text":{"5":{},"9":{},"15":{},"20":{},"23":{}},"component":{}}],["reorder",{"_index":2661,"title":{},"name":{},"text":{"24":{}},"component":{}}],["repeat",{"_index":1587,"title":{},"name":{},"text":{"16":{},"20":{},"25":{}},"component":{}}],["repeatedli",{"_index":942,"title":{},"name":{},"text":{"9":{},"20":{}},"component":{}}],["replac",{"_index":1584,"title":{},"name":{},"text":{"16":{},"21":{}},"component":{}}],["repr(us",{"_index":2692,"title":{},"name":{},"text":{"24":{}},"component":{}}],["repres",{"_index":480,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["request",{"_index":1448,"title":{},"name":{},"text":{"15":{}},"component":{}}],["requir",{"_index":318,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"17":{},"18":{},"21":{}},"component":{}}],["residu",{"_index":91,"title":{},"name":{},"text":{"1":{}},"component":{}}],["respect",{"_index":1468,"title":{},"name":{},"text":{"15":{},"19":{},"20":{},"23":{}},"component":{}}],["rest",{"_index":2301,"title":{},"name":{},"text":{"20":{},"21":{}},"component":{}}],["rest.is_empti",{"_index":2304,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rest.iter().enumer",{"_index":2307,"title":{},"name":{},"text":{"20":{}},"component":{}}],["result",{"_index":67,"title":{},"name":{},"text":{"1":{},"9":{},"11":{},"14":{},"15":{},"17":{},"19":{},"21":{},"23":{},"25":{}},"component":{}}],["result.into",{"_index":1026,"title":{},"name":{},"text":{"9":{}},"component":{}}],["ret",{"_index":2461,"title":{},"name":{},"text":{"22":{}},"component":{}}],["retrac",{"_index":1978,"title":{},"name":{},"text":{"18":{}},"component":{}}],["return",{"_index":293,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"11":{},"14":{},"16":{},"18":{},"19":{},"20":{},"23":{},"24":{},"25":{}},"component":{}}],["rev",{"_index":115,"title":{},"name":{},"text":{"1":{},"9":{}},"component":{}}],["rewir",{"_index":866,"title":{},"name":{},"text":{"9":{}},"component":{}}],["rh",{"_index":921,"title":{},"name":{},"text":{"9":{}},"component":{}}],["right",{"_index":1157,"title":{},"name":{},"text":{"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"25":{},"26":{}},"component":{}}],["right.magnitud",{"_index":2088,"title":{},"name":{},"text":{"19":{}},"component":{}}],["rightmost",{"_index":432,"title":{},"name":{},"text":{"4":{}},"component":{}}],["rights.insert(loc",{"_index":2969,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rins",{"_index":2169,"title":{},"name":{},"text":{"20":{}},"component":{}}],["roll",{"_index":2421,"title":{},"name":{},"text":{"22":{}},"component":{}}],["roll(&mut",{"_index":2457,"title":{},"name":{},"text":{"22":{}},"component":{}}],["roll_deterministic_die(&mut",{"_index":2449,"title":{},"name":{},"text":{"22":{}},"component":{}}],["roll_valu",{"_index":2493,"title":{},"name":{},"text":{"22":{}},"component":{}}],["roll_value(&mut",{"_index":2444,"title":{},"name":{},"text":{"22":{}},"component":{}}],["room",{"_index":2658,"title":{},"name":{},"text":{"24":{}},"component":{}}],["room’",{"_index":2662,"title":{},"name":{},"text":{"24":{}},"component":{}}],["root",{"_index":212,"title":{},"name":{},"text":{"18":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}}}],["roots::sqrt(&n",{"_index":1897,"title":{},"name":{},"text":{"18":{}},"component":{}}],["rotat",{"_index":2148,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rotation_about_up",{"_index":2236,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rotationccw",{"_index":2232,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rotationccw::it",{"_index":2281,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rotationccw::zero",{"_index":2239,"title":{},"name":{},"text":{"20":{}},"component":{}}],["roughli",{"_index":1661,"title":{},"name":{},"text":{"17":{},"24":{}},"component":{}}],["round",{"_index":767,"title":{},"name":{},"text":{"8":{}},"component":{}}],["row",{"_index":426,"title":{},"name":{},"text":{"4":{},"5":{},"10":{},"12":{},"16":{},"20":{},"24":{},"26":{}},"component":{}}],["row(&self",{"_index":2202,"title":{},"name":{},"text":{"20":{}},"component":{}}],["row/column",{"_index":498,"title":{},"name":{},"text":{"5":{}},"component":{}}],["rrr",{"_index":1922,"title":{},"name":{},"text":{"18":{}},"component":{}}],["rrr'",{"_index":1866,"title":{},"name":{},"text":{"18":{}},"component":{}}],["rule",{"_index":1666,"title":{},"name":{},"text":{"17":{},"19":{},"21":{},"24":{}},"component":{}}],["ruleset",{"_index":2657,"title":{},"name":{},"text":{"24":{}},"component":{}}],["run",{"_index":222,"title":{},"name":{},"text":{"2":{},"15":{},"18":{},"24":{},"25":{}},"component":{}}],["run_block(&mut",{"_index":2851,"title":{},"name":{},"text":{"25":{}},"component":{}}],["run_until_no_movement(&mut",{"_index":2986,"title":{},"name":{},"text":{"26":{}},"component":{}}],["rust",{"_index":10,"title":{},"name":{},"text":{"1":{}},"component":{}}],["rust’",{"_index":97,"title":{},"name":{},"text":{"1":{},"24":{}},"component":{}}],["s",{"_index":291,"title":{},"name":{},"text":{"3":{},"16":{},"17":{},"20":{},"23":{},"25":{}},"component":{}}],["s*(\\d+),(\\d+)\").ok",{"_index":629,"title":{},"name":{},"text":{"6":{}},"component":{}}],["s*y=([\\d",{"_index":1892,"title":{},"name":{},"text":{"18":{}},"component":{}}],["s.borrow",{"_index":2308,"title":{},"name":{},"text":{"20":{}},"component":{}}],["s.byte",{"_index":916,"title":{},"name":{},"text":{"9":{}},"component":{}}],["s.line",{"_index":298,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"15":{},"21":{},"22":{}},"component":{}}],["s.lines().chain(std::iter::onc",{"_index":557,"title":{},"name":{},"text":{"5":{},"20":{}},"component":{}}],["s.lines().chain(std::iter::once(\"inp",{"_index":2864,"title":{},"name":{},"text":{"25":{}},"component":{}}],["s.lines().count",{"_index":1085,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["s.lines().enumer",{"_index":2722,"title":{},"name":{},"text":{"24":{}},"component":{}}],["s.lines().next()?.chars().count",{"_index":1083,"title":{},"name":{},"text":{"10":{}},"component":{}}],["s.lines().next()?.len",{"_index":1212,"title":{},"name":{},"text":{"12":{}},"component":{}}],["s.lines().nth_back(0)?.trim().len",{"_index":2371,"title":{},"name":{},"text":{"21":{}},"component":{}}],["s.parse().ok",{"_index":717,"title":{},"name":{},"text":{"7":{},"25":{}},"component":{}}],["s.parse::().ok",{"_index":561,"title":{},"name":{},"text":{"5":{}},"component":{}}],["s.split",{"_index":2600,"title":{},"name":{},"text":{"23":{}},"component":{}}],["s.split_whitespac",{"_index":1360,"title":{},"name":{},"text":{"14":{}},"component":{}}],["s.trim",{"_index":755,"title":{},"name":{},"text":{"8":{}},"component":{}}],["s.trim().char",{"_index":1710,"title":{},"name":{},"text":{"17":{}},"component":{}}],["same",{"_index":14,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"9":{},"15":{},"19":{},"21":{},"23":{}},"component":{}}],["satisfi",{"_index":323,"title":{},"name":{},"text":{"4":{},"6":{},"18":{}},"component":{}}],["save",{"_index":2642,"title":{},"name":{},"text":{"23":{}},"component":{}}],["scanner",{"_index":183,"title":{"20":{}},"name":{},"text":{"1":{},"20":{}},"component":{}}],["scanner.beacons.len",{"_index":2335,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanner::merge_al",{"_index":2179,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanner::merge_all(new_scann",{"_index":2318,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanner::merge_all(scanners).unwrap",{"_index":2329,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanner::new(self.beacons.iter().map(|&p",{"_index":2276,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanners.as_ref",{"_index":2300,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanners.push(scanner::new(this_scanner_beacons.clon",{"_index":2323,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanners.split_first().unwrap",{"_index":2302,"title":{},"name":{},"text":{"20":{}},"component":{}}],["scanner’",{"_index":2337,"title":{},"name":{},"text":{"20":{}},"component":{}}],["schemat",{"_index":839,"title":{},"name":{},"text":{"9":{}},"component":{}}],["scheme",{"_index":875,"title":{},"name":{},"text":{"9":{}},"component":{}}],["score",{"_index":158,"title":{"11":{}},"name":{},"text":{"1":{},"11":{},"22":{}},"component":{}}],["scores.sort_unst",{"_index":1203,"title":{},"name":{},"text":{"11":{}},"component":{}}],["scores[scores.len",{"_index":1204,"title":{},"name":{},"text":{"11":{}},"component":{}}],["scrubber",{"_index":415,"title":{},"name":{},"text":{"4":{}},"component":{}}],["se",{"_index":1462,"title":{},"name":{},"text":{"15":{}},"component":{}}],["sea",{"_index":200,"title":{"26":{}},"name":{},"text":{"1":{}},"component":{}}],["seagarden",{"_index":2966,"title":{},"name":{},"text":{"26":{}},"component":{}}],["seagarden::from_str(input",{"_index":2988,"title":{},"name":{},"text":{"26":{}},"component":{}}],["search",{"_index":152,"title":{"9":{}},"name":{},"text":{"1":{},"24":{},"25":{}},"component":{}}],["second",{"_index":1334,"title":{},"name":{},"text":{"13":{},"15":{},"16":{},"17":{},"19":{}},"component":{}}],["second_po",{"_index":1524,"title":{},"name":{},"text":{"15":{}},"component":{}}],["second_pos)).or_default",{"_index":1528,"title":{},"name":{},"text":{"15":{}},"component":{}}],["section",{"_index":343,"title":{},"name":{},"text":{"4":{},"13":{}},"component":{}}],["see",{"_index":342,"title":{},"name":{},"text":{"4":{},"9":{},"11":{},"15":{},"16":{}},"component":{}}],["seen",{"_index":887,"title":{},"name":{},"text":{"9":{},"24":{}},"component":{}}],["seen.contains(&st",{"_index":2753,"title":{},"name":{},"text":{"24":{}},"component":{}}],["seen.insert(st",{"_index":2754,"title":{},"name":{},"text":{"24":{}},"component":{}}],["segment",{"_index":151,"title":{"9":{}},"name":{},"text":{"1":{},"9":{}},"component":{}}],["segment_union",{"_index":1012,"title":{},"name":{},"text":{"9":{}},"component":{}}],["segments.iter().filter(|&&b",{"_index":914,"title":{},"name":{},"text":{"9":{}},"component":{}}],["segments.map(|i",{"_index":937,"title":{},"name":{},"text":{"9":{}},"component":{}}],["segments[usize::from(i",{"_index":918,"title":{},"name":{},"text":{"9":{}},"component":{}}],["self",{"_index":530,"title":{},"name":{},"text":{"5":{},"9":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["self([0",{"_index":2256,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self([x[0",{"_index":2193,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self(entri",{"_index":2218,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.0",{"_index":1713,"title":{},"name":{},"text":{"17":{},"20":{}},"component":{}}],["self.0.iter().enumerate().map(|(i",{"_index":2708,"title":{},"name":{},"text":{"24":{}},"component":{}}],["self.0[3",{"_index":2204,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.0[i",{"_index":2207,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.0[self::index_for(am",{"_index":2710,"title":{},"name":{},"text":{"24":{}},"component":{}}],["self._bin_op(rh",{"_index":928,"title":{},"name":{},"text":{"9":{}},"component":{}}],["self.algo[index",{"_index":2378,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.algo[usize::try_from(to_decimal(surrounding_pixels)).unwrap",{"_index":2397,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.arr",{"_index":1225,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.arr.dim",{"_index":1101,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["self.arr.mapv_inplace(|x",{"_index":1222,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.arr[[base_row",{"_index":1232,"title":{},"name":{},"text":{"12":{}},"component":{}}],["self.arr[idx",{"_index":1100,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.arr[nghbr_idx",{"_index":1130,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.as_pair",{"_index":2085,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.beacon",{"_index":2288,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.beacons.union(&other.beacons).copied().collect",{"_index":2273,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.bound",{"_index":2617,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self.clon",{"_index":1389,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.cols[col",{"_index":536,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.depth",{"_index":2066,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.dot",{"_index":1385,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.dots.contains(&point(x",{"_index":1423,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self.down",{"_index":2981,"title":{},"name":{},"text":{"26":{}},"component":{}}],["self.downs.contains(&new_loc",{"_index":2977,"title":{},"name":{},"text":{"26":{}},"component":{}}],["self.edges[curr_cav",{"_index":1314,"title":{},"name":{},"text":{"13":{}},"component":{}}],["self.elem",{"_index":2010,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.elems.as_ref",{"_index":2064,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.explode_first().is_som",{"_index":2114,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.get_initial_char_pair_count",{"_index":1517,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.grid.keys().copied().sum",{"_index":556,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.grid.remove(&n",{"_index":548,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.h",{"_index":283,"title":{},"name":{},"text":{"3":{}},"component":{}}],["self.has_won",{"_index":534,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.height",{"_index":2982,"title":{},"name":{},"text":{"26":{}},"component":{}}],["self.intersection(oth",{"_index":2555,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self.is_lower_than_neighbors([r",{"_index":1108,"title":{},"name":{},"text":{"10":{}},"component":{}}],["self.mapping.get(&(c1",{"_index":1522,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.mat",{"_index":2399,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.mat.ncol",{"_index":2381,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.mat.nrow",{"_index":2382,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.mat[[r",{"_index":2384,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.max",{"_index":2459,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.min",{"_index":2460,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.n_rol",{"_index":2462,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.next",{"_index":2458,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.on_cuboid",{"_index":2623,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self.on_cuboids.iter().enumer",{"_index":2627,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self.on_cuboids.iter().skip(i",{"_index":2629,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self.on_cuboids.push(cuboid",{"_index":2620,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self.orientation.flip",{"_index":1160,"title":{},"name":{},"text":{"11":{}},"component":{}}],["self.posit",{"_index":2446,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.progress.handle_entry(r",{"_index":551,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.progress.has_won",{"_index":553,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.reduce_onc",{"_index":2117,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.registers[regist",{"_index":2850,"title":{},"name":{},"text":{"25":{}},"component":{}}],["self.right",{"_index":2974,"title":{},"name":{},"text":{"26":{}},"component":{}}],["self.rights.contains(&new_loc",{"_index":2976,"title":{},"name":{},"text":{"26":{}},"component":{}}],["self.roll_value(board",{"_index":2454,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.rotation_about_up",{"_index":2250,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.row(r",{"_index":2211,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.rows[row",{"_index":535,"title":{},"name":{},"text":{"5":{}},"component":{}}],["self.scor",{"_index":2448,"title":{},"name":{},"text":{"22":{}},"component":{}}],["self.split_first().is_som",{"_index":2115,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self.surround",{"_index":2383,"title":{},"name":{},"text":{"21":{}},"component":{}}],["self.template.len",{"_index":1511,"title":{},"name":{},"text":{"15":{}},"component":{}}],["self.tick",{"_index":2401,"title":{},"name":{},"text":{"21":{},"26":{}},"component":{}}],["self.til",{"_index":2760,"title":{},"name":{},"text":{"24":{}},"component":{}}],["self.tiles.nrow",{"_index":2758,"title":{},"name":{},"text":{"24":{}},"component":{}}],["self.translation.apply(self.swivel.apply(point",{"_index":2270,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.traverse_help",{"_index":1321,"title":{},"name":{},"text":{"13":{}},"component":{}}],["self.up_fac",{"_index":2242,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self.v",{"_index":284,"title":{},"name":{},"text":{"3":{}},"component":{}}],["self.width",{"_index":2975,"title":{},"name":{},"text":{"26":{}},"component":{}}],["self::by_adding_lines_in(input.lin",{"_index":2111,"title":{},"name":{},"text":{"19":{}},"component":{}}],["self::n_amphipods_per_kind",{"_index":2704,"title":{},"name":{},"text":{"24":{}},"component":{}}],["self::new(axis::posz",{"_index":2238,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self::new(seg",{"_index":919,"title":{},"name":{},"text":{"9":{}},"component":{}}],["self::new(self.segments.map(|b",{"_index":933,"title":{},"name":{},"text":{"9":{}},"component":{}}],["self::new(self.segments.zip(rhs.segments).map(|(x",{"_index":923,"title":{},"name":{},"text":{"9":{}},"component":{}}],["self::off",{"_index":2606,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self::on",{"_index":2605,"title":{},"name":{},"text":{"23":{}},"component":{}}],["self::output",{"_index":927,"title":{},"name":{},"text":{"9":{},"20":{},"24":{},"25":{}},"component":{}}],["self::x(valu",{"_index":1368,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self::y(valu",{"_index":1369,"title":{},"name":{},"text":{"14":{}},"component":{}}],["self[block.in_reg",{"_index":2852,"title":{},"name":{},"text":{"25":{}},"component":{}}],["self[regist",{"_index":2855,"title":{},"name":{},"text":{"25":{}},"component":{}}],["self_row",{"_index":2210,"title":{},"name":{},"text":{"20":{}},"component":{}}],["self_row[i",{"_index":2216,"title":{},"name":{},"text":{"20":{}},"component":{}}],["send",{"_index":847,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sens",{"_index":21,"title":{},"name":{},"text":{"1":{},"17":{},"24":{}},"component":{}}],["sensibl",{"_index":88,"title":{},"name":{},"text":{"1":{}},"component":{}}],["sent",{"_index":902,"title":{},"name":{},"text":{"9":{}},"component":{}}],["separ",{"_index":2359,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["sequenc",{"_index":1436,"title":{},"name":{},"text":{"15":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["sequenti",{"_index":2507,"title":{},"name":{},"text":{"23":{}},"component":{}}],["serv",{"_index":515,"title":{},"name":{},"text":{"5":{}},"component":{}}],["set",{"_index":523,"title":{},"name":{},"text":{"5":{},"9":{},"10":{},"13":{},"14":{},"16":{},"17":{},"19":{},"23":{},"25":{},"26":{}},"component":{}}],["set::new",{"_index":984,"title":{},"name":{},"text":{"9":{},"10":{},"14":{},"25":{},"26":{}},"component":{}}],["setup",{"_index":0,"title":{"1-1":{},"2-1":{},"3-1":{},"4-1":{},"5-1":{},"6-1":{},"7-1":{},"8-1":{},"9-1":{},"10-1":{},"11-1":{},"12-1":{},"13-1":{},"14-1":{},"15-1":{},"16-1":{},"17-1":{},"18-1":{},"19-1":{},"20-1":{},"21-1":{},"22-1":{},"23-1":{},"24-1":{},"25-1":{},"26-1":{}},"name":{},"text":{"4":{},"9":{},"13":{},"24":{},"25":{}},"component":{}}],["setup(&mut",{"_index":2859,"title":{},"name":{},"text":{"25":{}},"component":{}}],["seven",{"_index":150,"title":{"9":{}},"name":{},"text":{"1":{},"9":{},"22":{}},"component":{}}],["shape",{"_index":2900,"title":{},"name":{},"text":{"25":{}},"component":{}}],["share",{"_index":1694,"title":{},"name":{},"text":{"17":{},"20":{},"21":{}},"component":{}}],["shift",{"_index":710,"title":{},"name":{},"text":{"7":{}},"component":{}}],["shortcut",{"_index":751,"title":{},"name":{},"text":{"8":{}},"component":{}}],["shot",{"_index":178,"title":{"18":{}},"name":{},"text":{"1":{}},"component":{}}],["shouldn't",{"_index":1767,"title":{},"name":{},"text":{"17":{}},"component":{}}],["shrink",{"_index":2902,"title":{},"name":{},"text":{"25":{}},"component":{}}],["side",{"_index":811,"title":{},"name":{},"text":{"8":{},"22":{},"24":{}},"component":{}}],["sideroom(_",{"_index":2736,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sideroom(amphipodkind",{"_index":2715,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sideroom(amphipodkind::for_col(col",{"_index":2728,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sideroom_last_empty_row",{"_index":2791,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sideroom_max_row",{"_index":2757,"title":{},"name":{},"text":{"24":{}},"component":{}}],["siderooms_available_for_amphipod",{"_index":2778,"title":{},"name":{},"text":{"24":{}},"component":{}}],["siderooms_available_for_amphipods[am.kind",{"_index":2787,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sign",{"_index":1973,"title":{},"name":{},"text":{"18":{}},"component":{}}],["signific",{"_index":339,"title":{},"name":{},"text":{"4":{}},"component":{}}],["simpl",{"_index":1928,"title":{},"name":{},"text":{"18":{},"22":{},"25":{},"26":{}},"component":{}}],["simpli",{"_index":580,"title":{},"name":{},"text":{"5":{},"6":{},"8":{},"9":{},"15":{},"16":{},"18":{},"19":{},"20":{},"24":{},"25":{}},"component":{}}],["simplic",{"_index":2513,"title":{},"name":{},"text":{"23":{}},"component":{}}],["simplif",{"_index":2656,"title":{},"name":{},"text":{"24":{}},"component":{}}],["simul",{"_index":2419,"title":{},"name":{},"text":{"22":{}},"component":{}}],["singl",{"_index":1333,"title":{},"name":{},"text":{"13":{},"14":{},"15":{},"17":{},"19":{},"21":{},"23":{},"24":{}},"component":{}}],["singleamphipodst",{"_index":2747,"title":{},"name":{},"text":{"24":{}},"component":{}}],["singleton",{"_index":2051,"title":{},"name":{},"text":{"19":{}},"component":{}}],["six",{"_index":2163,"title":{},"name":{},"text":{"20":{},"23":{},"25":{}},"component":{}}],["size",{"_index":329,"title":{},"name":{},"text":{"4":{},"22":{},"24":{}},"component":{}}],["slightli",{"_index":1329,"title":{},"name":{},"text":{"13":{}},"component":{}}],["slope",{"_index":673,"title":{},"name":{},"text":{"6":{}},"component":{}}],["slow",{"_index":1860,"title":{},"name":{},"text":{"18":{}},"component":{}}],["small",{"_index":1075,"title":{},"name":{},"text":{"10":{},"13":{},"23":{},"25":{}},"component":{}}],["smaller",{"_index":816,"title":{},"name":{},"text":{"8":{},"25":{}},"component":{}}],["smallest",{"_index":2910,"title":{},"name":{},"text":{"25":{}},"component":{}}],["smoke",{"_index":154,"title":{"10":{}},"name":{},"text":{"1":{}},"component":{}}],["sn1",{"_index":2133,"title":{},"name":{},"text":{"19":{}},"component":{}}],["sn1.add(sn2).magnitud",{"_index":2138,"title":{},"name":{},"text":{"19":{}},"component":{}}],["sn2",{"_index":2135,"title":{},"name":{},"text":{"19":{}},"component":{}}],["sn2.add(sn1).magnitud",{"_index":2140,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snail",{"_index":2121,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snail_num",{"_index":2125,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snail_num.magnitud",{"_index":2129,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snail_nums.iter().enumer",{"_index":2134,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snail_nums.iter().skip(i",{"_index":2136,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailfish",{"_index":180,"title":{"19":{}},"name":{},"text":{"1":{}},"component":{}}],["snailnum",{"_index":2004,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnum::borrowing(left",{"_index":2076,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnum::borrowing(right",{"_index":2077,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnum::owning(addend",{"_index":2105,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnumborrow",{"_index":2092,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnumown",{"_index":2044,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnumowned::from_line(lines.next().unwrap().as_ref",{"_index":2109,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnumowned::from_str(input",{"_index":2126,"title":{},"name":{},"text":{"19":{}},"component":{}}],["snailnumowned::owning(elem",{"_index":2047,"title":{},"name":{},"text":{"19":{}},"component":{}}],["soln",{"_index":214,"title":{},"name":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"text":{},"component":{}}],["solut",{"_index":2,"title":{"1-2":{}},"name":{},"text":{"1":{},"2":{},"5":{},"8":{},"9":{},"16":{},"17":{},"18":{},"20":{},"24":{},"25":{}},"component":{}}],["solv",{"_index":79,"title":{},"name":{},"text":{"1":{},"16":{},"18":{},"20":{},"24":{}},"component":{}}],["solvabl",{"_index":2649,"title":{},"name":{},"text":{"24":{}},"component":{}}],["solve(&self",{"_index":2743,"title":{},"name":{},"text":{"24":{}},"component":{}}],["some(&c",{"_index":1521,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some(&prev",{"_index":1171,"title":{},"name":{},"text":{"11":{}},"component":{}}],["some(((i1",{"_index":2022,"title":{},"name":{},"text":{"19":{}},"component":{}}],["some((i",{"_index":2033,"title":{},"name":{},"text":{"19":{},"22":{}},"component":{}}],["some((in_digit",{"_index":1038,"title":{},"name":{},"text":{"9":{}},"component":{}}],["some((k",{"_index":1520,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some((new_row",{"_index":1607,"title":{},"name":{},"text":{"16":{}},"component":{}}],["some((pap",{"_index":1400,"title":{},"name":{},"text":{"14":{}},"component":{}}],["some((std::iter::once(transform).chain(transforms).collect",{"_index":2320,"title":{},"name":{},"text":{"20":{}},"component":{}}],["some((total_st",{"_index":2765,"title":{},"name":{},"text":{"24":{}},"component":{}}],["some((transform",{"_index":2319,"title":{},"name":{},"text":{"20":{}},"component":{}}],["some((vec![transform::ident",{"_index":2305,"title":{},"name":{},"text":{"20":{}},"component":{}}],["some(2",{"_index":2008,"title":{},"name":{},"text":{"19":{}},"component":{}}],["some([intersection_span[1",{"_index":2554,"title":{},"name":{},"text":{"23":{}},"component":{}}],["some([my_span[0",{"_index":2549,"title":{},"name":{},"text":{"23":{}},"component":{}}],["some(arg",{"_index":1834,"title":{},"name":{},"text":{"17":{}},"component":{}}],["some(arg_stack.first()?.valu",{"_index":1837,"title":{},"name":{},"text":{"17":{}},"component":{}}],["some(base_row",{"_index":1234,"title":{},"name":{},"text":{"12":{}},"component":{}}],["some(block",{"_index":2875,"title":{},"name":{},"text":{"25":{}},"component":{}}],["some(bound",{"_index":2616,"title":{},"name":{},"text":{"23":{}},"component":{}}],["some(c",{"_index":1106,"title":{},"name":{},"text":{"10":{},"23":{}},"component":{}}],["some(center_row",{"_index":2394,"title":{},"name":{},"text":{"21":{}},"component":{}}],["some(coord",{"_index":549,"title":{},"name":{},"text":{"5":{}},"component":{}}],["some(cuboid",{"_index":2581,"title":{},"name":{},"text":{"23":{}},"component":{}}],["some(curr_depth",{"_index":2073,"title":{},"name":{},"text":{"19":{}},"component":{}}],["some(endpointpair(point(x1",{"_index":638,"title":{},"name":{},"text":{"6":{}},"component":{}}],["some(first_idx",{"_index":1120,"title":{},"name":{},"text":{"10":{}},"component":{}}],["some(i",{"_index":471,"title":{},"name":{},"text":{"4":{}},"component":{}}],["some(idx",{"_index":1125,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["some(intersection_span",{"_index":2550,"title":{},"name":{},"text":{"23":{}},"component":{}}],["some(match",{"_index":290,"title":{},"name":{},"text":{"3":{},"11":{},"14":{},"23":{},"24":{},"25":{}},"component":{}}],["some(merged_cuboid",{"_index":2595,"title":{},"name":{},"text":{"23":{}},"component":{}}],["some(n_increas",{"_index":260,"title":{},"name":{},"text":{"2":{}},"component":{}}],["some(parse_st",{"_index":1728,"title":{},"name":{},"text":{"17":{}},"component":{}}],["some(point(x",{"_index":1397,"title":{},"name":{},"text":{"14":{}},"component":{}}],["some(polym",{"_index":1508,"title":{},"name":{},"text":{"15":{}},"component":{}}],["some(prev_depth",{"_index":2079,"title":{},"name":{},"text":{"19":{}},"component":{}}],["some(r",{"_index":1105,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{}}],["some(register::from_str(splat.next",{"_index":2869,"title":{},"name":{},"text":{"25":{}},"component":{}}],["some(s.borrow",{"_index":2316,"title":{},"name":{},"text":{"20":{}},"component":{}}],["some(scann",{"_index":2328,"title":{},"name":{},"text":{"20":{}},"component":{}}],["some(scor",{"_index":1202,"title":{},"name":{},"text":{"11":{}},"component":{}}],["some(self",{"_index":573,"title":{},"name":{},"text":{"5":{},"10":{},"11":{},"12":{},"13":{},"21":{},"23":{},"24":{}},"component":{}}],["some(self.cmp(oth",{"_index":2691,"title":{},"name":{},"text":{"24":{}},"component":{}}],["some(split_idx",{"_index":2040,"title":{},"name":{},"text":{"19":{}},"component":{}}],["some(sqrt",{"_index":1898,"title":{},"name":{},"text":{"18":{}},"component":{}}],["some(step",{"_index":304,"title":{},"name":{},"text":{"3":{}},"component":{}}],["some(this_board.len",{"_index":572,"title":{},"name":{},"text":{"5":{}},"component":{}}],["some(tim",{"_index":719,"title":{},"name":{},"text":{"7":{}},"component":{}}],["some(turn",{"_index":2489,"title":{},"name":{},"text":{"22":{}},"component":{}}],["some(upd",{"_index":2796,"title":{},"name":{},"text":{"24":{}},"component":{}}],["some(usize::from(x",{"_index":463,"title":{},"name":{},"text":{"4":{}},"component":{}}],["some(v",{"_index":1985,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["some(velo",{"_index":1938,"title":{},"name":{},"text":{"18":{}},"component":{}}],["some(vx",{"_index":1944,"title":{},"name":{},"text":{"18":{}},"component":{}}],["someon",{"_index":1495,"title":{},"name":{},"text":{"15":{}},"component":{}}],["someth",{"_index":2825,"title":{},"name":{},"text":{"25":{}},"component":{}}],["somewhat",{"_index":2049,"title":{},"name":{},"text":{"19":{}},"component":{}}],["somewher",{"_index":2667,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sonar",{"_index":132,"title":{"2":{}},"name":{},"text":{"1":{}},"component":{}}],["sourc",{"_index":1260,"title":{},"name":{},"text":{"13":{}},"component":{}}],["space",{"_index":2506,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span",{"_index":2528,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span1",{"_index":2546,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span1[0].max(span2[0",{"_index":2542,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span1[1].min(span2[1",{"_index":2543,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span2",{"_index":2540,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span3",{"_index":2551,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span[0",{"_index":2530,"title":{},"name":{},"text":{"23":{}},"component":{}}],["span_intersection(span1",{"_index":2539,"title":{},"name":{},"text":{"23":{}},"component":{}}],["speak",{"_index":2655,"title":{},"name":{},"text":{"24":{}},"component":{}}],["special",{"_index":225,"title":{},"name":{},"text":{"2":{}},"component":{}}],["specif",{"_index":889,"title":{},"name":{},"text":{"9":{},"15":{},"25":{}},"component":{}}],["specifi",{"_index":1440,"title":{},"name":{},"text":{"15":{},"17":{}},"component":{}}],["speed",{"_index":1569,"title":{},"name":{},"text":{"16":{},"18":{}},"component":{}}],["splat",{"_index":1299,"title":{},"name":{},"text":{"13":{},"15":{},"25":{}},"component":{}}],["splat.next",{"_index":1300,"title":{},"name":{},"text":{"13":{},"25":{}},"component":{}}],["splat.next()?.char",{"_index":1503,"title":{},"name":{},"text":{"15":{}},"component":{}}],["splat.next()?.chars().next",{"_index":1506,"title":{},"name":{},"text":{"15":{}},"component":{}}],["splat.parse().ok",{"_index":2603,"title":{},"name":{},"text":{"23":{}},"component":{}}],["split",{"_index":559,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"17":{},"19":{},"23":{}},"component":{}}],["split_ascii_whitespac",{"_index":1029,"title":{},"name":{},"text":{"9":{}},"component":{}}],["split_first",{"_index":2119,"title":{},"name":{},"text":{"19":{}},"component":{}}],["split_idx",{"_index":2030,"title":{},"name":{},"text":{"19":{}},"component":{}}],["spot",{"_index":2664,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sqrt",{"_index":1896,"title":{},"name":{},"text":{"18":{}},"component":{}}],["sqrt(discriminant).and_then(|sqrt_disc",{"_index":1947,"title":{},"name":{},"text":{"18":{}},"component":{}}],["sqrt_disc",{"_index":1948,"title":{},"name":{},"text":{"18":{}},"component":{}}],["squar",{"_index":804,"title":{},"name":{},"text":{"8":{},"11":{},"18":{},"24":{}},"component":{}}],["squid",{"_index":84,"title":{"5":{}},"name":{},"text":{"1":{}},"component":{}}],["src/lib.r",{"_index":103,"title":{},"name":{},"text":{"1":{}},"component":{}}],["src/utils.r",{"_index":104,"title":{},"name":{},"text":{"1":{}},"component":{}}],["stack",{"_index":1142,"title":{},"name":{},"text":{"11":{},"13":{},"17":{},"19":{}},"component":{}}],["stack.pop",{"_index":1729,"title":{},"name":{},"text":{"17":{}},"component":{}}],["stack.push(parsest",{"_index":1743,"title":{},"name":{},"text":{"17":{}},"component":{}}],["stage",{"_index":441,"title":{},"name":{},"text":{"4":{},"15":{},"23":{},"24":{}},"component":{}}],["standpoint",{"_index":1672,"title":{},"name":{},"text":{"17":{}},"component":{}}],["start",{"_index":1303,"title":{},"name":{},"text":{"13":{},"15":{},"20":{},"21":{},"24":{},"25":{}},"component":{}}],["state",{"_index":276,"title":{},"name":{},"text":{"3":{},"12":{},"17":{},"21":{},"23":{},"24":{}},"component":{}}],["state.is_don",{"_index":2786,"title":{},"name":{},"text":{"24":{}},"component":{}}],["state.loc",{"_index":2774,"title":{},"name":{},"text":{"24":{}},"component":{}}],["state::from_str(str_comps.next",{"_index":2610,"title":{},"name":{},"text":{"23":{}},"component":{}}],["state::off",{"_index":2621,"title":{},"name":{},"text":{"23":{}},"component":{}}],["state::on",{"_index":2619,"title":{},"name":{},"text":{"23":{}},"component":{}}],["statement",{"_index":1667,"title":{},"name":{},"text":{"17":{},"24":{}},"component":{}}],["static",{"_index":2674,"title":{},"name":{},"text":{"24":{}},"component":{}}],["statist",{"_index":749,"title":{},"name":{},"text":{"8":{}},"component":{}}],["std",{"_index":520,"title":{},"name":{},"text":{"5":{},"24":{},"25":{}},"component":{}}],["std::cmp::ord",{"_index":2685,"title":{},"name":{},"text":{"24":{}},"component":{}}],["std::cmp::order",{"_index":2687,"title":{},"name":{},"text":{"24":{}},"component":{}}],["std::cmp::partialord",{"_index":2689,"title":{},"name":{},"text":{"24":{}},"component":{}}],["std::cmp::reverse(s",{"_index":1138,"title":{},"name":{},"text":{"10":{}},"component":{}}],["std::cmp::reverse(self.0).cmp(&std::cmp::reverse(other.0",{"_index":2688,"title":{},"name":{},"text":{"24":{}},"component":{}}],["std::collections::btreemap",{"_index":1288,"title":{},"name":{},"text":{"13":{},"15":{}},"component":{}}],["std::collections::btreeset",{"_index":1078,"title":{},"name":{},"text":{"10":{}},"component":{}}],["std::collections::vecdequ",{"_index":247,"title":{},"name":{},"text":{"2":{}},"component":{}}],["std::collections::{btree_map::entri",{"_index":948,"title":{},"name":{},"text":{"9":{}},"component":{}}],["std::fmt::formatt",{"_index":1415,"title":{},"name":{},"text":{"14":{}},"component":{}}],["std::fmt::result",{"_index":1416,"title":{},"name":{},"text":{"14":{},"17":{}},"component":{}}],["std::fmt::{debug",{"_index":2091,"title":{},"name":{},"text":{"19":{}},"component":{}}],["std::fmt::{display",{"_index":1704,"title":{},"name":{},"text":{"17":{},"21":{}},"component":{}}],["std::iter::once(&merged_scann",{"_index":2314,"title":{},"name":{},"text":{"20":{}},"component":{}}],["std::iter::once(0).collect",{"_index":2941,"title":{},"name":{},"text":{"25":{}},"component":{}}],["std::iter::once(first_line).chain(lin",{"_index":360,"title":{},"name":{},"text":{"4":{}},"component":{}}],["std::ops::bitand",{"_index":929,"title":{},"name":{},"text":{"9":{}},"component":{}}],["std::ops::bitor",{"_index":925,"title":{},"name":{},"text":{"9":{}},"component":{}}],["std::ops::index",{"_index":2222,"title":{},"name":{},"text":{"20":{},"24":{}},"component":{}}],["std::ops::indexmut",{"_index":2711,"title":{},"name":{},"text":{"24":{}},"component":{}}],["std::ops::not",{"_index":931,"title":{},"name":{},"text":{"9":{}},"component":{}}],["std::{borrow::borrow",{"_index":2182,"title":{},"name":{},"text":{"20":{}},"component":{}}],["std::{collections::btreemap",{"_index":617,"title":{},"name":{},"text":{"6":{}},"component":{}}],["std::{collections::btreeset",{"_index":2965,"title":{},"name":{},"text":{"26":{}},"component":{}}],["step",{"_index":295,"title":{},"name":{},"text":{"3":{},"6":{},"15":{},"18":{},"20":{},"21":{},"23":{}},"component":{}}],["step.borrow",{"_index":315,"title":{},"name":{},"text":{"3":{}},"component":{}}],["stepping_from(&self",{"_index":1597,"title":{},"name":{},"text":{"16":{}},"component":{}}],["still",{"_index":41,"title":{},"name":{},"text":{"1":{},"2":{},"9":{}},"component":{}}],["stop",{"_index":442,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["store",{"_index":497,"title":{},"name":{},"text":{"5":{},"7":{},"15":{},"19":{},"21":{},"23":{}},"component":{}}],["str",{"_index":249,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["str::fromstr",{"_index":524,"title":{},"name":{},"text":{"5":{},"6":{}},"component":{}}],["str_comp",{"_index":2608,"title":{},"name":{},"text":{"23":{}},"component":{}}],["straight",{"_index":56,"title":{},"name":{},"text":{"1":{}},"component":{}}],["strategi",{"_index":880,"title":{},"name":{},"text":{"9":{}},"component":{}}],["stream",{"_index":848,"title":{},"name":{},"text":{"9":{},"11":{},"17":{}},"component":{}}],["strict",{"_index":43,"title":{},"name":{},"text":{"1":{}},"component":{}}],["string",{"_index":1429,"title":{},"name":{},"text":{"14":{},"15":{},"17":{},"25":{}},"component":{}}],["strs.trim",{"_index":1028,"title":{},"name":{},"text":{"9":{}},"component":{}}],["struct",{"_index":277,"title":{},"name":{},"text":{"3":{},"5":{},"6":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["structur",{"_index":1567,"title":{},"name":{},"text":{"16":{},"19":{}},"component":{}}],["strum::intoenumiter",{"_index":2184,"title":{},"name":{},"text":{"20":{}},"component":{}}],["strum_macros::enumit",{"_index":2185,"title":{},"name":{},"text":{"20":{}},"component":{}}],["submarin",{"_index":83,"title":{},"name":{},"text":{"1":{}},"component":{}}],["submiss",{"_index":1489,"title":{},"name":{},"text":{"15":{}},"component":{}}],["submit",{"_index":1492,"title":{},"name":{},"text":{"15":{}},"component":{}}],["suboptim",{"_index":1575,"title":{},"name":{},"text":{"16":{}},"component":{}}],["subreddit",{"_index":1840,"title":{},"name":{},"text":{"18":{}},"component":{}}],["subtract",{"_index":898,"title":{},"name":{},"text":{"9":{},"15":{},"17":{},"23":{}},"component":{}}],["success",{"_index":433,"title":{},"name":{},"text":{"4":{},"20":{}},"component":{}}],["successfulli",{"_index":2181,"title":{},"name":{},"text":{"20":{}},"component":{}}],["such",{"_index":656,"title":{},"name":{},"text":{"6":{},"16":{},"18":{},"25":{}},"component":{}}],["suffer",{"_index":1856,"title":{},"name":{},"text":{"18":{},"19":{}},"component":{}}],["suffici",{"_index":2156,"title":{},"name":{},"text":{"20":{}},"component":{}}],["sum",{"_index":223,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"6":{},"8":{},"9":{},"10":{},"11":{},"16":{},"17":{},"19":{},"22":{}},"component":{}}],["summari",{"_index":1790,"title":{},"name":{},"text":{"17":{}},"component":{}}],["suppos",{"_index":891,"title":{},"name":{},"text":{"9":{}},"component":{}}],["surround",{"_index":2356,"title":{},"name":{},"text":{"21":{}},"component":{}}],["surrounding_pixel",{"_index":2391,"title":{},"name":{},"text":{"21":{}},"component":{}}],["surrounding_pixels.push(bit",{"_index":2396,"title":{},"name":{},"text":{"21":{}},"component":{}}],["surrounding_row",{"_index":2392,"title":{},"name":{},"text":{"21":{}},"component":{}}],["suspect",{"_index":1562,"title":{},"name":{},"text":{"16":{}},"component":{}}],["sweep",{"_index":133,"title":{"2":{}},"name":{},"text":{"1":{}},"component":{}}],["switch",{"_index":1335,"title":{},"name":{},"text":{"13":{},"21":{},"23":{}},"component":{}}],["swivel",{"_index":2166,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swivel::ident",{"_index":2268,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swivel::new(axis::posz",{"_index":2267,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swivel::new(up_fac",{"_index":2282,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swiveled_oth",{"_index":2283,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swiveled_other.applying(transl",{"_index":2293,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swiveled_other.beacon",{"_index":2286,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swiveled_other_beacon",{"_index":2285,"title":{},"name":{},"text":{"20":{}},"component":{}}],["swiveled_other_beacon[i",{"_index":2291,"title":{},"name":{},"text":{"20":{}},"component":{}}],["syntax",{"_index":157,"title":{"11":{}},"name":{},"text":{"1":{}},"component":{}}],["system",{"_index":1259,"title":{},"name":{},"text":{"13":{}},"component":{}}],["t",{"_index":538,"title":{},"name":{},"text":{"5":{},"6":{},"11":{},"14":{},"18":{},"20":{},"24":{}},"component":{}}],["t(e1),…,t(en)t(e_1",{"_index":2172,"title":{},"name":{},"text":{"20":{}},"component":{}}],["t(e_n)t(e1​),…,t(en",{"_index":2174,"title":{},"name":{},"text":{"20":{}},"component":{}}],["t*(t",{"_index":1957,"title":{},"name":{},"text":{"18":{}},"component":{}}],["t,x,y)(t,x,y)(t,x,i",{"_index":1925,"title":{},"name":{},"text":{"18":{}},"component":{}}],["t.brace",{"_index":1192,"title":{},"name":{},"text":{"11":{}},"component":{}}],["t.flip()).collect",{"_index":1181,"title":{},"name":{},"text":{"11":{}},"component":{}}],["t.translation).collect",{"_index":2331,"title":{},"name":{},"text":{"20":{}},"component":{}}],["t=vxt=v_xt=vx",{"_index":1919,"title":{},"name":{},"text":{"18":{}},"component":{}}],["take",{"_index":885,"title":{},"name":{},"text":{"9":{},"18":{},"24":{},"25":{}},"component":{}}],["take_while(|lin",{"_index":1393,"title":{},"name":{},"text":{"14":{}},"component":{}}],["taken",{"_index":55,"title":{},"name":{},"text":{"1":{}},"component":{}}],["talli",{"_index":1454,"title":{},"name":{},"text":{"15":{},"22":{}},"component":{}}],["tally[player_index",{"_index":2498,"title":{},"name":{},"text":{"22":{}},"component":{}}],["target",{"_index":1872,"title":{},"name":{},"text":{"18":{}},"component":{}}],["technic",{"_index":2154,"title":{},"name":{},"text":{"20":{}},"component":{}}],["tell",{"_index":877,"title":{},"name":{},"text":{"9":{},"15":{},"17":{},"25":{}},"component":{}}],["templat",{"_index":1500,"title":{},"name":{},"text":{"15":{}},"component":{}}],["tend",{"_index":61,"title":{},"name":{},"text":{"1":{}},"component":{}}],["tent",{"_index":1576,"title":{},"name":{},"text":{"16":{}},"component":{}}],["test",{"_index":1488,"title":{},"name":{},"text":{"15":{}},"component":{}}],["text",{"_index":510,"title":{},"name":{},"text":{"5":{},"25":{}},"component":{}}],["text{al",{"_index":386,"title":{},"name":{},"text":{"4":{}},"component":{}}],["thank",{"_index":2673,"title":{},"name":{},"text":{"24":{}},"component":{}}],["thankfulli",{"_index":1460,"title":{},"name":{},"text":{"15":{},"20":{},"22":{}},"component":{}}],["that'",{"_index":1639,"title":{},"name":{},"text":{"16":{}},"component":{}}],["that’",{"_index":1844,"title":{},"name":{},"text":{"18":{}},"component":{}}],["themselv",{"_index":2362,"title":{},"name":{},"text":{"21":{}},"component":{}}],["theoret",{"_index":71,"title":{},"name":{},"text":{"1":{},"16":{},"17":{}},"component":{}}],["theori",{"_index":1766,"title":{},"name":{},"text":{"17":{}},"component":{}}],["therefor",{"_index":18,"title":{},"name":{},"text":{"1":{},"18":{},"21":{},"24":{}},"component":{}}],["there’",{"_index":1679,"title":{},"name":{},"text":{"17":{}},"component":{}}],["they'r",{"_index":1000,"title":{},"name":{},"text":{"9":{}},"component":{}}],["thing",{"_index":326,"title":{},"name":{},"text":{"4":{},"9":{},"10":{},"14":{},"25":{}},"component":{}}],["this_beacon",{"_index":2287,"title":{},"name":{},"text":{"20":{}},"component":{}}],["this_beacon[i",{"_index":2290,"title":{},"name":{},"text":{"20":{}},"component":{}}],["this_board",{"_index":562,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this_board.clear",{"_index":568,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this_board.is_empti",{"_index":564,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this_board.push(num",{"_index":570,"title":{},"name":{},"text":{"5":{}},"component":{}}],["this_dest_n_visit",{"_index":1316,"title":{},"name":{},"text":{"13":{}},"component":{}}],["this_scanner_beacon",{"_index":2321,"title":{},"name":{},"text":{"20":{}},"component":{}}],["this_scanner_beacons.clear",{"_index":2324,"title":{},"name":{},"text":{"20":{}},"component":{}}],["this_scanner_beacons.insert([x",{"_index":2327,"title":{},"name":{},"text":{"20":{}},"component":{}}],["those",{"_index":74,"title":{},"name":{},"text":{"1":{},"4":{},"5":{},"6":{},"9":{},"13":{},"15":{},"19":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["though",{"_index":1917,"title":{},"name":{},"text":{"18":{}},"component":{}}],["thought",{"_index":1493,"title":{},"name":{},"text":{"15":{}},"component":{}}],["three",{"_index":895,"title":{},"name":{},"text":{"9":{},"17":{},"20":{},"22":{},"23":{}},"component":{}}],["threequart",{"_index":2234,"title":{},"name":{},"text":{"20":{}},"component":{}}],["through",{"_index":746,"title":{},"name":{},"text":{"8":{},"10":{},"13":{},"15":{},"16":{},"22":{},"24":{},"25":{}},"component":{}}],["throughout",{"_index":1348,"title":{},"name":{},"text":{"14":{}},"component":{}}],["thrown",{"_index":52,"title":{},"name":{},"text":{"1":{}},"component":{}}],["thu",{"_index":2364,"title":{},"name":{},"text":{"21":{}},"component":{}}],["ti",{"_index":382,"title":{},"name":{},"text":{"4":{}},"component":{}}],["tick",{"_index":1858,"title":{},"name":{},"text":{"18":{}},"component":{}}],["tick(&mut",{"_index":2374,"title":{},"name":{},"text":{"21":{},"26":{}},"component":{}}],["tick(256",{"_index":737,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tick(80",{"_index":734,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tick(mut",{"_index":1238,"title":{},"name":{},"text":{"12":{}},"component":{}}],["tick(n_tim",{"_index":727,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tick(octopi",{"_index":1242,"title":{},"name":{},"text":{"12":{}},"component":{}}],["tick_in_place(&mut",{"_index":729,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tick_in_place(tim",{"_index":720,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tick_in_place_and_count_flashes(&mut",{"_index":1214,"title":{},"name":{},"text":{"12":{}},"component":{}}],["tick_n_times(&mut",{"_index":2400,"title":{},"name":{},"text":{"21":{}},"component":{}}],["tie",{"_index":436,"title":{},"name":{},"text":{"4":{}},"component":{}}],["tile",{"_index":2713,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tile::doorway",{"_index":2806,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tile::sideroom(am.kind",{"_index":2772,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tile::wal",{"_index":2805,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tiles[[row",{"_index":2737,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tiles[new_loc",{"_index":2804,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tiles[state.loc",{"_index":2771,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tiles_map",{"_index":2719,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tiles_map.get(&(row",{"_index":2731,"title":{},"name":{},"text":{"24":{}},"component":{}}],["tiles_map.insert((row",{"_index":2729,"title":{},"name":{},"text":{"24":{}},"component":{}}],["time",{"_index":590,"title":{},"name":{},"text":{"5":{},"6":{},"13":{},"15":{},"16":{},"17":{},"18":{},"22":{}},"component":{}}],["timer",{"_index":715,"title":{},"name":{},"text":{"7":{}},"component":{}}],["timers).iter().sum",{"_index":735,"title":{},"name":{},"text":{"7":{}},"component":{}}],["timers[0",{"_index":721,"title":{},"name":{},"text":{"7":{}},"component":{}}],["timers[6",{"_index":725,"title":{},"name":{},"text":{"7":{}},"component":{}}],["timers[8",{"_index":724,"title":{},"name":{},"text":{"7":{}},"component":{}}],["timers[i",{"_index":723,"title":{},"name":{},"text":{"7":{}},"component":{}}],["timers[num",{"_index":718,"title":{},"name":{},"text":{"7":{}},"component":{}}],["tini",{"_index":2669,"title":{},"name":{},"text":{"24":{}},"component":{}}],["to_big_decimal(&packet_bits[0..3",{"_index":1735,"title":{},"name":{},"text":{"17":{}},"component":{}}],["to_big_decimal(&packet_bits[3..6",{"_index":1737,"title":{},"name":{},"text":{"17":{}},"component":{}}],["to_big_decimal>(binary_digits_msbf",{"_index":124,"title":{},"name":{},"text":{"1":{}},"component":{}}],["to_decimal(col_has_more_ones_than_zeros.to_vec",{"_index":412,"title":{},"name":{},"text":{"4":{}},"component":{}}],["to_decimal(line.to_vec",{"_index":473,"title":{},"name":{},"text":{"4":{}},"component":{}}],["to_decimal>(binary_digits_msbf",{"_index":109,"title":{},"name":{},"text":{"1":{}},"component":{}}],["togeth",{"_index":2146,"title":{},"name":{},"text":{"20":{},"23":{}},"component":{}}],["token",{"_index":1141,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_scor",{"_index":1201,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_stack",{"_index":1166,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_stack.is_empti",{"_index":1178,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_stack.iter().rev().map(|t",{"_index":1180,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_stack.last",{"_index":1169,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_stack.pop",{"_index":1177,"title":{},"name":{},"text":{"11":{}},"component":{}}],["token_stack.push(curr",{"_index":1170,"title":{},"name":{},"text":{"11":{}},"component":{}}],["tokenizationerr",{"_index":1161,"title":{},"name":{},"text":{"11":{}},"component":{}}],["tokens_it",{"_index":300,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tokens_iter.next()?.parse().ok",{"_index":303,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ton",{"_index":205,"title":{},"name":{},"text":{"1":{}},"component":{}}],["took",{"_index":1558,"title":{},"name":{},"text":{"16":{},"17":{}},"component":{}}],["top",{"_index":1144,"title":{},"name":{},"text":{"11":{},"16":{},"19":{}},"component":{}}],["total",{"_index":1557,"title":{},"name":{},"text":{"16":{}},"component":{}}],["total_st",{"_index":2768,"title":{},"name":{},"text":{"24":{}},"component":{}}],["total_state.iter_item",{"_index":2776,"title":{},"name":{},"text":{"24":{}},"component":{}}],["total_state.iter_items().find_map(|(am",{"_index":2785,"title":{},"name":{},"text":{"24":{}},"component":{}}],["toward",{"_index":770,"title":{},"name":{},"text":{"8":{},"24":{}},"component":{}}],["track",{"_index":492,"title":{},"name":{},"text":{"5":{},"14":{},"15":{},"17":{},"20":{}},"component":{}}],["traj",{"_index":1995,"title":{},"name":{},"text":{"18":{}},"component":{}}],["traj.borrow",{"_index":1996,"title":{},"name":{},"text":{"18":{}},"component":{}}],["traj.velo.vi",{"_index":1997,"title":{},"name":{},"text":{"18":{}},"component":{}}],["trajectori",{"_index":1887,"title":{},"name":{},"text":{"18":{}},"component":{}}],["trajectories.push(trajectori",{"_index":1989,"title":{},"name":{},"text":{"18":{}},"component":{}}],["transform",{"_index":1437,"title":{},"name":{},"text":{"15":{},"20":{},"21":{}},"component":{}}],["transform.apply(p)).collect",{"_index":2277,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transform.into",{"_index":2275,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transformation’",{"_index":2338,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transformed_oth",{"_index":2292,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transformed_scann",{"_index":2309,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transforms.insert(transform",{"_index":2296,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transforms.iter().map(|t",{"_index":2330,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translat",{"_index":2167,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translate_line_to_digit",{"_index":1039,"title":{},"name":{},"text":{"9":{}},"component":{}}],["translate_line_to_digits((in_d.it",{"_index":1049,"title":{},"name":{},"text":{"9":{}},"component":{}}],["translation([0",{"_index":2265,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation([x2",{"_index":2350,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation(tripl",{"_index":2255,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation1",{"_index":2342,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation1.0",{"_index":2345,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation2",{"_index":2346,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation2.0",{"_index":2349,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translation::ident",{"_index":2269,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translations.as_ref",{"_index":2340,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translations.iter().enumer",{"_index":2343,"title":{},"name":{},"text":{"20":{}},"component":{}}],["translations.iter().skip(i",{"_index":2347,"title":{},"name":{},"text":{"20":{}},"component":{}}],["transpar",{"_index":166,"title":{"14":{}},"name":{},"text":{"1":{},"14":{}},"component":{}}],["travers",{"_index":1278,"title":{},"name":{},"text":{"13":{},"16":{},"19":{}},"component":{}}],["traversal_cost(&grid",{"_index":1657,"title":{},"name":{},"text":{"16":{}},"component":{}}],["traversal_cost(entry_cost",{"_index":1608,"title":{},"name":{},"text":{"16":{}},"component":{}}],["traversal_cost(grid",{"_index":1625,"title":{},"name":{},"text":{"16":{}},"component":{}}],["traverse(&'a",{"_index":1324,"title":{},"name":{},"text":{"13":{}},"component":{}}],["traverse_help",{"_index":1307,"title":{},"name":{},"text":{"13":{}},"component":{}}],["treacheri",{"_index":147,"title":{"8":{}},"name":{},"text":{"1":{}},"component":{}}],["tree",{"_index":1665,"title":{},"name":{},"text":{"17":{},"19":{}},"component":{}}],["trench",{"_index":185,"title":{"21":{}},"name":{},"text":{"1":{}},"component":{}}],["tri",{"_index":78,"title":{},"name":{},"text":{"1":{},"8":{},"9":{},"18":{},"20":{},"25":{}},"component":{}}],["trick",{"_index":177,"title":{"18":{}},"name":{},"text":{"1":{}},"component":{}}],["tricki",{"_index":1693,"title":{},"name":{},"text":{"17":{},"19":{}},"component":{}}],["trillion",{"_index":1453,"title":{},"name":{},"text":{"15":{}},"component":{}}],["trim",{"_index":716,"title":{},"name":{},"text":{"7":{},"22":{}},"component":{}}],["tripl",{"_index":1469,"title":{},"name":{},"text":{"15":{},"20":{}},"component":{}}],["trivial",{"_index":1664,"title":{},"name":{},"text":{"17":{}},"component":{}}],["true",{"_index":332,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"19":{},"21":{},"22":{},"24":{},"26":{}},"component":{}}],["trust",{"_index":54,"title":{},"name":{},"text":{"1":{},"25":{}},"component":{}}],["trustworthi",{"_index":1781,"title":{},"name":{},"text":{"17":{}},"component":{}}],["try_into",{"_index":2442,"title":{},"name":{},"text":{"22":{},"23":{},"24":{}},"component":{}}],["ts_and_vi",{"_index":1983,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ttt",{"_index":1901,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["turn",{"_index":884,"title":{},"name":{},"text":{"9":{},"22":{},"23":{},"24":{}},"component":{}}],["turn_stack",{"_index":2479,"title":{},"name":{},"text":{"22":{}},"component":{}}],["turn_stack.pop",{"_index":2491,"title":{},"name":{},"text":{"22":{}},"component":{}}],["turn_stack.push(turn",{"_index":2499,"title":{},"name":{},"text":{"22":{}},"component":{}}],["twice",{"_index":1465,"title":{},"name":{},"text":{"15":{}},"component":{}}],["two",{"_index":235,"title":{},"name":{},"text":{"2":{},"4":{},"6":{},"8":{},"9":{},"13":{},"14":{},"15":{},"17":{},"18":{},"19":{},"20":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["two_m",{"_index":1976,"title":{},"name":{},"text":{"18":{}},"component":{}}],["tx",{"_index":2257,"title":{},"name":{},"text":{"20":{}},"component":{}}],["ty",{"_index":2258,"title":{},"name":{},"text":{"20":{}},"component":{}}],["type",{"_index":100,"title":{},"name":{},"text":{"1":{},"6":{},"7":{},"9":{},"11":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{}},"component":{}}],["tz",{"_index":2259,"title":{},"name":{},"text":{"20":{}},"component":{}}],["u32",{"_index":111,"title":{},"name":{},"text":{"1":{},"4":{},"16":{},"19":{},"20":{}},"component":{}}],["u32::from(is_on",{"_index":119,"title":{},"name":{},"text":{"1":{}},"component":{}}],["u32::max",{"_index":1578,"title":{},"name":{},"text":{"16":{}},"component":{}}],["u32::min",{"_index":2131,"title":{},"name":{},"text":{"19":{},"20":{}},"component":{}}],["u32::try_from(x.ab",{"_index":2261,"title":{},"name":{},"text":{"20":{}},"component":{}}],["u64",{"_index":125,"title":{},"name":{},"text":{"1":{},"17":{}},"component":{}}],["u64::from(is_on",{"_index":126,"title":{},"name":{},"text":{"1":{}},"component":{}}],["un",{"_index":592,"title":{},"name":{},"text":{"5":{},"13":{}},"component":{}}],["unaffect",{"_index":1696,"title":{},"name":{},"text":{"17":{}},"component":{}}],["unambigu",{"_index":58,"title":{},"name":{},"text":{"1":{}},"component":{}}],["unbound",{"_index":2641,"title":{},"name":{},"text":{"23":{}},"component":{}}],["unchang",{"_index":776,"title":{},"name":{},"text":{"8":{},"17":{}},"component":{}}],["under",{"_index":1630,"title":{},"name":{},"text":{"16":{}},"component":{}}],["underflow",{"_index":1782,"title":{},"name":{},"text":{"17":{}},"component":{}}],["underli",{"_index":859,"title":{},"name":{},"text":{"9":{}},"component":{}}],["underwat",{"_index":1257,"title":{},"name":{},"text":{"13":{}},"component":{}}],["undirect",{"_index":1248,"title":{},"name":{},"text":{"13":{}},"component":{}}],["undrawn",{"_index":485,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unfortun",{"_index":1443,"title":{},"name":{},"text":{"15":{},"24":{}},"component":{}}],["unicod",{"_index":1424,"title":{},"name":{},"text":{"14":{}},"component":{}}],["union",{"_index":2151,"title":{},"name":{},"text":{"20":{}},"component":{}}],["unit",{"_index":198,"title":{"25":{}},"name":{},"text":{"1":{}},"component":{}}],["unless",{"_index":2659,"title":{},"name":{},"text":{"24":{}},"component":{}}],["unmarked_sum",{"_index":555,"title":{},"name":{},"text":{"5":{}},"component":{}}],["unoccupi",{"_index":2666,"title":{},"name":{},"text":{"24":{}},"component":{}}],["unpack",{"_index":1680,"title":{},"name":{},"text":{"17":{}},"component":{}}],["unreach",{"_index":589,"title":{},"name":{},"text":{"5":{},"17":{},"19":{},"21":{},"26":{}},"component":{}}],["until",{"_index":582,"title":{},"name":{},"text":{"5":{},"9":{},"16":{},"18":{},"25":{}},"component":{}}],["unwrap",{"_index":65,"title":{},"name":{},"text":{"1":{},"4":{},"9":{},"17":{},"22":{},"24":{}},"component":{}}],["unwrap_or(0",{"_index":123,"title":{},"name":{},"text":{"1":{}},"component":{}}],["up",{"_index":287,"title":{},"name":{},"text":{"3":{},"8":{},"9":{},"14":{},"15":{},"16":{},"17":{},"20":{},"22":{},"23":{},"25":{}},"component":{}}],["up_fac",{"_index":2235,"title":{},"name":{},"text":{"20":{}},"component":{}}],["updat",{"_index":275,"title":{},"name":{},"text":{"3":{},"5":{},"12":{},"21":{},"24":{}},"component":{}}],["update_that_moves_am_to_final_loc",{"_index":2784,"title":{},"name":{},"text":{"24":{}},"component":{}}],["updates.clear",{"_index":2767,"title":{},"name":{},"text":{"24":{}},"component":{}}],["updates.push(upd",{"_index":2807,"title":{},"name":{},"text":{"24":{}},"component":{}}],["upon",{"_index":2430,"title":{},"name":{},"text":{"22":{}},"component":{}}],["upper",{"_index":1349,"title":{},"name":{},"text":{"14":{},"23":{}},"component":{}}],["upright",{"_index":2508,"title":{},"name":{},"text":{"23":{}},"component":{}}],["us",{"_index":102,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{},"26":{}},"component":{}}],["usiz",{"_index":129,"title":{},"name":{},"text":{"1":{},"2":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["usize::from(*x)).sum_axis(axis(0",{"_index":402,"title":{},"name":{},"text":{"4":{}},"component":{}}],["usize::from(bit)).sum",{"_index":2416,"title":{},"name":{},"text":{"21":{}},"component":{}}],["usize::max",{"_index":1541,"title":{},"name":{},"text":{"15":{}},"component":{}}],["usize::try_from(d).ok",{"_index":1090,"title":{},"name":{},"text":{"10":{},"12":{}},"component":{}}],["usize::try_from(span[1",{"_index":2529,"title":{},"name":{},"text":{"23":{}},"component":{}}],["usize::try_from(to_big_decimal(&data_bits[1..n_bits_for_length",{"_index":1759,"title":{},"name":{},"text":{"17":{}},"component":{}}],["usize::try_from(to_decimal([self.surround",{"_index":2376,"title":{},"name":{},"text":{"21":{}},"component":{}}],["utils.r",{"_index":106,"title":{},"name":{},"text":{"1":{}},"component":{}}],["v",{"_index":110,"title":{},"name":{},"text":{"1":{},"3":{},"6":{},"8":{},"9":{},"13":{},"15":{},"18":{},"20":{},"26":{}},"component":{}}],["v.as_ref",{"_index":1055,"title":{},"name":{},"text":{"9":{}},"component":{}}],["v.insert(new_good_candid",{"_index":993,"title":{},"name":{},"text":{"9":{}},"component":{}}],["v.iter().next().copied().unwrap",{"_index":1021,"title":{},"name":{},"text":{"9":{}},"component":{}}],["v_x",{"_index":1907,"title":{},"name":{},"text":{"18":{}},"component":{}}],["v_y)&=v_i",{"_index":1915,"title":{},"name":{},"text":{"18":{}},"component":{}}],["v_y)(vx​,vi",{"_index":1903,"title":{},"name":{},"text":{"18":{}},"component":{}}],["val",{"_index":1060,"title":{},"name":{},"text":{"9":{},"10":{},"12":{},"19":{}},"component":{}}],["val.valu",{"_index":2102,"title":{},"name":{},"text":{"19":{}},"component":{}}],["valid",{"_index":941,"title":{},"name":{},"text":{"9":{},"13":{}},"component":{}}],["valid_z",{"_index":2876,"title":{},"name":{},"text":{"25":{}},"component":{}}],["valid_zs))).into",{"_index":2880,"title":{},"name":{},"text":{"25":{}},"component":{}}],["valid_zs.as_ref",{"_index":2957,"title":{},"name":{},"text":{"25":{}},"component":{}}],["valid_zs.extend(curr_zs.iter().copi",{"_index":2943,"title":{},"name":{},"text":{"25":{}},"component":{}}],["valu",{"_index":333,"title":{},"name":{},"text":{"4":{},"6":{},"7":{},"14":{},"17":{},"18":{},"19":{},"22":{},"25":{}},"component":{}}],["value_of_line_chosen_by_criterion",{"_index":448,"title":{},"name":{},"text":{"4":{}},"component":{}}],["value_of_line_chosen_by_criterion(mat",{"_index":477,"title":{},"name":{},"text":{"4":{}},"component":{}}],["var",{"_index":1365,"title":{},"name":{},"text":{"14":{}},"component":{}}],["varepsilon",{"_index":375,"title":{},"name":{},"text":{"4":{}},"component":{}}],["variabl",{"_index":2358,"title":{},"name":{},"text":{"21":{}},"component":{}}],["variant",{"_index":92,"title":{},"name":{},"text":{"1":{}},"component":{}}],["variou",{"_index":849,"title":{},"name":{},"text":{"9":{}},"component":{}}],["vec",{"_index":527,"title":{},"name":{},"text":{"5":{},"9":{},"10":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["vec![*self",{"_index":2556,"title":{},"name":{},"text":{"23":{}},"component":{}}],["vec![0",{"_index":2483,"title":{},"name":{},"text":{"22":{}},"component":{}}],["vec![[usize::max",{"_index":2739,"title":{},"name":{},"text":{"24":{}},"component":{}}],["vec![c1",{"_index":2628,"title":{},"name":{},"text":{"23":{}},"component":{}}],["vec![candidatedigit",{"_index":2958,"title":{},"name":{},"text":{"25":{}},"component":{}}],["vec![first_idx",{"_index":1124,"title":{},"name":{},"text":{"10":{}},"component":{}}],["vec![map::new",{"_index":2922,"title":{},"name":{},"text":{"25":{}},"component":{}}],["vec![n_col",{"_index":531,"title":{},"name":{},"text":{"5":{}},"component":{}}],["vec![n_row",{"_index":532,"title":{},"name":{},"text":{"5":{}},"component":{}}],["vec![parsest",{"_index":1726,"title":{},"name":{},"text":{"17":{}},"component":{}}],["vec![set::new",{"_index":2940,"title":{},"name":{},"text":{"25":{}},"component":{}}],["vec![turn",{"_index":2480,"title":{},"name":{},"text":{"22":{}},"component":{}}],["vec::::new",{"_index":2095,"title":{},"name":{},"text":{"19":{},"23":{}},"component":{}}],["vec::new",{"_index":355,"title":{},"name":{},"text":{"4":{},"10":{},"11":{},"12":{},"24":{}},"component":{}}],["vec::with_capacity(s.len",{"_index":1709,"title":{},"name":{},"text":{"17":{}},"component":{}}],["vecdeque::with_capacity(n",{"_index":253,"title":{},"name":{},"text":{"2":{}},"component":{}}],["vector",{"_index":338,"title":{},"name":{},"text":{"4":{},"19":{},"20":{}},"component":{}}],["velo",{"_index":1879,"title":{},"name":{},"text":{"18":{}},"component":{}}],["velo.vi",{"_index":1986,"title":{},"name":{},"text":{"18":{}},"component":{}}],["velo.vx",{"_index":1988,"title":{},"name":{},"text":{"18":{}},"component":{}}],["veloc",{"_index":1848,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ventur",{"_index":143,"title":{"6":{}},"name":{},"text":{"1":{}},"component":{}}],["veri",{"_index":42,"title":{},"name":{},"text":{"1":{},"17":{},"24":{},"25":{}},"component":{}}],["version_numb",{"_index":1734,"title":{},"name":{},"text":{"17":{}},"component":{}}],["vertic",{"_index":651,"title":{},"name":{},"text":{"6":{},"14":{}},"component":{}}],["visit",{"_index":1252,"title":{},"name":{},"text":{"13":{}},"component":{}}],["visited_idx",{"_index":1122,"title":{},"name":{},"text":{"10":{}},"component":{}}],["visited_idxs.contains(&nghbr_idx",{"_index":1131,"title":{},"name":{},"text":{"10":{}},"component":{}}],["visited_idxs.insert(idx",{"_index":1127,"title":{},"name":{},"text":{"10":{}},"component":{}}],["vx",{"_index":1880,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx,vy)(v_x",{"_index":1902,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx,vy)(v_x,v_y)(vx​,vi",{"_index":1921,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx1",{"_index":1941,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx2",{"_index":1945,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx={2x+t(t−1)2tt≤vx−1±1+8x2t≥vxv_x=\\begin{cas",{"_index":1931,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx_denom",{"_index":1943,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vx_numer",{"_index":1942,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vxv_xvx",{"_index":1926,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vxv_xvx​",{"_index":1865,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vy",{"_index":1881,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vy=2y+t(t−1)2tv_y=\\frac{2y+t(t",{"_index":1929,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vy_denom",{"_index":1940,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vy_num",{"_index":1939,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vyv_yvi",{"_index":1927,"title":{},"name":{},"text":{"18":{}},"component":{}}],["vyv_yvy​",{"_index":1867,"title":{},"name":{},"text":{"18":{}},"component":{}}],["w",{"_index":1596,"title":{},"name":{},"text":{"16":{},"25":{}},"component":{}}],["walk",{"_index":2912,"title":{},"name":{},"text":{"25":{}},"component":{}}],["wall",{"_index":2714,"title":{},"name":{},"text":{"24":{}},"component":{}}],["want",{"_index":1573,"title":{},"name":{},"text":{"16":{},"18":{}},"component":{}}],["wasnt_pres",{"_index":2295,"title":{},"name":{},"text":{"20":{}},"component":{}}],["wasn’t",{"_index":1673,"title":{},"name":{},"text":{"17":{}},"component":{}}],["way",{"_index":394,"title":{},"name":{},"text":{"4":{},"9":{},"15":{},"17":{},"18":{},"20":{},"22":{},"24":{},"25":{}},"component":{}}],["we'r",{"_index":1764,"title":{},"name":{},"text":{"17":{}},"component":{}}],["weight",{"_index":2434,"title":{},"name":{},"text":{"22":{}},"component":{}}],["well",{"_index":807,"title":{},"name":{},"text":{"8":{},"9":{},"22":{}},"component":{}}],["went",{"_index":2426,"title":{},"name":{},"text":{"22":{}},"component":{}}],["we’d",{"_index":495,"title":{},"name":{},"text":{"5":{},"8":{}},"component":{}}],["we’ll",{"_index":1792,"title":{},"name":{},"text":{"17":{},"21":{},"23":{},"25":{}},"component":{}}],["we’r",{"_index":77,"title":{},"name":{},"text":{"1":{},"18":{},"20":{},"25":{}},"component":{}}],["we’v",{"_index":1284,"title":{},"name":{},"text":{"13":{},"17":{},"20":{},"25":{}},"component":{}}],["whale",{"_index":148,"title":{"8":{}},"name":{},"text":{"1":{}},"component":{}}],["whenev",{"_index":800,"title":{},"name":{},"text":{"8":{},"19":{}},"component":{}}],["wherea",{"_index":1219,"title":{},"name":{},"text":{"12":{},"13":{}},"component":{}}],["where’",{"_index":1845,"title":{},"name":{},"text":{"18":{}},"component":{}}],["whether",{"_index":1485,"title":{},"name":{},"text":{"15":{},"21":{}},"component":{}}],["whichev",{"_index":814,"title":{},"name":{},"text":{"8":{}},"component":{}}],["whitespace_sepd_strs_to_digits(in_out.next",{"_index":1036,"title":{},"name":{},"text":{"9":{}},"component":{}}],["whitespace_sepd_strs_to_digits(str",{"_index":1027,"title":{},"name":{},"text":{"9":{}},"component":{}}],["whose",{"_index":347,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"10":{},"19":{},"20":{},"21":{}},"component":{}}],["width",{"_index":1082,"title":{},"name":{},"text":{"10":{},"12":{},"24":{},"26":{}},"component":{}}],["width(span",{"_index":2527,"title":{},"name":{},"text":{"23":{}},"component":{}}],["width(x_rang",{"_index":2535,"title":{},"name":{},"text":{"23":{}},"component":{}}],["width(y_rang",{"_index":2536,"title":{},"name":{},"text":{"23":{}},"component":{}}],["width(z_rang",{"_index":2537,"title":{},"name":{},"text":{"23":{}},"component":{}}],["win",{"_index":593,"title":{},"name":{},"text":{"5":{},"22":{}},"component":{}}],["win_threshold",{"_index":2478,"title":{},"name":{},"text":{"22":{}},"component":{}}],["winning_num",{"_index":554,"title":{},"name":{},"text":{"5":{}},"component":{}}],["wire",{"_index":852,"title":{},"name":{},"text":{"9":{}},"component":{}}],["within",{"_index":1463,"title":{},"name":{},"text":{"15":{},"24":{}},"component":{}}],["without",{"_index":59,"title":{},"name":{},"text":{"1":{},"11":{},"17":{}},"component":{}}],["won",{"_index":501,"title":{},"name":{},"text":{"5":{}},"component":{}}],["won't",{"_index":1220,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["won’t",{"_index":1632,"title":{},"name":{},"text":{"16":{}},"component":{}}],["word",{"_index":391,"title":{},"name":{},"text":{"4":{},"14":{},"17":{},"18":{},"20":{},"23":{},"24":{}},"component":{}}],["words.next",{"_index":1361,"title":{},"name":{},"text":{"14":{}},"component":{}}],["work",{"_index":32,"title":{},"name":{},"text":{"1":{},"4":{},"8":{},"15":{},"16":{},"18":{},"20":{}},"component":{}}],["worst",{"_index":774,"title":{},"name":{},"text":{"8":{}},"component":{}}],["worth",{"_index":2425,"title":{},"name":{},"text":{"22":{},"24":{}},"component":{}}],["wouldn’t",{"_index":73,"title":{},"name":{},"text":{"1":{}},"component":{}}],["wrapper",{"_index":2672,"title":{},"name":{},"text":{"24":{}},"component":{}}],["wrinkl",{"_index":876,"title":{},"name":{},"text":{"9":{},"13":{},"20":{}},"component":{}}],["write",{"_index":1705,"title":{},"name":{},"text":{"17":{},"21":{},"25":{}},"component":{}}],["written",{"_index":997,"title":{},"name":{},"text":{"9":{}},"component":{}}],["wrong",{"_index":1467,"title":{},"name":{},"text":{"15":{}},"component":{}}],["wrote",{"_index":1669,"title":{},"name":{},"text":{"17":{}},"component":{}}],["x",{"_index":461,"title":{},"name":{},"text":{"4":{},"5":{},"6":{},"9":{},"12":{},"14":{},"17":{},"18":{},"20":{},"24":{},"25":{}},"component":{}}],["x(t",{"_index":1358,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["x(t,vx)={vxt−12t(t−1)t≤vx12vx(vx+1)t≥vxy(t,vy)=vyt−12t(t−1)\\begin{align",{"_index":1906,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x,y)(x,y)(x,i",{"_index":1357,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["x,y)∈r(x,y)\\in",{"_index":1923,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x.into",{"_index":2190,"title":{},"name":{},"text":{"20":{}},"component":{}}],["x.max(i",{"_index":1811,"title":{},"name":{},"text":{"17":{}},"component":{}}],["x.min(i",{"_index":1810,"title":{},"name":{},"text":{"17":{}},"component":{}}],["x1",{"_index":632,"title":{},"name":{},"text":{"6":{},"18":{},"20":{},"23":{}},"component":{}}],["x1,y,z),(x2,y,z",{"_index":2523,"title":{},"name":{},"text":{"23":{}},"component":{}}],["x1,y1),(x2,y2))((x_1",{"_index":606,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x1=x2x_1",{"_index":652,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x1x_1x1",{"_index":682,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x1​,y,z),(x2​,y,z",{"_index":2526,"title":{},"name":{},"text":{"23":{}},"component":{}}],["x2",{"_index":634,"title":{},"name":{},"text":{"6":{},"18":{},"20":{}},"component":{}}],["x2).ab",{"_index":692,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x2).zip(range_between(y1",{"_index":690,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x2x_2x2",{"_index":683,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x=1000000..1001000",{"_index":1874,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x=ax=ax=a",{"_index":1356,"title":{},"name":{},"text":{"14":{}},"component":{}}],["x[1",{"_index":2196,"title":{},"name":{},"text":{"20":{}},"component":{}}],["x[2",{"_index":2199,"title":{},"name":{},"text":{"20":{}},"component":{}}],["x_1,y,z",{"_index":2524,"title":{},"name":{},"text":{"23":{}},"component":{}}],["x_1|=|y_k",{"_index":679,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x_2",{"_index":608,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x_2,y,z",{"_index":2525,"title":{},"name":{},"text":{"23":{}},"component":{}}],["x_2x1​=x2",{"_index":653,"title":{},"name":{},"text":{"6":{}},"component":{}}],["x_\\mathrm{max}]\\times[y_\\mathrm{min",{"_index":1854,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x_max",{"_index":1884,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x_min",{"_index":1883,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x_min..=x_max",{"_index":1984,"title":{},"name":{},"text":{"18":{}},"component":{}}],["x_rang",{"_index":2532,"title":{},"name":{},"text":{"23":{}},"component":{}}],["x_ranges.iter().flatten",{"_index":2564,"title":{},"name":{},"text":{"23":{}},"component":{}}],["xk,yk)(x_k,y_k)(xk​,yk",{"_index":677,"title":{},"name":{},"text":{"6":{}},"component":{}}],["xkx_kxk",{"_index":681,"title":{},"name":{},"text":{"6":{}},"component":{}}],["xk−x1∣=∣yk−y1∣|x_k",{"_index":678,"title":{},"name":{},"text":{"6":{}},"component":{}}],["xxx",{"_index":760,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["y",{"_index":475,"title":{},"name":{},"text":{"4":{},"6":{},"9":{},"14":{},"17":{},"18":{},"20":{},"25":{}},"component":{}}],["y(t",{"_index":1359,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["y)).or_default",{"_index":668,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y.ab",{"_index":2262,"title":{},"name":{},"text":{"20":{}},"component":{}}],["y.into",{"_index":2191,"title":{},"name":{},"text":{"20":{}},"component":{}}],["y1",{"_index":633,"title":{},"name":{},"text":{"6":{},"18":{},"20":{}},"component":{}}],["y1=y2y_1",{"_index":654,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y2",{"_index":635,"title":{},"name":{},"text":{"6":{},"18":{},"20":{}},"component":{}}],["y2).ab",{"_index":693,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y2y_2y2",{"_index":685,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y=0y=0y=0",{"_index":1950,"title":{},"name":{},"text":{"18":{}},"component":{}}],["y[0",{"_index":2194,"title":{},"name":{},"text":{"20":{}},"component":{}}],["y[1",{"_index":2197,"title":{},"name":{},"text":{"20":{}},"component":{}}],["y[2",{"_index":2200,"title":{},"name":{},"text":{"20":{}},"component":{}}],["y].map(|op",{"_index":476,"title":{},"name":{},"text":{"4":{}},"component":{}}],["y_1",{"_index":607,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y_1|∣xk​−x1​∣=∣yk​−y1",{"_index":680,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y_2))((x1​,y1​),(x2​,y2",{"_index":609,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y_2y1​=y2",{"_index":655,"title":{},"name":{},"text":{"6":{}},"component":{}}],["y_\\mathrm{max}]r=[xmin​,xmax​]×[ymin​,ymax",{"_index":1855,"title":{},"name":{},"text":{"18":{}},"component":{}}],["y_max",{"_index":1886,"title":{},"name":{},"text":{"18":{}},"component":{}}],["y_min",{"_index":1885,"title":{},"name":{},"text":{"18":{}},"component":{}}],["y_min..=y_max",{"_index":1977,"title":{},"name":{},"text":{"18":{}},"component":{}}],["y_rang",{"_index":2533,"title":{},"name":{},"text":{"23":{}},"component":{}}],["y_ranges.iter().flatten",{"_index":2565,"title":{},"name":{},"text":{"23":{}},"component":{}}],["year’",{"_index":211,"title":{},"name":{},"text":{"1":{},"15":{}},"component":{}}],["yky_kyk",{"_index":684,"title":{},"name":{},"text":{"6":{}},"component":{}}],["you’r",{"_index":40,"title":{},"name":{},"text":{"1":{}},"component":{}}],["yyi",{"_index":1847,"title":{},"name":{},"text":{"18":{}},"component":{}}],["z",{"_index":2189,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["z.abs()).unwrap",{"_index":2263,"title":{},"name":{},"text":{"20":{}},"component":{}}],["z.into",{"_index":2192,"title":{},"name":{},"text":{"20":{}},"component":{}}],["z0",{"_index":2887,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z1",{"_index":2344,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["z11",{"_index":2897,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z12",{"_index":2896,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z13",{"_index":2895,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z14",{"_index":2892,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z2",{"_index":2348,"title":{},"name":{},"text":{"20":{},"25":{}},"component":{}}],["z3",{"_index":2890,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z6",{"_index":2907,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z[0",{"_index":2195,"title":{},"name":{},"text":{"20":{}},"component":{}}],["z[1",{"_index":2198,"title":{},"name":{},"text":{"20":{}},"component":{}}],["z[2",{"_index":2201,"title":{},"name":{},"text":{"20":{}},"component":{}}],["z_init",{"_index":2955,"title":{},"name":{},"text":{"25":{}},"component":{}}],["z_rang",{"_index":2534,"title":{},"name":{},"text":{"23":{}},"component":{}}],["z_ranges.iter().flatten",{"_index":2566,"title":{},"name":{},"text":{"23":{}},"component":{}}],["zero",{"_index":500,"title":{},"name":{},"text":{"5":{},"20":{}},"component":{}}],["zip(elems.iter().enumerate().skip(1",{"_index":2015,"title":{},"name":{},"text":{"19":{}},"component":{}}],["zip(self.template.chars().skip(1",{"_index":1512,"title":{},"name":{},"text":{"15":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"This doc has my solutions for the 2021 Advent of Code. It assumes some familiarity with the Rust language. Advent of Code gives all participants the same problems, but gives different inputs to each participant. Therefore, it makes little sense to give the actual numeric answers to problems here. However, we do provide the input that was given to us in order to contextualize the input-parsing code. The solutions below should work for any input/output pair provided by Advent of Code. This document has the solutions out in the open! Don’t read it if you’re still working on Advent of Code. Rust is a very strict language and makes you explicitly handle all errors that might arise (as opposed to, say, exceptions implicitly being thrown on error, as Python does). However, we can trust our inputs, taken straight from Advent of Code, to be correct and give unambiguous answers without errors. For this reason, we tend to be pretty loosey-goosey about unwrapping the Options and Results that the Rust compiler correctly points out we could theoretically encounter. (There wouldn’t be any point to handling those cases gracefully; we’re just trying to solve Advent of Code, not create general-purpose a submarine-squid-bingo-player that can function sensibly even when the squid gives us nonsensical input. For our purposes, the residual variants of a Try object at the boundary of our program are ! (Rust’s bottom or “never” type).) Commonly used code, in src/lib.rs and src/utils.rs, is below: lib.rs utils.rs pub(crate) fn to_decimal>(binary_digits_msbf: V) -> u32 { binary_digits_msbf .as_ref() .iter() .rev() .enumerate() .map(|(pow2, &is_on)| u32::from(is_on) * 2u32.pow(u32::try_from(pow2).unwrap())) .reduce(|a, b| a + b) .unwrap_or(0) } pub(crate) fn to_big_decimal>(binary_digits_msbf: V) -> u64 { binary_digits_msbf .as_ref() .iter() .rev() .enumerate() .map(|(pow2, &is_on)| u64::from(is_on) * 2u64.pow(u32::try_from(pow2).unwrap())) .reduce(|a, b| a + b) .unwrap_or(0) } pub(crate) fn abs_diff(a: usize, b: usize) -> usize { if a > b { a - b } else { b - a } } Day 1: Sonar Sweep Day 2: Dive! Day 3: Binary Diagnostic Day 4: Giant Squid Day 5: Hydrothermal Venture Day 6: Lanternfish Day 7: The Treachery of Whales Day 8: Seven Segment Search Day 9: Smoke Basin Day 10: Syntax Scoring Day 11: Dumbo Octopus Day 12: Passage Pathing Day 13: Transparent Origami Day 14: Extended Polymerization Day 15: Chiton Day 16: Packet Decoder Day 17: Trick Shot Day 18: Snailfish Day 19: Beacon Scanner Day 20: Trench Map Day 21: Dirac Dice Day 22: Reactor Reboot Day 23: Amphipod Day 24: Arithmetic Logic Unit Day 25: Sea Cucumber This was a lot of work, but a lot of fun, and I learned a ton, both about algorithms in general and about Rust. Looking forward to next year’s Advent of Code!","title":"Advent of Code 2021","component":"ROOT","version":"","name":"index","url":"/","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Problems and Solutions","hash":"_problems_and_solutions","id":2}]},"2":{"id":2,"text":"Day #1 problem description │ Problem input Part 1 asks to find when the current depth is greater than the previous depth. Part 2 asks to find when the current running sum of depths is greater than the previous running sum, with a running sum of length 3. These are both special cases of finding when the current length-nnn running sum of depths is greater than the previous length-nnn running sum, with Part 1 using a length of n=1n=1n=1 and Part 2 using n=3n=3n=3. The solution uses a CircularBuffer to keep the past nnn depths. Since the “interior” components of the current and previous running sums are the same, we can compare the two running sums by merely checking the incoming number against the outgoing number, i.e., the new depth against the oldest depth still in the buffer. If the current depth is greater, then so is the current running sum. use crate::Answer; use std::collections::VecDeque; fn get_n_increasing_running_sum_of_depths(input: &str, n: usize) -> Option { let mut depth_buf = VecDeque::with_capacity(n); let mut depths = input.lines().map(|line| line.parse::().unwrap()); depth_buf.extend(depths.by_ref().take(n)); if depth_buf.len() old_depth { n_increasing += 1; } } Some(n_increasing) } fn ans_for_input(input: &str) -> Answer { (1, (pt1(input), pt2(input))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1(input: &str) -> usize { get_n_increasing_running_sum_of_depths(input, 1).unwrap() } fn pt2(input: &str) -> usize { get_n_increasing_running_sum_of_depths(input, 3).unwrap() }","title":"Day 1: Sonar Sweep","component":"ROOT","version":"","name":"soln","url":"/src/day_01/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"3":{"id":3,"text":"Day #2 problem description │ Problem input There isn’t really anything too deep to go into here. You just have to update the current state correctly. struct Position { h: i32, v: i32, } impl Position { fn get_ans(&self) -> i32 { self.h * self.v } } enum Direction { Forward, Up, Down, } impl Direction { fn from_str(s: &str) -> Option { use Direction::*; Some(match s { \"forward\" => Forward, \"up\" => Up, \"down\" => Down, _ => return None, }) } } struct Step { direction: Direction, dist: i32, } fn read_input(s: &str) -> Option> { s.lines() .map(|line| { let mut tokens_iter = line.split_whitespace(); let direction = Direction::from_str(tokens_iter.next()?)?; let dist = tokens_iter.next()?.parse().ok()?; Some(Step { direction, dist }) }) .collect() } fn ans_for_input(input: &str) -> Answer { let directions = read_input(input).unwrap(); (2, (pt1(directions.iter()), pt2(directions.iter()))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1>(steps: impl Iterator) -> i32 { use Direction::*; let mut h = 0; let mut v = 0; for step in steps { let Step { direction, dist } = &*step; match direction { Forward => h += dist, Up => v -= dist, Down => v += dist, }; } Position { h, v }.get_ans() } fn pt2>(steps: impl Iterator) -> i32 { use Direction::*; let mut h = 0; let mut v = 0; let mut aim = 0; for step in steps { let Step { direction, dist } = step.borrow(); let dist = *dist; match direction { Forward => { h += dist; v += aim * dist; } Up => aim -= dist, Down => aim += dist, }; } Position { h, v }.get_ans() }","title":"Day 2: Dive!","component":"ROOT","version":"","name":"soln","url":"/src/day_02/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"4":{"id":4,"text":"Day #3 problem description │ Problem input This challenge mostly just requires filtering arrays and counting elements satisfying a condition. The first thing we do is read the input file into a ndarray::Array2 of size (n_rows, n_cols), where a true value corresponds to a 1 character in the input, and a false to a 0. We also created a function that converts a binary vector, most significant digit first, to a (decimal) number (see the Setup section). For example, given 10011, we compute [1, 0, 0, 1, 1] .* [16, 8, 4, 2, 1] = [16, 0, 0, 2, 1], whose sum is 19. (This is just how positional notation works.) use crate::{utils::to_decimal, Answer}; use ndarray::prelude::*; fn read_input(input: &str) -> Option> { let mut lines = input.lines(); let mut bit_vec = Vec::new(); let first_line = lines.next()?; let line_length = first_line.len(); for line in std::iter::once(first_line).chain(lines) { for c in line.bytes() { bit_vec.push(c == b'1'); } } let n_lines = bit_vec.len() / line_length; Array2::from_shape_vec((n_lines, line_length), bit_vec).ok() } fn ans_for_input(input: &str) -> Answer { let mat = read_input(input).unwrap(); (3, (pt1(&mat), pt2(&mat))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } We are asked to find two numbers, gamma_rate (γ\\gammaγ) and epsilon_rate (ε\\varepsilonε). γ\\gammaγ is the value of the binary number whose kkkth digit is the most common digit in column kkk of the array of values. ε\\varepsilonε is computed using the same idea, but with the least common digit instead. (It is assumed that there will be no ties.) Since there are only two digits to choose from, the most common digit and the least common digit in each column will be opposites, and so γ+ε=all 1s=2line_width−1\\gamma + \\varepsilon = \\text{all 1s} = 2^{\\text{\\texttt{line\\textunderscore{}width}}}-1γ+ε=all 1s=2line_width−1. In other words we don’t need to compute ε\\varepsilonε “the long way”; once we have γ\\gammaγ, we immediately have ε\\varepsilonε. fn pt1(mat: &Array2) -> u32 { let (n_rows, n_cols) = mat.dim(); let n_ones = mat.map(|x| usize::from(*x)).sum_axis(Axis(0)); let n_zeros = n_ones.map(|n| n_rows - n); let col_has_more_ones_than_zeros = ndarray::Zip::from(&n_ones) .and(&n_zeros) .map_collect(|n_o, n_z| n_o > n_z) .into_shape((n_cols,)) .unwrap(); let gamma_rate = to_decimal(col_has_more_ones_than_zeros.to_vec()); let epsilon_rate = (2u32.pow(u32::try_from(n_cols).unwrap()) - 1) - gamma_rate; gamma_rate * epsilon_rate } We are asked to find two new numbers, the oxygen scrubber rating oxy_rate and the CO2 scrubber rating co2_rate. The procedure to find the oxy_rate is as follows: Initialize the list of candidate values to the full list of rows in elems as defined above. With kkk ranging from the leftmost column index in elems to the rightmost column index (most significant digit to least): Successively narrow down the list of candidates by keeping only those remaining candidates whose kkkth digit is the most common kkkth digit of the remaining candidates, with a tie between 0 and 1 going to 1. For instance, when k=5k=5k=5, then keep only the remaining candidates whose 5th digit is the most common 5th digit (0 or 1, ties going to 1) of all remaining candidates at that stage. Stop when only one candidate remains. (This is guaranteed to happen as long as the rows are all distinct.) The procedure for co2_rate is the same, except that the list of candidates is filtered down according to the least common digit in each position, with ties going to 0. fn value_of_line_chosen_by_criterion( mat: &Array2, cmp_predicate: impl Fn(usize, usize) -> bool, ) -> u32 { let (n_rows, n_cols) = mat.dim(); let mut candidates = Array1::::from_shape_simple_fn((n_rows,), || true); for i in 0..n_cols { let n_candidates_remaining = candidates.mapv(|c| if c { 1usize } else { 0 }).sum(); if n_candidates_remaining == 1 { break; } let column = mat.index_axis(Axis(1), i); let digit_sum = column .iter() .enumerate() .filter_map(|(i, &x)| { if candidates[[i]] { Some(usize::from(x)) } else { None } }) .sum::(); let most_common_digit = cmp_predicate(2 * digit_sum, n_candidates_remaining); candidates = ndarray::Zip::from(&candidates) .and(&column) .map_collect(|&candidate, &digit| candidate && digit == most_common_digit); } let index = candidates .into_iter() .enumerate() .find_map(|(i, x)| if x { Some(i) } else { None }) .unwrap(); let line = mat.index_axis(Axis(0), index); to_decimal(line.to_vec()) } fn pt2(mat: &Array2) -> u32 { let [oxy_rate, co2_rate] = [|x, y| x >= y, |x, y| x < y].map(|op| value_of_line_chosen_by_criterion(mat, op)); oxy_rate * co2_rate }","title":"Day 3: Binary Diagnostic","component":"ROOT","version":"","name":"soln","url":"/src/day_03/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"5":{"id":5,"text":"Day #4 problem description │ Problem input The game is represented as a list of boards and a list of drawn numbers. Each board has: A dictionary grid that maps undrawn numbers on the board to their Cartesian coordinates (a pair (row, col)) on the board. When a number is drawn, its Cartesian coordinates are used to update progress (below), and then the number is removed from the dictionary. The only reason drawn numbers are removed from a board’s dictionary is that Advent of Code asks for the sum of the board’s undrawn numbers to compute the answer, so we need to keep track of which numbers on a given board haven’t been drawn yet. Otherwise, we’d have had no reason to mutate the dictionary at all. progress, which stores for each row and column the count of numbers in that row/column have not yet been drawn. If one of those counts hit zero, then every number in that row/column has been drawn, and so the board has a \"Bingo\" (i.e., has won). The row and column indices have the same meaning as the Cartesian coordinates in the dictionary described above: if number 25 is drawn, and 25’s position on a particular board is (2, 3), then progress.rows[2] and progress.cols[3] each get decremented. Reading the input text into a game (numbers and boards) is in read_input_into_game, whose (not particularly interesting) implementation should serve as its docs. get_answer_from_final_game_state is just used to prove to Advent of Code that we actually got the solution. use crate::Answer; use num::{integer::div_mod_floor, Integer}; use std::{ collections::{BTreeMap as Map, BTreeSet as Set}, str::FromStr, }; #[derive(Debug)] struct BoardProgress { rows: Vec, cols: Vec, has_won: bool, } impl BoardProgress { fn new(n_rows: usize, n_cols: usize) -> Self { let rows = vec![n_cols; n_rows]; let cols = vec![n_rows; n_cols]; Self { rows, cols, has_won: false, } } fn handle_entry(&mut self, row: usize, col: usize) { if self.has_won { return; } self.rows[row] -= 1; self.cols[col] -= 1; if self.rows[row] == 0 || self.cols[col] == 0 { self.has_won = true; } } } #[derive(Debug)] struct Board { grid: Map, progress: BoardProgress, } impl Board { fn new(nums: &[T], n_cols: usize) -> Self { let n_rows = nums.len() / n_cols; assert_eq!(n_rows * n_cols, nums.len()); let mut grid = Map::new(); for (i, &x) in nums.iter().enumerate() { let (r, c) = div_mod_floor(i, n_cols); grid.insert(x, (r, c)); } Self { grid, progress: BoardProgress::new(n_rows, n_cols), } } fn play_number(&mut self, n: T) { let (r, c) = match self.grid.remove(&n) { Some(coords) => coords, None => return, }; self.progress.handle_entry(r, c); } fn has_won(&self) -> bool { self.progress.has_won } fn get_ans(&self, winning_num: T) -> T { let unmarked_sum = self.grid.keys().copied().sum::(); winning_num * unmarked_sum } } struct Game { boards: Vec>, numbers: Vec, } impl Game { fn from_str(s: &str) -> Option { let mut lines = s.lines().chain(std::iter::once(\"\")); let nums = lines .next()? .split(',') .map(|s| s.parse::().ok()) .collect::>>()?; let mut boards = vec![]; let mut this_board = vec![]; let mut n_cols = None; for line in lines { if line.is_empty() { if !this_board.is_empty() { let board = Board::new(this_board.as_slice(), n_cols.unwrap()); boards.push(board); this_board.clear(); } } else { for num in line.split_whitespace().map(|s| s.parse::().ok()) { let num = num?; this_board.push(num); } if matches!(n_cols, None) { n_cols = Some(this_board.len()); } } } Some(Self { boards, numbers: nums, }) } } fn ans_for_input(input: &str) -> Answer { let [game1, game2] = [0; 2].map(|_| Game::from_str(input).unwrap()); (4, (pt1(game1), pt2(game2))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } We simply draw numbers until a board has won, then get the answer. fn pt1(mut game: Game) -> i32 { for &num in &game.numbers { for board in &mut game.boards { board.play_number(num); if board.has_won() { return board.get_ans(num); } } } unreachable!(); } This time, we keep track of all of the boards that haven’t won yet. When the last un-won boards wins, we use it to compute the answer. fn pt2(mut game: Game) -> i32 { let mut ongoing_game_idxs = (0..game.boards.len()).collect::>(); for &num in &game.numbers { for (board_idx, board) in game.boards.iter_mut().enumerate() { let already_won = !ongoing_game_idxs.contains(&board_idx); if already_won { continue; } board.play_number(num); if board.has_won() { if ongoing_game_idxs.len() == 1 { return board.get_ans(num); } ongoing_game_idxs.remove(&board_idx); } } } unreachable!(); }","title":"Day 4: Giant Squid","component":"ROOT","version":"","name":"soln","url":"/src/day_04/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"6":{"id":6,"text":"Day #5 problem description │ Problem input This challenge requires iterating the integer points between two other points on the plane. First, we read the input into a list of lines of the form ((x1,y1),(x2,y2))((x_1, y_1), (x_2, y_2))((x1​,y1​),(x2​,y2​)). We also define the helpful range_between(a, b) function, which returns the (nonempty!) range of integers between a and b, inclusive. The range is ascending if and only if a b.) use crate::Answer; use num::Integer; use regex::Regex; use std::{collections::BTreeMap as Map, str::FromStr}; #[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord)] struct Point(T, T); struct EndpointPair(Point, Point); type PointCounter = Map, usize>; fn get_lines(input: &str) -> Option>> { let line_re = Regex::new(r\"(\\d+),(\\d+)\\s*->\\s*(\\d+),(\\d+)\").ok()?; input .lines() .map(|line| { let caps = line_re.captures(line)?; let [x1, y1, x2, y2] = [1, 2, 3, 4].map(|i| caps.get(i)?.as_str().parse::().ok()); Some(EndpointPair(Point(x1?, y1?), Point(x2?, y2?))) }) .collect::>>() } fn range_between(a: i32, b: i32) -> num::iter::RangeStepInclusive { let step = if a (counter: &PointCounter) -> usize { counter .values() .map(|count| if *count >= 2 { 1 } else { 0 }) .sum() } fn ans_for_input(input: &str) -> Answer { let endpoints = get_lines(input).unwrap(); (5, (pt1(&endpoints), pt2(&endpoints))).into() } pub fn ans() -> Answer { let input = include_str!(\"input.txt\"); ans_for_input(input) } Part 1 asks us to count how many times each point belongs to some horizontal or vertical line. These are lines ((x1,y1),(x2,y2))((x_1, y_1), (x_2, y_2))((x1​,y1​),(x2​,y2​)) for which x1=x2x_1 = x_2x1​=x2​ or y1=y2y_1 = y_2y1​=y2​. Such a line’s points are the Cartesian “product” of the ranges range_between(x1, x2) and range_between(y1, y2) (“product” in quotes because one of those ranges has length 1, so it’s not much of a product). fn get_hv_point_counts(endpoints: &[EndpointPair]) -> PointCounter { let mut counter = Map::new(); for &EndpointPair(Point(x1, y1), Point(x2, y2)) in endpoints { if x1 != x2 && y1 != y2 { continue; } for x in range_between(x1, x2) { for y in range_between(y1, y2) { *counter.entry(Point(x, y)).or_default() += 1; } } } counter } fn pt1(endpoints: &[EndpointPair]) -> usize { get_ans(&get_hv_point_counts(endpoints)) } Part 2 asks us to count how many times each point belongs to either a horizontal line, a vertical line, or a 45∘45^\\circ45∘ diagonal line (whose slope must be ±1\\pm1±1). We already found the points on horizontal and vertical lines in Part 1. Diagonal lines are lines ((x1,y1),(x2,y2))((x_1, y_1), (x_2, y_2))((x1​,y1​),(x2​,y2​)) whose points (xk,yk)(x_k,y_k)(xk​,yk​) satisfy ∣xk−x1∣=∣yk−y1∣|x_k-x_1|=|y_k-y_1|∣xk​−x1​∣=∣yk​−y1​∣ with xkx_kxk​ between x1x_1x1​ and x2x_2x2​ and yky_kyk​ between yky_kyk​ and y2y_2y2​ (inclusive). Since the kkkth element of range_between(a, b) is kkk away from aaa, the points of the diagonal line in question are in fact simply the elements of range_between(x1, x2).zip(range_between(y1, y2)). fn get_diag_point_counts(endpoints: &[EndpointPair]) -> PointCounter { let mut counter = Map::new(); for &EndpointPair(Point(x1, y1), Point(x2, y2)) in endpoints { if (x1 - x2).abs() != (y1 - y2).abs() { continue; } for (x, y) in range_between(x1, x2).zip(range_between(y1, y2)) { *counter.entry(Point(x, y)).or_default() += 1; } } counter } fn pt2(endpoints: &[EndpointPair]) -> usize { let hv_counter = get_hv_point_counts(endpoints); let all_counter = { let mut diag_counter = get_diag_point_counts(endpoints); for (k, v) in hv_counter { *diag_counter.entry(k).or_default() += v; } diag_counter }; get_ans(&all_counter) }","title":"Day 5: Hydrothermal Venture","component":"ROOT","version":"","name":"soln","url":"/src/day_05/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"7":{"id":7,"text":"Day #6 problem description │ Problem input At a high level, this problem requires modifying a map from ints to ints in a controlled fashion. At a low level: This map’s keys are actually the integers from 0 to 8 (inclusive), so it can just be stored in an array. The “controlled fashion” is merely shifting most values over. In one case we have to also add to said values. use crate::Answer; const N_TIMERS: usize = 9; type Timers = [usize; N_TIMERS]; fn read_input(input: &str) -> Option { let mut timers = [0; N_TIMERS]; let nums = input .trim() .split(',') .map(|s| s.parse().ok()) .collect::>>()?; for num in nums { timers[num] += 1; } Some(timers) } fn tick_in_place(timers: &mut Timers) { let initial = timers[0]; for i in 0..(N_TIMERS - 1) { timers[i] = timers[i + 1]; } timers[8] = initial; timers[6] += initial; } // [usize; 9] implements Copy fn tick(n_times: usize, timers: &Timers) -> Timers { let mut timers = *timers; for _ in 0..n_times { tick_in_place(&mut timers); } timers } fn ans_for_input(input: &str) -> Answer { let timers = read_input(input).unwrap(); (6, (pt1(&timers), pt2(&timers))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"sample_input.txt\")) } fn pt1(timers: &Timers) -> usize { tick(80, timers).iter().sum() } fn pt2(timers: &Timers) -> usize { tick(256, timers).iter().sum() }","title":"Day 6: Lanternfish","component":"ROOT","version":"","name":"soln","url":"/src/day_06/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"8":{"id":8,"text":"Day #7 problem description │ Problem input This problem asks us, in effect, to find the number that minimizes the sum of particular measures of error. (Since the number of points is fixed, we will use “sum” and “mean” of the errors interchangeably, as they merely differ by a constant factor, the number of points.) A naive solution would iterate through all possibilities, but knowledge of statistics offers us a shortcut. In both parts, we aim to minimize an lpl_plp​-norm. Reading in the input: use crate::{utils::abs_diff, Answer}; fn read_input(s: &str) -> Option> { s.trim() .split(',') .map(|n| n.parse().ok()) .collect::>>() } fn ans_for_input(input: &str) -> Answer { let nums = read_input(input).unwrap(); (7, (pt1(&nums), pt2(&nums))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Part 1 asks us, in effect, to find the number xxx that minimizes the mean absolute deviation, or the l1l_1l1​-norm of the error. The number that does this is simply the median of the dataset. (In this problem, the median may be a half-integer, but the solution has to be an integer, so we can just round the median down.) Proof: If you are not at the median and move towards it, you are moving toward at least as many data points as you are moving away from, which at best decreases the mean absolute deviation and at worst leaves it unchanged. fn pt1>(nums: V) -> usize { let mut nums = nums.as_ref().to_vec(); nums.sort_unstable(); let datum_below = nums[nums.len() / 2]; let datum_above = nums[1 + (nums.len() - 1) / 2]; let median = (datum_below + datum_above) / 2; nums.iter().map(|&n| abs_diff(n, median)).sum() } In Part 2, the cost associated with a distance of nnn is ∑k=1nk=n(n+1)2\\sum_{k=1}^n k = \\frac{n(n+1)}{2}∑k=1n​k=2n(n+1)​. Since nnn is an integer, n2≥nn^2\\ge nn2≥n, and so n2+nn^2+nn2+n is “not relatively penalized more than” n2n^2n2 would be, which means the mean of the n(n+1)2\\frac{n(n+1)}{2}2n(n+1)​ will be minimized whenever the mean of n2n^2n2 is minimized. (It would be a problem if nnn exceeded n2n^2n2, as then it might dominate in the sum and we’d no longer be looking to minimize the mean of the n2n^2n2.) This is the mean squared error (MSE, or l2l_2l2​-norm of the error), and it is a well-known fact of statistics that the MSE is minimized by the arithmetic mean of the data. The only catch is that the arithmetic mean need not be an integer, but the solution to the problem must be. Naturally we simply try the two integers on either side of the arithmetic mean (which will both be the arithmetic mean itself if it’s an integer) and pick whichever of the two leads to a smaller error. This works because the error is concave up, i.e., a local minimum is the global minimum. fn pt2>(nums: V) -> usize { fn cost(mean: usize, nums: &[usize]) -> usize { nums.iter() .map(|&n| { let diff = abs_diff(n, mean); diff * (diff + 1) / 2 }) .sum() } let nums = nums.as_ref(); let sum = nums.iter().sum::(); let len = nums.len(); let mean_rounded_down = sum / len; if sum % len == 0 { cost(mean_rounded_down, nums) } else { let mean_rounded_up = (sum - 1) / len + 1; cost(mean_rounded_down, nums).min(cost(mean_rounded_up, nums)) } }","title":"Day 7: The Treachery of Whales","component":"ROOT","version":"","name":"soln","url":"/src/day_07/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"9":{"id":9,"text":"Day #8 problem description │ Problem input What an interesting problem! We are asked to deduce the manner in which a computer has been incorrectly hooked up to a seven-segment display (7SD): We will use the following display schematic, with the segments labeled A–G: 0: 1: 2: 3: 4: AAAA AAAA AAAA B C C C C B C B C C C C B C DDDD DDDD DDDD E F F E F F E F F E F F GGGG GGGG GGGG 5: 6: 7: 8: 9: AAAA AAAA AAAA AAAA AAAA B B C B C B C B B C B C B C DDDD DDDD DDDD DDDD F E F F E F F F E F F E F F GGGG GGGG GGGG GGGG The computer sends a stream of digits that we see as various patterns of lit segments on the 7SD. The computer has the correct logic to display digits, but its wires to the 7SD got crossed during setup, so the digits it attempts to display end up looking like gibberish to us. But because the computer’s underlying logic still holds, we can still deduce things from its output. For instance, if it lights up only two segments, we know that it is trying to display a 1 (because 1 is the only digit made of exactly two segments), and so the two segments it lit up should be rewired to the two segments CF (although we still don’t know in which order). If it lights up five segments, then it could be trying to display either a 2 (ACDEG), 3 (ACDFG), or 5 (ABDFG). By observing the patterns it lights up, and using our knowledge of how the digits 0–9 should have been displayed, we can deduce the full wiring scheme and how the computer must be rewired to the display in order to function correctly. The only other wrinkle is we don’t even get to tell the computer which digits to attempt to display; that is entirely up to it. We simply receive a stream of some digits, and from that must deduce the wiring scheme. The Solution The strategy is as follows: for each garbled digit we see, record its pattern and the list of candidate digits (those having the same number of segments turned on). Then, by taking set differences and intersections between the patterns seen and their candidates, we can derive more specific information about the rewiring. For instance: Suppose the computer sends two digits and lights up ABD and AB. ABD only has one candidate, 7 (ACF), because only 7 has three segments turned on. AB only has one candidate, 1 (CF), because only 1 has two segments turned on. Then we take the difference of the displayed segments — ABD − AB = D — and all pairwise differences between their corresponding candidates (just one in this case) — ACF − CF = A — to deduce that D must be rewired to A. We continue this logic, subtracting (say) the map D ➜ A from other display-candidate pairs to narrow them down. We are done when we know the one segment that each segment needs to be rewired to. Suppose the computer sends ABCDE; its candidates would be 2 (ACDEG), 3 (ACDFG), and 5 (ABDFG). If it then sends DEF, its candidates would be just 7 (ACF). The intersection of the two sent digits is DE. Taking the pairwise intersections between the candidates, and keeping only those with the same length as DE, we see that the candidates for DE are AC and AF. Subtracting D ➜ A from this, we deduce that E must be mapped to either C or F. Subtracting D ➜ A and E ➜ C|F from DEF ➜ ACF, we see that F ➜ C|F as well. Continuing this way, we can eventually deduce all the mappings. First, we model the notion of a digit. #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)] struct Digit { segments: [bool; N_SEGMENTS], n_on: usize, } impl Digit { fn new(segments: [bool; N_SEGMENTS]) -> Self { Self { segments, n_on: segments.iter().filter(|&&b| b).count(), } } fn from_str(s: &str) -> Self { let mut segments = [false; N_SEGMENTS]; for c in s.bytes() { let i = c - b'a'; segments[usize::from(i)] = true; } Self::new(segments) } fn _bin_op(self, rhs: Self, f: impl Fn(bool, bool) -> bool) -> Self { Self::new(self.segments.zip(rhs.segments).map(|(x, y)| f(x, y))) } } impl std::ops::BitOr for Digit { type Output = Self; fn bitor(self, rhs: Self) -> Self::Output { self._bin_op(rhs, |x, y| x | y) } } impl std::ops::BitAnd for Digit { type Output = Self; fn bitand(self, rhs: Self) -> Self::Output { self._bin_op(rhs, |x, y| x & y) } } impl std::ops::Not for Digit { type Output = Self; fn not(self) -> Self::Output { Self::new(self.segments.map(|b| !b)) } } impl From for Digit { fn from(n: usize) -> Self { let segments = match n { /* -----[A, B, C, D, E, F, G] */ 0 => [1, 1, 1, 0, 1, 1, 1], 1 => [0, 0, 1, 0, 0, 1, 0], 2 => [1, 0, 1, 1, 1, 0, 1], 3 => [1, 0, 1, 1, 0, 1, 1], 4 => [0, 1, 1, 1, 0, 1, 0], 5 => [1, 1, 0, 1, 0, 1, 1], 6 => [1, 1, 0, 1, 1, 1, 1], 7 => [1, 0, 1, 0, 0, 1, 0], 8 => [1, 1, 1, 1, 1, 1, 1], 9 => [1, 1, 1, 1, 0, 1, 1], _ => panic!(\"Cannot make digit for n={}\", n), }; let segments = segments.map(|i| i != 0); Self::new(segments) } } impl From for usize { fn from(digit: Digit) -> Self { let segments = digit.segments.map(u8::from); match segments { /* [A, B, C, D, E, F, G] */ [1, 1, 1, 0, 1, 1, 1] => 0, [0, 0, 1, 0, 0, 1, 0] => 1, [1, 0, 1, 1, 1, 0, 1] => 2, [1, 0, 1, 1, 0, 1, 1] => 3, [0, 1, 1, 1, 0, 1, 0] => 4, [1, 1, 0, 1, 0, 1, 1] => 5, [1, 1, 0, 1, 1, 1, 1] => 6, [1, 0, 1, 0, 0, 1, 0] => 7, [1, 1, 1, 1, 1, 1, 1] => 8, [1, 1, 1, 1, 0, 1, 1] => 9, _ => panic!(\"Digit {:?} is not valid\", digit), } } } The Algorithm We repeatedly take the intersection and set-differences between digits, getting a more and more refined mapping until finally we are left with a 1:1 mapping. use crate::Answer; use std::collections::{btree_map::Entry as MapEntry, BTreeMap as Map, BTreeSet as Set}; const N_SEGMENTS: usize = 7; fn get_mapping_from_garbled_digits>( garbled_digits: impl Iterator, ) -> Result, Map>> { let mut mappings = Map::new(); { let mut grouped_by_n_on = Map::new(); for n in 0..=9 { let digit = Digit::from(n); grouped_by_n_on .entry(digit.n_on) .or_insert_with(Set::new) .insert(digit); } for gd in garbled_digits { let gd = *gd.borrow(); let digits_w_same_n_segments = &grouped_by_n_on[&gd.n_on]; mappings.insert(gd, digits_w_same_n_segments.clone()); } } let identity: &dyn Fn(Digit) -> _ = &(|x| x); let bitwise_not: &dyn Fn(Digit) -> _ = &(|x| !x); loop { let mut new_mappings = Map::new(); for (i, (&garbled1, choices1)) in mappings.iter().enumerate() { for (&garbled2, choices2) in mappings.iter().skip(i + 1) { for (op1, op2) in [ (identity, identity), (identity, bitwise_not), (bitwise_not, identity), ] { let new_garbled = op1(garbled1) & op2(garbled2); if new_garbled.n_on == 0 { continue; } let mut new_good_candidates = Set::new(); for &good_digit1 in choices1 { for &good_digit2 in choices2 { let candidate = op1(good_digit1) & op2(good_digit2); if candidate.n_on == new_garbled.n_on { new_good_candidates.insert(candidate); } } } match new_mappings.entry(new_garbled) { MapEntry::Vacant(v) => { v.insert(new_good_candidates); } MapEntry::Occupied(mut o) => { o.insert(o.get() & &new_good_candidates); } } } } } // Remove all keys that can be written as the disjoint-bitwise-or of two other // keys, as they're redundant. This means if e.g., A and BC are present, then // remove ABC. But if only AB and BC are present, then do *not* remove ABC (as AB // and BC are not disjoint) let mut redundant_keys = Set::new(); let new_garbled_keys = new_mappings.keys().copied().collect::>(); for (i, &garbled1) in new_garbled_keys.iter().enumerate() { for &garbled2 in new_garbled_keys.iter().skip(i + 1) { if (garbled1 & garbled2).n_on != 0 { continue; } let segment_union = garbled1 | garbled2; if new_garbled_keys.contains(&segment_union) { redundant_keys.insert(segment_union); } } } for k in &redundant_keys { new_mappings.remove(k); } if mappings.len() == N_SEGMENTS && mappings.values().all(|m| m.len() == 1) { return Ok(mappings .into_iter() .map(|(k, v)| (k, v.iter().next().copied().unwrap())) .collect()); } else if mappings == new_mappings { return Err(mappings); } mappings = new_mappings; } } fn apply_mapping_to_garbled_digit(mapping: &Map, garbled_digit: Digit) -> usize { let mut result = Digit::new([false; 7]); for (&k, &v) in mapping { if (garbled_digit & k).n_on > 0 { result = result | v; } } result.into() } fn read_input(input: &str) -> Vec, Vec)> { fn whitespace_sepd_strs_to_digits(strs: &str) -> Vec { strs.trim() .split_ascii_whitespace() .map(Digit::from_str) .collect() } input .lines() .filter_map(|line| { let line = line.trim(); if line.is_empty() { return None; } let mut in_out = line.split('|'); let in_digits = whitespace_sepd_strs_to_digits(in_out.next()?); let out_digits = whitespace_sepd_strs_to_digits(in_out.next()?); Some((in_digits, out_digits)) }) .collect() } fn translate_line_to_digits>( idod: (impl Iterator, impl Iterator), ) -> Option> { let (in_digits, out_digits) = idod; let mapping = get_mapping_from_garbled_digits(in_digits).ok()?; Some( out_digits .map(|d| apply_mapping_to_garbled_digit(&mapping, *d.borrow())) .collect(), ) } fn ans_for_input(input: &str) -> Answer { let in_out_lines = read_input(input); let output_digits = in_out_lines .iter() .map(|(in_d, out_d)| translate_line_to_digits((in_d.iter(), out_d.iter()))) .collect::>>() .unwrap(); (8, (pt1(output_digits.iter()), pt2(output_digits.iter()))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1>(out_digits: impl Iterator) -> usize { out_digits .map(|v| { v.as_ref() .iter() .filter(|&n| [1, 4, 7, 8].contains(n)) .count() }) .sum() } fn pt2>(out_digits: impl Iterator) -> usize { out_digits .map(|v| { v.as_ref() .iter() .rev() .enumerate() .map(|(pow10, &val)| val * 10_usize.pow(u32::try_from(pow10).unwrap())) .sum::() }) .sum() }","title":"Day 8: Seven Segment Search","component":"ROOT","version":"","name":"soln","url":"/src/day_08/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"10":{"id":10,"text":"Day #9 problem description │ Problem input Nothing complicated here. We must do the following things with a 2D matrix whose entries are between 1 and 9 (inclusive). In Part 1 we have to find the local minima of the matrix. In Part 2 we have to find the matrix’s maximal connected regions containing no 9s. This is just a DFS through the matrix with a small amount of bookkeeping. use crate::Answer; use ndarray::prelude::*; use std::collections::BTreeSet as Set; #[derive(Debug)] struct Heightmap { arr: Array2, } fn get_neighbor_idxs( [row, col]: [usize; 2], n_rows: usize, n_cols: usize, ) -> [[Option; 2]; 4] { [ [(row + 1 Option { let width = s.lines().next()?.chars().count(); let height = s.lines().count(); let mut data = Vec::new(); for line in s.lines() { data.extend( line.trim() .chars() .map(|c| c.to_digit(10).and_then(|d| usize::try_from(d).ok())), ); } let data = data.iter().copied().collect::>>()?; let arr = Array2::from_shape_vec((width, height), data).ok()?; Some(Self { arr }) } } fn ans_for_input(input: &str) -> Answer { let hm = Heightmap::from_str(input).unwrap(); (9, (pt1(&hm), pt2(&hm))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } impl Heightmap { fn is_lower_than_neighbors(&self, idx: [usize; 2]) -> bool { let val = self.arr[idx]; let (n_rows, n_cols) = self.arr.dim(); let neighbors = get_neighbor_idxs(idx, n_rows, n_cols); for idx_pair in neighbors { let idxs = match idx_pair { [Some(r), Some(c)] => [r, c], _ => continue, }; if self.arr[idxs] Vec { let (n_rows, n_cols) = self.arr.dim(); let mut idxs = Vec::new(); for r in 0..n_rows { for c in 0..n_cols { if self.is_lower_than_neighbors([r, c]) { idxs.push([r, c]); } } } idxs } } fn pt1(hm: &Heightmap) -> usize { hm.idxs_where_lower_than_neighbors() .into_iter() .map(|idx| hm.arr[idx] + 1) .sum() } impl Heightmap { fn basin_sizes(&self) -> Vec { let (n_rows, n_cols) = self.arr.dim(); let mut basin_sizes = Vec::new(); let mut not_yet_visited_idxs = (0..n_rows) .flat_map(|r| { (0..n_cols).filter_map(move |c| { let idx = [r, c]; (self.arr[idx] != 9).then_some(idx) }) }) .collect::>(); while let Some(first_idx) = not_yet_visited_idxs.pop_first() { let mut visited_idxs = Set::new(); let mut coords_stack = vec![first_idx]; while let Some(idx) = coords_stack.pop() { if !visited_idxs.insert(idx) { continue; } let neighbor_idxs = get_neighbor_idxs(idx, n_rows, n_cols); for nghbr_idx in neighbor_idxs { let nghbr_idx = match nghbr_idx { [Some(r), Some(c)] => [r, c], _ => continue, }; if self.arr[nghbr_idx] != 9 && !visited_idxs.contains(&nghbr_idx) { coords_stack.push(nghbr_idx); } } for idx in &visited_idxs { not_yet_visited_idxs.remove(idx); } } basin_sizes.push(visited_idxs.len()); } basin_sizes } } fn pt2(hm: &Heightmap) -> usize { let mut basin_sizes = hm.basin_sizes(); basin_sizes.sort_unstable_by_key(|&size| std::cmp::Reverse(size)); basin_sizes.into_iter().take(3).product() }","title":"Day 9: Smoke Basin","component":"ROOT","version":"","name":"soln","url":"/src/day_09/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"11":{"id":11,"text":"Day #10 problem description │ Problem input Pretty basic. Parsing is done with a token stack; when we see paired braces at the top of the stack, we pop them both. If we see mismatched braces, we immediately know we have a Corrupted token stream. If we make it to the end of the input without match-and-popping everything — i.e., if the stack isn’t empty at the end — then we have an Incomplete token stream. use crate::Answer; #[derive(Clone, Copy, Debug, PartialEq, Eq)] enum Brace { Paren, Square, Curly, Angle, } #[derive(Clone, Copy, Debug, PartialEq, Eq)] enum Orientation { Left, Right, } impl Orientation { fn flip(self) -> Self { use Orientation::*; match self { Left => Right, Right => Left, } } } #[derive(Clone, Copy, Debug, PartialEq, Eq)] struct Token { brace: Brace, orientation: Orientation, } impl Token { fn from_char(c: char) -> Option { use Brace::*; use Orientation::*; let (orientation, brace) = match c { '(' => (Left, Paren), ')' => (Right, Paren), '[' => (Left, Square), ']' => (Right, Square), '{' => (Left, Curly), '}' => (Right, Curly), ' (Left, Angle), '>' => (Right, Angle), _ => return None, }; Some(Self { brace, orientation }) } fn flip(self) -> Self { Self { orientation: self.orientation.flip(), ..self } } } enum TokenizationErr { Corrupted(Token), Incomplete(Vec), } type ParseResult = Result; fn parse_line>(line: impl Iterator) -> ParseResult { use Orientation::*; let mut token_stack = Vec::new(); for curr in line { let curr = *curr.borrow(); match token_stack.last() { None => { token_stack.push(curr); } Some(&prev) => { if prev.orientation == Left && curr.orientation == Right { if prev.brace != curr.brace { return Err(TokenizationErr::Corrupted(curr)); } token_stack.pop(); } else { token_stack.push(curr); } } } } if !token_stack.is_empty() { return Err(TokenizationErr::Incomplete( token_stack.iter().rev().map(|t| t.flip()).collect(), )); } Ok(()) } fn read_input(input: &str) -> Option>> { input .lines() .map(|line| { line.trim() .chars() .map(Token::from_char) .collect::>>() }) .collect::>>() } fn ans_for_input(input: &str) -> Answer { let tokens = read_input(input).unwrap(); let parsed_lines = tokens .iter() .map(|v| parse_line(v.iter())) .collect::>(); (10, (pt1(parsed_lines.iter()), pt2(parsed_lines.iter()))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1>(prs: impl Iterator) -> usize { use Brace::*; prs.filter_map(|r| { let r = r.borrow(); if let Err(TokenizationErr::Corrupted(t)) = r { Some(match t.brace { Paren => 3, Square => 57, Curly => 1197, Angle => 25137, }) } else { None } }) .sum() } fn pt2>(prs: impl Iterator) -> usize { use Brace::*; let mut scores = prs .filter_map(|r| { let r = r.borrow(); if let Err(TokenizationErr::Incomplete(tokens)) = r { let mut score = 0_usize; for t in tokens { score *= 5; let token_score = match t.brace { Paren => 1, Square => 2, Curly => 3, Angle => 4, }; score += token_score; } Some(score) } else { None } }) .collect::>(); scores.sort_unstable(); scores[scores.len() / 2] }","title":"Day 10: Syntax Scoring","component":"ROOT","version":"","name":"soln","url":"/src/day_10/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"12":{"id":12,"text":"Day #11 problem description │ Problem input These problems where you just have to manage the state of an array and update it correctly, and potentially query the state of the array, aren’t that interesting to me anymore. There is no algorithmic interestingness to them. use crate::Answer; use ndarray::prelude::*; #[derive(Clone, Debug)] struct Octopi { arr: Array2, } impl Octopi { fn from_str(s: &str) -> Option { let mut data = Vec::new(); let width = s.lines().next()?.len(); let height = s.lines().count(); for line in s.lines() { data.extend( line.trim() .chars() .map(|c| c.to_digit(10).and_then(|d| usize::try_from(d).ok())), ); } let data = data.into_iter().collect::>>()?; let arr = Array2::from_shape_vec((width, height), data).ok()?; Some(Self { arr }) } fn tick_in_place_and_count_flashes(&mut self) -> usize { // We use equality with FLASH_THRESH to mean \"will flash right now\", whereas being // greater than FLASH_THRESH means \"has already flashed (and won't flash again)\" let flash_thresh = 10; let (n_rows, n_cols) = self.arr.dim(); self.arr.mapv_inplace(|x| x + 1); let mut n_flashes = 0; loop { let flashing_octopi_idxs = (0..n_rows) .flat_map(|r| { let arr = &self.arr; (0..n_cols).filter_map(move |c| { let idx = [r, c]; let val = &arr[idx]; (*val == flash_thresh).then_some(idx) }) }) .collect::>(); if flashing_octopi_idxs.is_empty() { break; } n_flashes += flashing_octopi_idxs.len(); for [base_row, base_col] in flashing_octopi_idxs { self.arr[[base_row, base_col]] += 1; let rows = [ base_row.checked_sub(1), Some(base_row), (base_row + 1 = flash_thresh { 0 } else { val }); n_flashes } } fn ans_for_input(input: &str) -> Answer { let octopi = Octopi::from_str(input).unwrap(); (11, (pt1(octopi.clone()), pt2(octopi))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn tick(mut octopi: Octopi, n: usize) -> usize { let mut n_flashes = 0; for _ in 0..n { n_flashes += octopi.tick_in_place_and_count_flashes(); } n_flashes } fn pt1(octopi: Octopi) -> usize { tick(octopi, 100) } fn pt2(mut octopi: Octopi) -> usize { let mut n = 0; while octopi.arr.iter().any(|&val| val != 0) { octopi.tick_in_place_and_count_flashes(); n += 1; } n }","title":"Day 11: Dumbo Octopus","component":"ROOT","version":"","name":"soln","url":"/src/day_11/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"13":{"id":13,"text":"Day #12 problem description | Problem input Finally, a problem that isn’t just about array manipulation. This problem asks us to count the number of paths from the origin node of an undirected graph to the destination node, with constraints on how many times we may visit certain nodes, but no constraints on how many times we may use an edge. (Note that the problem has us exploring an underwater cave system, so the source code below refers to nodes as “caves”.) Nodes are classified as either “big” or “small”, depending on the case of their name in the input. A big node can be visited arbitrarily many times, whereas a small node can only be visited a limited number of times. (If two big nodes were adjacent, then there would be infinitely many paths through the graph since because we could just bounce back and forth between them forever.) First, we must build the graph. We ingest the list of edges into a dictionary mapping each node to the set of nodes reachable from it. After doing this we traverse the graph. We maintain a stack representing the current path; we push onto the stack from the choices in the current node’s entry in the dictionary, and when we’ve exhausted all of the edges available from the current node, we pop the current node. We don’t actually maintain a stack in the code; we merely use the call stack. use crate::Answer; use std::collections::BTreeMap as Map; #[derive(Debug, PartialEq, Eq, PartialOrd, Ord)] enum CaveKind { Big, Small, } #[derive(Debug, PartialEq, Eq, PartialOrd, Ord)] struct Cave { name: &'a str, kind: CaveKind, } impl Cave { fn new(name: &'a str) -> Self { let is_small = name.chars().map(|c| c.is_ascii_lowercase()).all(|b| b); let kind = if is_small { CaveKind::Small } else { CaveKind::Big }; Self { name, kind } } } #[derive(Debug)] struct CaveSystem { edges: Map>>, } impl CaveSystem { fn from_str(input: &'a str) -> Option { let mut edges = Map::new(); for line in input.lines() { let mut splat = line.split('-'); let left = splat.next()?; let right = splat.next()?; for (orig, dest) in [(left, right), (right, left)] { if orig != \"end\" && dest != \"start\" { edges .entry(orig) .or_insert_with(Vec::new) .push(Cave::new(dest)); } } } Some(Self { edges }) } } impl CaveSystem { fn traverse_helper( &'a self, curr_cave: &'a str, n_finished: &mut usize, cave_visit_counts: &mut Map, can_visit_one_small_cave_twice: bool, has_visited_a_small_cave_twice: bool, ) { for next_cave in &self.edges[curr_cave] { if next_cave.name == \"end\" { *n_finished += 1; continue; } let this_dest_n_visits = cave_visit_counts.entry(next_cave.name).or_insert(0); let is_small_cave = next_cave.kind == CaveKind::Small; if is_small_cave && (*this_dest_n_visits >= 1 && (!can_visit_one_small_cave_twice || has_visited_a_small_cave_twice)) { continue; } *this_dest_n_visits += 1; let n_visits = *this_dest_n_visits; self.traverse_helper( next_cave.name, n_finished, cave_visit_counts, can_visit_one_small_cave_twice, has_visited_a_small_cave_twice || is_small_cave && n_visits >= 2, ); // \"un-visit\" this cave for the next loop iteration cave_visit_counts .entry(next_cave.name) .and_modify(|v| *v -= 1); } } fn traverse(&'a self, can_visit_one_small_cave_twice: bool) -> usize { let mut n_finished = 0; let mut cave_visit_counts = Map::new(); self.traverse_helper( \"start\", &mut n_finished, &mut cave_visit_counts, can_visit_one_small_cave_twice, false, ); n_finished } } fn ans_for_input(input: &str) -> Answer { let cave_system = CaveSystem::from_str(input).unwrap(); (12, (pt1(&cave_system), pt2(&cave_system))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } In Part 1, we may only visit each small node at most once. Part 2 is slightly more relaxed; in addition to the paths visiting each small node at most once, valid paths now include those in which a single small node is visited a second time. But this wrinkle was already handled in the Setup section; we switch the behavior with a single boolean argument. fn pt1(cave: &CaveSystem) -> usize { cave.traverse(false) } fn pt2(cave: &CaveSystem) -> usize { cave.traverse(true) }","title":"Day 12: Passage Pathing","component":"ROOT","version":"","name":"soln","url":"/src/day_12/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"14":{"id":14,"text":"Day #13 problem description │ Problem input This problem asks us track how dots on a transparent piece of paper migrate as that piece of paper is folded across vertical and horizontal lines. Throughout, the upper left corner of the page remains fixed in place; folds move the bottom right corner either up or to the left. It is a precondition that no dot will lie on a fold. When the page is reflected over the vertical line x=ax=ax=a, one of two things will happen to the dot (x,y)(x,y)(x,y): If (x,y)(x,y)(x,y) is left of x=ax=ax=a (i.e., x { X(T), Y(T), } impl Fold { fn from_str(s: &str) -> Option { let mut words = s.split_whitespace(); words.next()?; words.next()?; let fold_eqn = words.next()?; let mut eqn_sides = fold_eqn.split('='); let var = eqn_sides.next()?; let value = eqn_sides.next()?.parse::().ok()?; Some(match var { \"x\" => Self::X(value), \"y\" => Self::Y(value), _ => return None, }) } } #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)] struct Point(T, T); impl Point { fn folded(&self, across: &Fold) -> Self { let &Point(x, y) = self; match *across { Fold::X(fold_x) => { let new_x = if x > fold_x { fold_x - (x - fold_x) } else { x }; Point(new_x, y) } Fold::Y(fold_y) => { let new_y = if y > fold_y { fold_y - (y - fold_y) } else { y }; Point(x, new_y) } } } } #[derive(Clone, Debug)] struct Paper { dots: Set>, } impl Paper { fn from_dots(dots: impl IntoIterator>) -> Paper { let dots = dots.into_iter().collect(); Self { dots } } fn folded_across(&self, fold: &Fold) -> Paper { let mut dots = Set::new(); for p in &self.dots { dots.insert(p.folded(fold)); } Paper::from_dots(dots) } fn do_folds>>( &self, folds: impl Iterator, ) -> Paper { let mut paper = self.clone(); for fold in folds { let fold = fold.borrow(); paper = paper.folded_across(fold); } paper } } fn read_input(input: &str) -> Option, Vec>)> { let mut lines = input.lines(); let points = lines .by_ref() .take_while(|line| !line.trim().is_empty()) .map(|line| { let mut comps = line.split(','); let x = comps.next()?.parse::().ok()?; let y = comps.next()?.parse::().ok()?; Some(Point(x, y)) }) .collect::>>()?; let paper = Paper::::from_dots(points); let folds = lines.map(Fold::::from_str).collect::>>()?; Some((paper, folds)) } fn ans_for_input(input: &str) -> Answer { let (paper, folds) = read_input::(input).unwrap(); (13, (pt1(&paper, &folds[0]), pt2(&paper, folds.iter()))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Part 1 has us perform a single fold. (Just one? No fun!) fn pt1(paper: &Paper, fold: &Fold) -> usize { paper.folded_across(fold).dots.len() } Part 2 has us perform all of the folds, and then read the resulting arrangement of dots as a password containing eight capital capital letters. impl Display for Paper { fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result { let (max_x, max_y) = { let mut max_x = num::zero(); let mut max_y = num::zero(); for &Point(x, y) in &self.dots { if x > max_x { max_x = x; } if y > max_y { max_y = y; } } (max_x, max_y) }; for y in num::range_step_inclusive(num::zero(), max_y, num::one()) { for x in num::range_step_inclusive(num::zero(), max_x, num::one()) { f.write_str(if self.dots.contains(&Point(x, y)) { \"█\" // unicode \"full block\" 0x2588 } else { \" \" })?; } f.write_str(\"\\n\")?; } Ok(()) } } fn pt2>>( paper: &Paper, folds: impl Iterator, ) -> String { let ans = paper.do_folds(folds); println!(\"{}\", ans); ans.to_string() } For once, the input is actually interesting! It’s not enough to just “get the answer” (say, the positions of the dots at the end of the folding procedure); we have to print them out too so that we can read them. Here was my output: PGHZBFJC. ███ ██ █ █ ████ ███ ████ ██ ██ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ ████ █ ███ ███ █ █ ███ █ ██ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ █ ███ █ █ ████ ███ █ ██ ██","title":"Day 13: Transparent Origami","component":"ROOT","version":"","name":"soln","url":"/src/day_13/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"15":{"id":15,"text":"Day #14 problem description │ Problem input This problem asks us to perform a sequence of transformations to a starting string and then compute the counts of characters in the resulting string. Specifically, we are given a map from pairs of characters to single characters. Each generation, each pair of characters in the original string is to have its entry in this map (if it exists) inserted between the two characters. This runs on a specified starting string for a specified number of generations, producing a final string. My initial attempt involved actually building the string at each stage. Unfortunately, because the string approximately doubles in length in each step, it’s computationally infeasible to generate the string the requested 40 generations out, nor would we be able to store it in memory (240 is around one trillion). The right way to do this problem is to maintain a tally of counts of each pair (c1, c2) of characters in the string. Each generation, we run through the pairs, and if the mapping contains a character c3 to insert, then we remove key (c1, c2) and assign its tally to keys (c1, c3) and (c3, c2). This doesn’t tell us what the resulting string is, but thankfully the problem doesn’t ask us about the string per se; it only asks for character counts within the string. To count the number of times a character c appears in the string, we simply note that it is counted twice, once for each pair it is the first character of and once for each pair it is the second character of. So we just add up the number of times we see it in a pair and then divide by 2, right? Wrong! The first (respectively, last) character of the string is actually only counted once because it is only the first (respectively, second) character of one pair of characters, not two. The way we model this is maintain a tally not just of character counts, but of the positions of those characters. Our tally now assigns counts to triples (c1, c2, pos0) where pos0 is one of “start”, “middle”, and “end”. When we insert c3 between c1 and c2, we obtain (c1, c3, pos1) and (c3, c2, pos2), where: pos1 is either “start” or “middle”; it is “start” if and only if pos0 was “start”, and pos2 is either “end” or “middle”; it is “end” if and only if pos0 was “end”. Now, only the characters occurring in the “middle” are double-counted, so the number of times a character appears in the final string is the number of times it occurred in a character pair in the “start” or “end” positions, plus half the number of times it occurred in a “middle” character pair. To make the counting easier when working with integers and floored division, we double the “start” and “end” character counts, add them to the “middle” character counts, and then halve everything at the end. As you might have guessed, my first attempt at this problem did not keep track of pairs’ positions and so was plagued by an off-by-one error which only arose for specific inputs. (I believe it had to do with whether the final string started and ended with the same character, but I didn’t bother generating test cases to check this.) My first submission was too large, so I subtracted 1 from it and re-submitted and got it correct. This was the first problem of this year’s Advent of Code that I thought it was feasible for someone to arrive at the right answer with buggy code and some guesswork. use crate::Answer; use std::collections::BTreeMap as Map; #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord)] enum Position { Start, Middle, End, } #[derive(Debug)] struct Polymer { template: String, mapping: Map, } impl Polymer { fn from_str(s: &str) -> Option { let mut lines = s.lines(); let template = lines.next()?.to_owned(); lines.next()?; let mut mapping = Map::new(); for line in lines { let mut splat = line.split(\" -> \"); let mut outer_chars = splat.next()?.chars(); let left = outer_chars.next()?; let right = outer_chars.next()?; let inner = splat.next()?.chars().next()?; mapping.insert((left, right), inner); } Some(Polymer { template, mapping }) } fn get_initial_char_pair_counts(&self) -> Map { use Position::*; let mut ans = Map::new(); // Iterate over adjacent pairs of chars. The last index iterated is `n_pairs - 1` // with `n_pairs == self.template.len() - 1` for (i, (c1, c2)) in self .template .chars() .zip(self.template.chars().skip(1)) .enumerate() { let position = if i == 0 { Start } else if i == self.template.len() - 2 { End } else { Middle }; *ans.entry((c1, c2, position)).or_default() += 1; } ans } fn apply_n_times(&self, n: usize) -> Map { use Position::*; let mut pair_counts = self.get_initial_char_pair_counts(); for _ in 0..n { let pair_counts_vec = pair_counts .iter() .filter_map(|(&k, &v)| if v > 0 { Some((k, v)) } else { None }) .collect::>(); for (key, count) in pair_counts_vec { let (c1, c2, position) = key; if let Some(&c) = self.mapping.get(&(c1, c2)) { let first_pos = match position { Start => Start, _ => Middle, }; let second_pos = match position { End => End, _ => Middle, }; *pair_counts.entry((c1, c, first_pos)).or_default() += count; *pair_counts.entry((c, c2, second_pos)).or_default() += count; *pair_counts.get_mut(&key).unwrap() -= count; } } } pair_counts } } fn get_ans(polymer: &Polymer, n: usize) -> usize { use Position::*; let char_pair_counts = polymer.apply_n_times(n); let char_counts = { let mut char_counts_2x = Map::new(); for ((c1, c2, position), count) in char_pair_counts { let c1_multiplier = match position { Start => 2, _ => 1, }; let c2_multiplier = match position { End => 2, _ => 1, }; for (c, mult) in [(c1, c1_multiplier), (c2, c2_multiplier)] { *char_counts_2x.entry(c).or_insert(0) += mult * count; } } char_counts_2x .into_iter() .map(|(k, v)| (k, v / 2)) .collect::>() }; let mut max_count = 0; let mut min_count = usize::MAX; for &count in char_counts.values() { if count max_count { max_count = count; } } max_count - min_count } fn ans_for_input(input: &str) -> Answer { let polymer = Polymer::from_str(input).unwrap(); (14, (pt1(&polymer), pt2(&polymer))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1(polymer: &Polymer) -> usize { get_ans(polymer, 10) } fn pt2(polymer: &Polymer) -> usize { get_ans(polymer, 40) }","title":"Day 14: Extended Polymerization","component":"ROOT","version":"","name":"soln","url":"/src/day_14/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"16":{"id":16,"text":"Day #15 problem description │ Problem input Given a grid of numbers, this problem asks us to find the path from the grid’s top left corner to its bottom right corner that minimizes the sum of all numbers used in the path, which we will call the path’s cost. This is a classic CS problem which can be solved with the A* Algorithm. My initial solution used a (max-) priority queue to choose the next node to examine, with priority equal to the (negative of the) total cost of the path up to that node. While this solution worked, it took an inordinate amount of time on the larger input, which was 500×500. (I suspect that this was due to the fact that the implementation of that priority queue uses a HashMap instead of a (perhaps) more optimal structure such as a BTreeMap. I also didn’t really feel like seeing if I could speed it up with a faster hasher. And I definitely didn’t want to implement my own priority queue with a BTreeMap instead.) Despite being theoretically suboptimal, my second solution performed much faster. This new solution was simply to maintain a grid of tentative costs to reach each number on the grid. This grid of tentative costs was initially set to u32::MAX, except for the top left corner which was set to 0. On each iteration, for each node PPP in the grid, we examine PPP’s four neighbors. If the cost to reach a neighbor through PPP is cheaper than the neighbor’s current tentative cost, we replace the latter cost with the former cost. We repeat this process until no modifications are made to any tentative cost, at which point the answer is simply the cost of reaching the bottom right corner. use crate::Answer; use ndarray::prelude::*; type Cost = u32; type Grid = Array2; type Coords = (usize, usize); fn read_input(input: &str) -> Option { let mut lines = input.lines(); let mut grid = vec![]; let first_line = lines.next()?; for c in first_line.chars() { grid.push(c.to_digit(10)? as Cost); } let n_cols = grid.len(); for line in lines { for c in line.chars() { grid.push(c.to_digit(10)? as Cost); } } let n_rows = grid.len() / n_cols; assert_eq!(n_rows * n_cols, grid.len()); Array2::from_shape_vec((n_rows, n_cols), grid).ok() } enum Direction { N, S, E, W, } impl Direction { fn stepping_from(&self, grid: &Grid, (from_row, from_col): Coords) -> Option { use Direction::*; let (min_row, min_col) = (0, 0); let (n_rows, n_cols) = grid.dim(); let max_row = n_rows - 1; let max_col = n_cols - 1; let new_row = match self { N if from_row == min_row => return None, N => from_row - 1, S if from_row == max_row => return None, S => from_row + 1, _ => from_row, }; let new_col = match self { W if from_col == min_col => return None, W => from_col - 1, E if from_col == max_col => return None, E => from_col + 1, _ => from_col, }; Some((new_row, new_col)) } } fn traversal_cost(entry_costs: &Grid) -> Cost { use Direction::*; let (n_rows, n_cols) = entry_costs.dim(); let max_row = n_rows - 1; let max_col = n_cols - 1; let mut net_travel_costs = Grid::from_shape_simple_fn((n_rows, n_cols), || Cost::MAX); net_travel_costs[(0, 0)] = 0; let max_dist = max_row + max_col; loop { let mut did_modify = false; for dist in 0..=max_dist { let r_min = if dist nghbr_coords, None => continue, }; let net_cost_to_travel_to_nghbr_thru_here = net_cost_to_travel_here + entry_costs[nghbr_coords]; if net_cost_to_travel_to_nghbr_thru_here Answer { let grid = read_input(input).unwrap(); (15, (pt1(&grid), pt2(&grid))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1(grid: &Grid) -> Cost { traversal_cost(grid) } Part 2 asked us not just to traverse the grid, but to construct a larger grid to use as our input, which was formed by concatenating modified copies of Part 1’s input. This falls under “boring array manipulation”, so I won’t discuss it further. fn expand_grid(grid: &Grid, k: usize) -> Grid { let (n_rows, n_cols) = grid.dim(); let mut new_grid = Array2::from_shape_simple_fn((k * n_rows, k * n_cols), || 0); // Arrays are in row major order, so that's the order we iterate in (for cache-friendliness) for outer_r in 0..k { for inner_r in 0..n_rows { for outer_c in 0..k { for inner_c in 0..n_cols { let old_cost = grid[(inner_r, inner_c)]; let d_cost = Cost::try_from(outer_r + outer_c).unwrap(); let new_cost = (old_cost + d_cost - 1) % 9 + 1; let new_grid_r = outer_r * n_rows + inner_r; let new_grid_c = outer_c * n_cols + inner_c; new_grid[(new_grid_r, new_grid_c)] = new_cost; } } } } new_grid } fn pt2(grid: &Grid) -> Cost { let grid = expand_grid(grid, 5); traversal_cost(&grid) }","title":"Day 15: Chiton","component":"ROOT","version":"","name":"soln","url":"/src/day_15/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"17":{"id":17,"text":"Day #16 problem description │ Problem input Dear lord, this problem was brutal. It consisted of roughly three parts: Parse a hex string into a binary string by parsing each hex character into a quartet — trivial (Part 1) Parse this binary string into a tree of packets according to rules set out in the problem statement — “easy” in the sense that I wrote up an almost correct solution in no time at all. Very very hard in the sense that it required precise bookkeeping and it took forever for me to get it all exactly correct. But from a theoretical standpoint it wasn’t really that hard. (Part 2) Evaluate the packet tree as an expression tree (more or less like parsing S-expressions) — easy. The main function here is Binary::as_packets. There’s a lot to unpack here, but roughly the algorithm is as follows: Maintain a cursor into the original data Maintain a stack of parse states, which consist of: The depth in the parse tree The length of remaining data for this packet. Packets tell us how much data they expect; when there isn’t any left, we head back up a level in the tree. So we have to track how much of their data we’ve consumed so far. This “amount of data” quantity comes in two flavors: Number of bits that the children comprise Number of direct children, i.e., number of child packets One tricky bit is that packets share bits-remaining with their children. In other words, if a child consumes some bits from the input, so have all of its ancestors that count their data in bits. (Packets that are expecting a fixed number of child packets are unaffected when their descendants consume data.) In either case, if the current packet has no more data remaining — 0 bits or 0 child packets — continue on to the next parse state on the stack. Looking at the data beginning at the cursor, parse the stream into a single packet. Advance the cursor the number of bits this packet consumed. If this packet was an operator, increment the depth, as its children will follow. Otherwise the depth remains unchanged. Push a new parse state onto the stack, containing the incremented depth and the length of remaining data for this packet. If this packet was the last of its parent’s children, decrement the depth. use crate::{utils::to_big_decimal, Answer}; use std::fmt::{Display, Write}; type Number = i64; struct Binary(Vec); impl Binary { fn from_hex(s: &str) -> Option { let mut binary = Vec::with_capacity(s.len() * 4); for c in s.trim().chars() { let n = c.to_digit(16)?; let digits = [3, 2, 1, 0usize].map(|place| ((1 ) -> std::fmt::Result { for &digit in &self.0 { let c = if digit { '1' } else { '0' }; f.write_char(c)?; } Ok(()) } } impl Binary { fn as_packets(&self) -> Vec { #[derive(Debug)] enum RemainingData { NBits(usize), NPackets(usize), } impl RemainingData { fn is_empty(&self) -> bool { matches!(self, RemainingData::NBits(0) | RemainingData::NPackets(0)) } } #[derive(Debug)] struct ParseState { depth: usize, remaining: RemainingData, } let mut packets = vec![]; let orig_data = &self.0; let header_length = 6; let mut cursor = 0; let mut stack = vec![ParseState { depth: 0, remaining: RemainingData::NPackets(1), }]; while let Some(parse_state) = stack.pop() { let ParseState { depth, remaining } = parse_state; if remaining.is_empty() { continue; } let packet_bits = &orig_data[cursor..]; let version_number = to_big_decimal(&packet_bits[0..3]); let kind_number = to_big_decimal(&packet_bits[3..6]); let data_bits = &packet_bits[header_length..]; let parent_packet_length = match remaining { RemainingData::NBits(n) => RemainingData::NBits(n), RemainingData::NPackets(n) => RemainingData::NPackets(n - 1), }; stack.push(ParseState { depth, remaining: parent_packet_length, }); let packet; let n_bits_consumed; match kind_number { 4 => { let chunk_size = 5; let mut bin_bits = vec![]; let mut n_chunks = 0; for chunk in data_bits.chunks_exact(5) { n_chunks += 1; bin_bits.extend_from_slice(&chunk[1..]); if !chunk[0] { break; } } let value = i64::try_from(to_big_decimal(bin_bits)).unwrap(); n_bits_consumed = header_length + n_chunks * chunk_size; packet = Packet { version_number, kind: PacketKind::Literal { value }, depth, }; } op => { let op_data_length; let n_bits_for_length; let length_type = data_bits[0]; if length_type { // length in packets n_bits_for_length = 12; let n_packets = usize::try_from(to_big_decimal(&data_bits[1..n_bits_for_length])) .unwrap(); op_data_length = RemainingData::NPackets(n_packets); } else { // length in bits n_bits_for_length = 16; let n_bits = usize::try_from(to_big_decimal(&data_bits[1..n_bits_for_length])) .unwrap(); op_data_length = RemainingData::NBits(n_bits); }; n_bits_consumed = header_length + n_bits_for_length; // A hack; we're going to subtract n_bits_consumed from this later // despite the fact that in theory we shouldn't (because the newly added // packet hasn't consumed any data yet), so we we pre-add n_bits_consumed // here so that when we subtract it later we end up with the right number // of bits let op_data_length = match op_data_length { RemainingData::NBits(n) => RemainingData::NBits(n + n_bits_consumed), rd @ RemainingData::NPackets(_) => rd, }; packet = Packet { version_number, kind: PacketKind::Operator { op: op.into() }, depth, }; stack.push(ParseState { depth: depth + 1, remaining: op_data_length, }); } }; cursor += n_bits_consumed; for ps in &mut stack { if let RemainingData::NBits(n) = &mut ps.remaining { if *n > 0 { // The hack above is to counteract this subtraction; if we just pushed // a RemainingData::NumBits, we won't actually have consumed any of // its input yet // // If our code has no bugs, and the input is trustworthy, this will // never underflow. *n -= n_bits_consumed; } } } packets.push(packet); } packets } } #[derive(Debug)] enum PacketKind { Literal { value: Number }, Operator { op: Operation }, // Defined in pt2 } #[derive(Debug)] struct Packet { version_number: u64, kind: PacketKind, depth: usize, } fn read_input(input: &str) -> Vec { let b = Binary::from_hex(input).unwrap(); b.as_packets() } fn ans_for_input(input: &str) -> Answer { let p = read_input(input); (16, (pt1(&p), pt2(&p).unwrap())).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Part 1 just asks us to compute some summary data of all the packets in the parse tree. As long as we have the right packets (regardless of their depths) we’ll get the right answer. fn pt1(packets: &[Packet]) -> u64 { packets.iter().map(|packet| packet.version_number).sum() } Part 2 asks us to actually evaluate the packet tree as a tree of an expressions, akin to S-expressions. While this wasn’t hard, one challenge was to implement it without code duplication. The way I achieved this was to split the operators into two families, Reducers (+, *, min, and max) and Operatorss (≤, ==, ≥) which essentially comprise their own interfaces that specify how they should be applied to values in the stack. #[derive(Debug)] enum Reducer { Sum, Product, Min, Max, } impl Reducer { fn identity(&self) -> Number { use Reducer::*; match self { Sum => 0, Product => 1, Min => Number::MAX, Max => Number::MIN, } } fn combine(&self, x: Number, y: Number) -> Number { use Reducer::*; match self { Sum => x + y, Product => x * y, Min => x.min(y), Max => x.max(y), } } } #[derive(Debug)] enum Comparitor { Gt, Lt, Eq, } impl Comparitor { fn apply(&self, x: Number, y: Number) -> Number { use Comparitor::*; i64::from(match self { Gt => x > y, Lt => x x == y, }) } } #[derive(Debug)] enum Operation { Reduce(Reducer), Compare(Comparitor), } impl From for Operation { fn from(n: u64) -> Self { use Comparitor::*; use Operation::*; use Reducer::*; match n { 0 => Reduce(Sum), 1 => Reduce(Product), 2 => Reduce(Min), 3 => Reduce(Max), 5 => Compare(Gt), 6 => Compare(Lt), 7 => Compare(Eq), _ => unreachable!(), } } } fn pt2(packets: &[Packet]) -> Option { struct Arg { depth: usize, value: Number, } let mut arg_stack = vec![]; for Packet { kind: packet_kind, depth: packet_depth, .. } in packets.iter().rev() { let packet_depth = *packet_depth; match packet_kind { &PacketKind::Literal { value } => arg_stack.push(Arg { depth: packet_depth, value, }), PacketKind::Operator { op } => { use Operation::*; let value = match op { Reduce(reducer) => { let mut result = reducer.identity(); while let Some(arg @ Arg { depth, value }) = arg_stack.pop() { if depth { let Arg { value: first, .. } = arg_stack.pop()?; let Arg { value: second, .. } = arg_stack.pop()?; comparitor.apply(first, second) } }; arg_stack.push(Arg { depth: packet_depth, value, }); } } } Some(arg_stack.first()?.value) }","title":"Day 16: Packet Decoder","component":"ROOT","version":"","name":"soln","url":"/src/day_16/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"18":{"id":18,"text":"Day #17 problem description │ Problem input Holy crap. This problem was hard. After looking at the subreddit it looks like most people just brute forced it. That’s easy, but where’s the fun in that? Where possible, we want to solve these problems in the most computationally efficient manner possible. We are asked to find the initial xxx- and yyy-velocities that will land a projectile, fired from the origin, in a given rectangular region R=[xmin,xmax]×[ymin,ymax]R=[x_\\mathrm{min}, x_\\mathrm{max}]\\times[y_\\mathrm{min}, y_\\mathrm{max}]R=[xmin​,xmax​]×[ymin​,ymax​]. In the xxx-direction, the projectile suffers from drag, so its xxx-velocity decreases by 1 each tick until it hits 0 (at which point it can’t slow down anymore). In the yyy-direction, the projectile is affected by gravity (but no drag (?)), so its yyy-velocity decreases by each tick, forever. All numbers — time, positions, and velocities — must be (not-necessarily-positive) integers. (And, naturally, time must be positive.) This is an important and helpful constraint on the values we can use. The solution below does not use brute force; it does not, for instance, try all vxv_xvx​s between 0 and RRR's right edge, or all vyv_yvy​s between −abs(vmax)-\\mathrm{abs}(v_\\mathrm{max})−abs(vmax​) and abs(vmax)\\mathrm{abs}(v_\\mathrm{max})abs(vmax​). All potential times, positions, and speeds are derived mathematically. It has no problem running on a target area of x=1000000..1001000, y=-1000000..-1001000 (although this particular target area requires being able to take the integer square root of large numbers, which I did not implement myself). type Time = i64; type Num = i64; #[derive(Debug, Clone, Copy, PartialEq, Eq)] struct Pos { x: T, y: T, } #[derive(Debug, Clone, Copy, PartialEq, Eq)] struct Velo { vx: T, vy: T, } #[derive(Debug, Clone, Copy)] struct Rect { x_min: T, x_max: T, y_min: T, y_max: T, } #[derive(Debug, Clone, Copy)] struct Trajectory { _t: Time, _pos: Pos, velo: Velo, } fn read_input(input: &str) -> Option> { let re = { regex::Regex::new(r\"target area:\\s*x=([\\d-]+)\\.\\.([\\d-]+),\\s*y=([\\d-]+)\\.\\.([\\d-]+)\") .ok()? }; let caps = re.captures(input.trim())?; let [x1, x2, y1, y2] = // force line break :/ [1, 2, 3, 4].map(|i| caps.get(i).and_then(|m| m.as_str().parse().ok())); let [x1, x2, y1, y2] = [x1?, x2?, y1?, y2?]; let [x_min, x_max] = if x1 Option { let sqrt = Roots::sqrt(&n); if sqrt * sqrt == n { Some(sqrt) } else { None } } The Math Because xxx decreases by 1 each tick until it hits 0, and yyy decreases by 1 each tick forever, we have the following equations for the xxx- and yyy-coordinates at time ttt of a projectile fired with an initial velocity of (vx,vy)(v_x, v_y)(vx​,vy​). (Derivations are left to the reader, but a helpful fact is that 1+2+…+n=12n(n+1)1+2+\\ldots+n=\\frac{1}{2}n(n+1)1+2+…+n=21​n(n+1).) x(t,vx)={vxt−12t(t−1)t≤vx12vx(vx+1)t≥vxy(t,vy)=vyt−12t(t−1)\\begin{align*} x(t, v_x) &= \\begin{cases} v_x t - \\frac{1}{2}t(t-1)&t \\le v_x\\\\ \\frac{1}{2}v_x(v_x+1)&t \\ge v_x \\end{cases}\\\\ y(t, v_y)&=v_y t - \\frac{1}{2}t(t-1) \\end{align*}x(t,vx​)y(t,vy​)​={vx​t−21​t(t−1)21​vx​(vx​+1)​t≤vx​t≥vx​​=vy​t−21​t(t−1)​ Note that even though the two definitions of xxx overlap at t=vxt=v_xt=vx​, they also coincide there, so it’s not a problem. Now, we must find the values of (vx,vy)(v_x,v_y)(vx​,vy​) that land the projectile in RRR. To do this, we simply find the values of (vx,vy)(v_x,v_y)(vx​,vy​) that will land the projectile precisely at a point (x,y)(x,y)(x,y) in RRR, for each (x,y)∈R(x,y)\\in R(x,y)∈R. And to do this, we find the (vx,vy)(v_x,v_y)(vx​,vy​) that will land the projectile at (x,y)(x,y)(x,y) precisely at time ttt, for each positive ttt. To find the velocities that will land the projectile precisely at (t,x,y)(t,x,y)(t,x,y), we solve the above equations for vxv_xvx​ and vyv_yvy​. Finding vyv_yvy​ is simple: vy=2y+t(t−1)2tv_y=\\frac{2y+t(t-1)}{2t}vy​=2t2y+t(t−1)​. For vxv_xvx​, it’s a bit more complicated, as we have two options: vx={2x+t(t−1)2tt≤vx−1±1+8x2t≥vxv_x=\\begin{cases} \\frac{2x+t(t-1)}{2t}&t\\le v_x\\\\ \\frac{-1\\pm\\sqrt{1+8x}}{2}&t\\ge v_x \\end{cases}vx​={2t2x+t(t−1)​2−1±1+8x​​​t≤vx​t≥vx​​ And as we said above, we need everything to be an integer, so we can either have no pairs of velocities that work, one pair, or two pairs. fn find_velocities(t: Time, position: Pos) -> [Option>; 2] { if t == 0 { return [Some(Velo { vx: 0, vy: 0 }), None]; } let Pos { x, y } = position; let vy_numer = 2 * y + t * (t - 1); let vy_denom = 2 * t; let vy = if vy_numer % vy_denom == 0 { vy_numer / vy_denom } else { return [None, None]; }; let vx1 = { let vx_numer = 2 * x + t * (t - 1); let vx_denom = 2 * t; let vx = vx_numer / vx_denom; if vx_numer % vx_denom == 0 && vx >= t { Some(vx) } else { None } }; let vx2 = { let discriminant = 1 + 8 * x; sqrt(discriminant).and_then(|sqrt_disc| { let vx_numer = sqrt_disc - 1; let vx_denom = 2; let vx = vx_numer / vx_denom; if vx_numer % vx_denom == 0 && vx 0v_y>0vy​>0 hits y=0y=0y=0 on the way down. Therefore we exclude y=0y=0y=0 from consideration altogether; a problem that included y=0y=0y=0 in RRR would have infinitely many answers or be impossible to solve. fn find_ts_and_vys_for_y(y: Num) -> Vec { assert_ne!(y, 0); let mut ans = vec![]; // Need to find all integer (t, vy) that satisfy y = vy * t - t*(t-1)/2 with t > 0 // // Step one: (2*vy + 1)^2 - 8*y = must be square // // In other words there must exist integral m and n such that m^2 - n^2 = 8y (with // 2*vy + 1 = m). m^2 - n^2 = (m-n)*(m+n), and so... let eight_y = 8 * y; let abs_eight_y = eight_y.abs(); for k1 in 1..=Roots::sqrt(&abs_eight_y) { if abs_eight_y % k1 != 0 { continue; } for sign in [-1, 1] { let k1 = sign * k1; let k2 = eight_y / k1; // k1 and k2 are now two signed integers that multiply to 8y let two_m = k1 + k2; if two_m % 2 != 0 { continue; } let m = two_m / 2; // Now, m was 2*vy + 1, and so... if (m - 1) % 2 != 0 { continue; } let vy = (m - 1) / 2; let discriminant = m * m - eight_y; if discriminant Num { if t ) -> Vec { let Rect { x_min, x_max, y_min, y_max, } = rect; let mut trajectories = vec![]; for y in y_min..=y_max { if y == 0 { // If any vx works, then there will be infinitely many choices for vy because it // retraces its ascent on its descent. And if no vx works, then it's moot continue; } let ts_and_vys = find_ts_and_vys_for_y(y); for (t, vy) in ts_and_vys { for x in x_min..=x_max { let velocities = find_velocities(t, Pos { x, y }); for velo in velocities { let velo = match velo { Some(v) => v, None => continue, }; if velo.vy == vy && get_x(t, velo.vx) == x { trajectories.push(Trajectory { _t: t, _pos: Pos { x, y }, velo, }); } } } } } trajectories } Once we get all the trajectories, the actual answers we’re asked for are pretty simple. Part 1 asks us to find the maximum possible height that can be achieved by a projectile that reaches RRR. As we said above, a projectile with initial yyy-velocity vyv_yvy​ reaches an apex of 12vy(vy+1)\\frac{1}{2}v_y(v_y+1)21​vy​(vy​+1). fn pt1>(trajectories: impl Iterator) -> Option { trajectories .map(|traj| { let traj = *traj.borrow(); let vy = traj.velo.vy; if vy >(trajectories: impl Iterator) -> usize { trajectories .map(|traj| { let Trajectory { velo, .. } = *traj.borrow(); (velo.vx, velo.vy) }) .collect::>() .len() }","title":"Day 17: Trick Shot","component":"ROOT","version":"","name":"soln","url":"/src/day_17/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"19":{"id":19,"text":"Day #18 problem description │ Problem input This problem asks us to parse a nested structure of pairs into a binary tree and then split or combine nodes according to a set of rules. Rather than store the tree as an actual tree, which would be easy (maybe) but would suffer from poor cache locality, we store the nodes in a Vec and record the depth of each node. This makes traversing and manipulating the tree much easier than if they were stored in a “real” tree; the nodes to the left and right of index i are simply those at i-1 and i+1, respectively (if they exist). #[derive(Debug, Clone, Copy, Eq, PartialEq)] struct Elem { value: u32, depth: usize, } #[derive(Debug, PartialEq, Eq)] struct SnailNum> { elems: Elems, depth: usize, } The operations are performed as follows: Exploding A pair is exploded by finding the first flat pair of depth at least four and storing the two values; the first is added to the node to the left and the second is added to the node to the right. The second element of the pair is then deleted. /// Explodes the first explode-able pair in the list. \\ /// Returns the `Option` pair of `Option` indices of the elements to the left and right /// (the ones being modified), in that order. `None` means there was no pair to explode; /// `(None, Some(2))` means the exploded pair had no elements to the left of it (it /// was at index 0), and the element to its right was added to fn explode_first(&mut self) -> Option, Option)> { let elems = &mut self.elems; let ((l_idx, l_elem), (r_idx, r_elem)) = elems .iter() .enumerate() .zip(elems.iter().enumerate().skip(1)) .find_map(|((i1, &e1), (i2, &e2))| { if e1.depth > 4 && e1.depth == e2.depth { Some(((i1, e1), (i2, e2))) } else { None } })?; elems[l_idx] = Elem { value: 0, depth: l_elem.depth - 1, }; let changed_l_idx = if l_idx > 0 { let idx = l_idx - 1; elems[idx].value += l_elem.value; Some(idx) } else { None }; elems.remove(r_idx); let changed_r_idx = if r_idx Option { let elems = &mut self.elems; let (split_idx, Elem { value, depth }) = elems.iter().enumerate().find_map(|(i, &elem)| { if elem.value >= 10 { Some((i, elem)) } else { None } })?; let new_l_value = value / 2; let new_r_value = (value + 1) / 2; let new_elem = Elem { value: new_l_value, depth: depth + 1, }; elems[split_idx] = new_elem; elems.insert( split_idx + 1, Elem { value: new_r_value, depth: new_elem.depth, }, ); Some(split_idx) } Adding Two pairs are added by placing them in a containing pair. This is manifested as simply concatenating the two vectors and then incrementing all the depths. Notably, addition is not associative. fn add(&self, other: &Self) -> SnailNumOwned { let elems = self .elems .as_ref() .iter() .chain(other.elems.as_ref()) .map(|&Elem { value, depth }| Elem { value, depth: depth + 1, }) .collect(); let mut ans = SnailNumOwned::owning(elems); ans.reduce(); ans } Finding Pairs in the Vector The only somewhat tricky part is determining the tree structure from the vector of depths. A singleton is returned as an Err containing its value. A “flat” pair (a pair whose elements are both atomic) appears as two consecutive elements of the same depth. Non-flat pairs can be found by traversing the nodes from left to right, maintaining a stack of node depths, and, whenever the top two elements of the stack have the same depth ddd, collapsing them into a single element with a depth of d−1d-1d−1. When a pair with elements of depth 1 is found, we have split the tree into its two top-level pairs. If desired, we can then recurse on these to split the descendants into deeper pairs. fn as_pair(&self) -> Result { let elems = self.elems.as_ref(); assert_ne!(elems.len(), 0, \"{}\", self.depth); if elems.len() == 1 { return Err(self.elems.as_ref()[0].value); } let mut depth_stack = vec![]; for (i, &Elem { depth, .. }) in elems.iter().enumerate() { depth_stack.push(depth); loop { match depth_stack.pop() { None => break, Some(curr_depth) => { if curr_depth == self.depth + 1 { let (left, right) = elems.split_at(i + 1); return Ok(( SnailNum::borrowing(left, curr_depth), SnailNum::borrowing(right, curr_depth), )); } match depth_stack.pop() { None => { depth_stack.push(curr_depth); break; } Some(prev_depth) => { if prev_depth == curr_depth { depth_stack.push(curr_depth - 1); } else { depth_stack.extend([prev_depth, curr_depth]); break; } } } } } } } unreachable!() } Magnitude of a Pair Self explanatory: fn magnitude(&self) -> u32 { match self.as_pair() { Ok((left, right)) => 3 * left.magnitude() + 2 * right.magnitude(), Err(val) => val, } } Functions listed above are omitted here. use crate::Answer; use std::fmt::{Debug, Display}; type SnailNumOwned = SnailNum>; type SnailNumBorrowed = SnailNum; impl SnailNumOwned { fn from_line(line: &str) -> Self { let mut addends = Vec::::new(); let mut depth = 0; let mut prev_was_digit = false; for c in line.trim().chars() { let mut c_is_digit = false; match c { '[' => depth += 1, ']' => depth -= 1, '0'..='9' => { let digit = c.to_digit(10).unwrap(); if prev_was_digit { let val = addends.last_mut().unwrap(); val.value = 10 * val.value + digit; } else { addends.push(Elem { value: digit, depth, }); } c_is_digit = true; } ',' => {} _ => { panic!(\"Unexpected character {:?}\", c); } } prev_was_digit = c_is_digit; } SnailNum::owning(addends) } fn by_adding_lines_in, I: IntoIterator>(lines: I) -> Self { let mut lines = lines.into_iter(); let mut ans = SnailNumOwned::from_line(lines.next().unwrap().as_ref()); for line in lines { ans = ans.add(&SnailNumOwned::from_line(line.as_ref())); } ans } fn from_str(input: &str) -> Self { Self::by_adding_lines_in(input.lines()) } fn owning(elems: Vec) -> Self { Self { elems, depth: 0 } } fn reduce_once(&mut self) -> bool { self.explode_first().is_some() || self.split_first().is_some() } fn reduce(&mut self) { while self.reduce_once() {} } // Contains explode_first and split_first, which only operate on owned snail nums } impl SnailNumBorrowed { fn borrowing(elems: &'a [Elem], base_depth: usize) -> Self { Self { elems, depth: base_depth, } } } impl> SnailNum { // Contains add, as_pair, and magnitude } fn ans_for_input(input: &str) -> Answer { let snail_num = SnailNumOwned::from_str(input); (18, (pt1(&snail_num), pt2(input))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Part 1 simply asks to perform addition on the input numbers. fn pt1>(snail_num: &SnailNum) -> u32 { snail_num.magnitude() } Part 2 asks to find the maximum pairwise sum of the input numbers. fn pt2(input: &str) -> u32 { let mut max_mag = u32::MIN; let snail_nums = input .lines() .map(SnailNumOwned::from_line) .collect::>(); for (i, sn1) in snail_nums.iter().enumerate() { for sn2 in snail_nums.iter().skip(i + 1) { let mag1 = sn1.add(sn2).magnitude(); let mag2 = sn2.add(sn1).magnitude(); max_mag = max_mag.max(mag1).max(mag2); } } max_mag }","title":"Day 18: Snailfish","component":"ROOT","version":"","name":"soln","url":"/src/day_18/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"20":{"id":20,"text":"Day #19 problem description │ Problem input This problem asks us to essentially solve a 3D jigsaw puzzle; we are given “pieces” (scanners) and need to find how they fit together by looking at their “edges” (beacons). As in an ordinary puzzle, we might need to rotate pieces to get them to mesh. To solve this, we simply try every solution: we start with Scanner #1 and try to adjoin each other scanner to it. Once we find a scanner that works, we go back to step 1 and try to adjoin a new scanner to the two-scanner union, and when we’ve done that we try to adjoin a new scanner to the three-scanner union, etc. If at any point we can’t fit a new scanner onto the existing scanners, we backtrack, removing scanners so that we can add them in a different way. We’re done when all scanners have been adjoined. Technically there is a wrinkle that this solution ignores: it is not sufficient for scanners to merely fit together, i.e., to have overlapping beacons; additionally, each of the scanners in an adjoined pair must not have any beacons in the shared region that the other scanner in the pair does not have. In other words, they must agree on all, not just some, of the beacons in the region where they intersect. We ignore this wrinkle altogether; thankfully the authors were kind enough to give us input where this doesn’t matter. Because this “puzzle” is three-dimensional, there are 24 ways to orient a piece with respect to another (six faces can be “up”, and then there are four ways to rotate about the up-axis). In the code, one of these 24 orientations is referred to as a Swivel. For each orientation, we find all translations that cause the pieces to fit together; these are Translations. (A Swivel and a Translation together form a Transform.) Then we rinse and repeat with the next piece. To actually do the math, we simply use matrix multiplication. As always, the matrix TTT that performs a given transformation is the matrix whose columns are T(e1),…,T(en)T(e_1), \\ldots, T(e_n)T(e1​),…,T(en​) where e1,…,ene_1,\\ldots,e_ne1​,…,en​ are the basis vectors. The function that does the heavy lifting here is Scanner::merge_all, which simply starts with the first provided scanner and then repeatedly tries to form larger and larger unions by merging the other scanners with the existing union. It stops when it first successfully merges all scanners together. use crate::Answer; use std::{borrow::Borrow, collections::BTreeSet}; use strum::IntoEnumIterator; use strum_macros::EnumIter; type Triple = [i32; 3]; #[derive(Debug, Clone, Copy)] struct Matrix3([i32; 9]); impl Matrix3 { fn from_cols(x: impl Into, y: impl Into, z: impl Into) -> Self { let x = x.into(); let y = y.into(); let z = z.into(); Self([x[0], y[0], z[0], x[1], y[1], z[1], x[2], y[2], z[2]]) } fn row(&self, i: usize) -> Triple { [0, 1, 2].map(|j| self.0[3 * i + j]) } fn col(&self, i: usize) -> Triple { [0, 1, 2].map(|j| self.0[i + 3 * j]) } fn mat_mul(&self, other: Self) -> Self { let mut entries = [0; 9]; let mut i = 0; for r in 0..3 { let self_row = self.row(r); for c in 0..3 { let other_col = other.col(c); entries[i] = (0..3).map(|i| self_row[i] * other_col[i]).sum(); i += 1; } } Self(entries) } fn mul_vec(&self, col: Triple) -> Triple { let mut entries = [0; 3]; for (r, elem) in entries.iter_mut().enumerate() { let self_row = self.row(r); *elem = (0..3).map(|i| self_row[i] * col[i]).sum(); } entries } } impl std::ops::Index for Matrix3 { type Output = i32; fn index(&self, index: [usize; 2]) -> &Self::Output { let [row, col] = index; &self.0[3 * row + col] } } #[derive(Clone, Copy, Debug, EnumIter, PartialEq, Eq, PartialOrd, Ord)] enum Axis { PosX, NegX, PosY, NegY, PosZ, NegZ, } impl From for Triple { fn from(axis: Axis) -> Self { use Axis::*; match axis { PosX => [1, 0, 0], NegX => [-1, 0, 0], PosY => [0, 1, 0], NegY => [0, -1, 0], PosZ => [0, 0, 1], NegZ => [0, 0, -1], } } } #[derive(Clone, Copy, Debug, EnumIter, PartialEq, Eq, PartialOrd, Ord)] enum RotationCcw { Zero, Quarter, Half, ThreeQuarters, } #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)] struct Swivel { up_face: Axis, rotation_about_up: RotationCcw, } impl Swivel { fn new(up_face: Axis, rotation_about_up: RotationCcw) -> Self { Self { up_face, rotation_about_up, } } fn identity() -> Self { Self::new(Axis::PosZ, RotationCcw::Zero) } fn apply(self, point: Triple) -> Triple { use Axis::*; use RotationCcw::*; let mat_to_bring_face_to_up = match self.up_face { PosX => Matrix3::from_cols(PosZ, PosY, NegX), NegX => Matrix3::from_cols(NegZ, PosY, PosX), PosY => Matrix3::from_cols(PosX, PosZ, NegY), NegY => Matrix3::from_cols(PosX, NegZ, PosY), PosZ => Matrix3::from_cols(PosX, PosY, PosZ), NegZ => { // We have a couple options; we pick the one that rotates about the y axis // because it's easier to actually rotate my hand that way Matrix3::from_cols(NegX, PosY, NegZ) } }; let mat_to_rotate_about_up = match self.rotation_about_up { Zero => Matrix3::from_cols(PosX, PosY, PosZ), Quarter => Matrix3::from_cols(PosY, NegX, PosZ), Half => Matrix3::from_cols(NegX, NegY, PosZ), ThreeQuarters => Matrix3::from_cols(NegY, PosX, PosZ), }; mat_to_bring_face_to_up .mat_mul(mat_to_rotate_about_up) .mul_vec(point) } } #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)] struct Translation(Triple); impl Translation { fn identity() -> Self { Self([0, 0, 0]) } fn apply(&self, point: Triple) -> Triple { let [x, y, z] = point; let [tx, ty, tz] = self.0; [x + tx, y + ty, z + tz] } fn manhattan_dist(&self) -> u32 { let [x, y, z] = self.0; u32::try_from(x.abs() + y.abs() + z.abs()).unwrap() } } #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)] struct Transform { swivel: Swivel, translation: Translation, } impl From for Transform { fn from(swivel: Swivel) -> Self { Self { swivel, translation: Translation([0, 0, 0]), } } } impl From for Transform { fn from(translation: Translation) -> Self { Self { swivel: Swivel::new(Axis::PosZ, RotationCcw::Zero), translation, } } } impl Transform { fn identity() -> Self { Self { swivel: Swivel::identity(), translation: Translation::identity(), } } fn apply(&self, point: Triple) -> Triple { self.translation.apply(self.swivel.apply(point)) } } #[derive(Debug, Clone)] struct Scanner { beacons: BTreeSet, } impl Scanner { fn new(beacons: BTreeSet) -> Self { Self { beacons } } fn merged_with(&self, other: &Self) -> Self { Self { beacons: self.beacons.union(&other.beacons).copied().collect(), } } fn applying + Copy>(&self, transform: T) -> Self { let transform = transform.into(); Scanner::new(self.beacons.iter().map(|&p| transform.apply(p)).collect()) } fn candidates_for_merge(&self, other: &Scanner) -> Vec { let mut transforms = BTreeSet::new(); let mut candidates = vec![]; for up_face in Axis::iter() { for rotation in RotationCcw::iter() { let swivel = Swivel::new(up_face, rotation); let swiveled_other = other.applying(swivel); for swiveled_other_beacon in &swiveled_other.beacons { for this_beacon in &self.beacons { let translation = Translation( [0, 1, 2].map(|i| this_beacon[i] - swiveled_other_beacon[i]), ); let transformed_other = swiveled_other.applying(translation); if self .beacons .intersection(&transformed_other.beacons) .count() >= 12 { let transform = Transform { swivel, translation, }; let wasnt_present = transforms.insert(transform); if wasnt_present { candidates.push((transform, transformed_other)); } } } } } } candidates } fn merge_all>( scanners: impl AsRef, ) -> Option, Scanner)> { let scanners = scanners.as_ref(); let (first, rest) = scanners.split_first().unwrap(); let first = first.borrow(); if rest.is_empty() { return Some((vec![Transform::identity()], first.clone())); } for (i, s) in rest.iter().enumerate() { let s = s.borrow(); for (transform, transformed_scanner) in first.candidates_for_merge(s) { let merged_scanner = first.merged_with(&transformed_scanner); let new_scanners = std::iter::once(&merged_scanner) .chain(rest.iter().enumerate().filter_map(|(j, s)| { if i == j { None } else { Some(s.borrow()) } })) .collect::>(); let merge_result = Scanner::merge_all(new_scanners); if let Some((transforms, ans)) = merge_result { return Some((std::iter::once(transform).chain(transforms).collect(), ans)); } } } None } } fn read_input(s: &str) -> Option> { let mut scanners = vec![]; let mut this_scanner_beacons = BTreeSet::new(); for line in s.lines().chain(std::iter::once(\"\")) { if line.starts_with(\"---\") { continue; } if line.is_empty() { scanners.push(Scanner::new(this_scanner_beacons.clone())); this_scanner_beacons.clear(); } else { let mut comps = line.split(','); let [x, y, z] = [0; 3].map(|_| comps.next()?.parse().ok()); let [x, y, z] = [x?, y?, z?]; this_scanner_beacons.insert([x, y, z]); } } Some(scanners) } fn ans_for_input(input: &str) -> Answer { let scanners = read_input(input).unwrap(); let (transforms, scanner) = Scanner::merge_all(scanners).unwrap(); let translations = transforms.iter().map(|t| t.translation).collect::>(); (19, (pt1(&scanner), pt2(&translations))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Part 1 asks us to simply count the distinct beacons after the scanners have all been merged. Below, scanner is obtained from let (transforms, scanner) = Scanner::merge_all(scanners).unwrap();. fn pt1(scanner: &Scanner) -> usize { scanner.beacons.len() } Part 2 asks us to find the maximum Manhattan distance between scanners. To do this, we have to track the transformation of each scanner in the successful merge; we then read the pairwise Manhattan distances from each scanner’s transformation’s translation. fn pt2>(translations: V) -> u32 { let translations = translations.as_ref(); let mut max_manh_dist = u32::MIN; for (i, translation1) in translations.iter().enumerate() { let [x1, y1, z1] = translation1.0; for translation2 in translations.iter().skip(i + 1) { let [x2, y2, z2] = translation2.0; let diff = Translation([x2 - x1, y2 - y1, z2 - z1]); max_manh_dist = max_manh_dist.max(diff.manhattan_dist()); } } max_manh_dist }","title":"Day 19: Beacon Scanner","component":"ROOT","version":"","name":"soln","url":"/src/day_19/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"21":{"id":21,"text":"Day #20 problem description │ Problem input This problem asks us to manipulate an infinitely large binary array, whose elements we’ll refer to as pixels. Only a finite interior portion of the array has “actual” content, which we store in a 2D array. The infinite surrounding (exterior) area is either all-on or all-off, which we store in a single variable separate from the interior portion of the array. Transforming a pixel requires knowing the state of each of the eight pixels it is adjacent to. The rules are the same for each pixel, but how they are applied in practice depends on whether the pixel is interior or exterior. If a given pixel is only adjacent to other interior pixels, we just look at look at those eight surrounding interior pixels. If a pixel is adjacent to both interior and exterior pixels, then we look at both the array of interior pixels and the state of the exterior pixels. The exterior pixels that are adjacent to interior pixels become interior themselves as part of this update, as they no longer necessarily share their state with the rest of the monolithic exterior. Thus the interior portion grows each step. All other pixels are exterior and are surrounded only by other exterior pixels; therefore they are all updated in the same manner. Since the exterior starts out as all-off, it remains either all-on or all-off for the duration of the problem. use crate::{utils::to_decimal, Answer}; use ndarray::prelude::*; use std::fmt::{Display, Write}; type Bit = bool; #[derive(Debug, Clone)] struct Image { mat: Array2, surrounding: Bit, algo: Vec, } impl Image { fn from_str(s: &str) -> Option { let mut lines = s.lines(); let algo = lines .next()? .chars() .map(|c| match c { '#' => true, '.' => false, _ => unreachable!(), }) .collect(); let data = lines .flat_map(|line| { line.trim().chars().map(|c| match c { '#' => true, '.' => false, _ => unreachable!(), }) }) .collect::>(); let n_cols = s.lines().nth_back(0)?.trim().len(); let n_rows = data.len() / n_cols; assert_eq!(n_rows * n_cols, data.len()); Some(Self { mat: Array2::from_shape_vec((n_rows, n_cols), data).unwrap(), surrounding: false, algo, }) } fn tick(&mut self) { let new_surrounding = { let index = usize::try_from(to_decimal([self.surrounding; 9])).unwrap(); self.algo[index] }; let grown_mat = Array2::from_shape_fn((self.mat.nrows() + 2, self.mat.ncols() + 2), |(r, c)| { if r self.mat.nrows() || c self.mat.ncols() { self.surrounding } else { self.mat[[r - 1, c - 1]] } }); let mut new_mat = Array2::from_shape_simple_fn(grown_mat.dim(), || false); for center_row in 0..grown_mat.nrows() { for center_col in 0..grown_mat.ncols() { let mut surrounding_pixels = vec![]; let surrounding_rows = [ center_row.checked_sub(1), Some(center_row), (center_row + 1 grown_mat[[r, c]], _ => self.surrounding, }; surrounding_pixels.push(bit); } } let replacement = self.algo[usize::try_from(to_decimal(surrounding_pixels)).unwrap()]; new_mat[[center_row, center_col]] = replacement; } } self.mat = new_mat; self.surrounding = new_surrounding; } fn tick_n_times(&mut self, n: usize) { for _ in 0..n { self.tick(); } } } fn ans_for_input(input: &str) -> Answer { let im1 = Image::from_str(input).unwrap(); let im2 = im1.clone(); (20, (pt1(im1), pt2(im2))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Parts 1 and 2 are nearly identical; they both ask to count the number of “on” pixels in the image resulting after kkk updates, where Part 1 has k=2k=2k=2 and Part 2 has k=50k=50k=50. (Notably, if the exterior switches state every update, then the number of “on” pixels will be infinite after every odd-numbered update.) fn pt1(im: Image) -> usize { let mut im = im; im.tick_n_times(2); im.mat.map(|&bit| usize::from(bit)).sum() } fn pt2(im: Image) -> usize { let mut im = im; im.tick_n_times(50); im.mat.map(|&bit| usize::from(bit)).sum() }","title":"Day 20: Trench Map","component":"ROOT","version":"","name":"soln","url":"/src/day_20/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"22":{"id":22,"text":"Day #21 problem description │ Problem input This problem asks us to simulate a two-layer dice game. In this game, a move consists of rolling a die three times, adding up the rolled numbers, and then moving around the board based on the sum. In Part 1 we merely need to simulate this game for a deterministic die; this is so simple it’s not worth discussing. In Part 2 we need to count how many times each player wins across every possible sequence of die rolls. (Thankfully, the die in Part 2 only has three sides.) My first attempt at this actually went through every possible sequence. With a three-sided die, and games ranging in length from (say) 50 to 100 rolls, this was clearly computationally infeasible. To improve upon this, we note that while there are 33=273^3=2733=27 ways to roll a three-sided die three times, there are only seven possible outcomes: the numbers 3 through 9. By precomputing the number of ways these sums can be rolled each turn, and then weighting each outcome by the number of ways it can be rolled, we cut down the base of the exponent by a factor of 277\\frac{27}{7}727​, bringing the problem well into the realm of what is computationally feasible. use crate::Answer; type Players = [Player; 2]; fn read_input(s: &str) -> Option { s.lines() .map(|line| { line.split(':') .nth_back(0)? .trim() .parse() .ok() .map(Player::new) }) .collect::>>()? .try_into() .ok() } struct Board { size: usize, } #[derive(Debug, Clone, Copy)] struct Player { score: usize, position: usize, } impl Player { fn new(pos: usize) -> Self { Self { score: 0, position: pos, } } fn roll_value(&mut self, board: &Board, value: usize) { let new_pos = ((self.position + value - 1) % board.size) + 1; self.position = new_pos; self.score += new_pos; } fn roll_deterministic_die(&mut self, board: &Board, die: &mut DeterministicDie) { let move_dist = (0..3).map(|_| die.roll()).sum::(); self.roll_value(board, move_dist); } } #[derive(Clone, Copy)] struct DeterministicDie { next: usize, min: usize, max: usize, n_rolls: usize, } impl DeterministicDie { fn new(min: usize, max: usize) -> Self { Self { next: 1, min, max, n_rolls: 0, } } fn roll(&mut self) -> usize { if self.next > self.max { self.next = self.min; } let ret = self.next; self.next += 1; self.n_rolls += 1; ret } } fn ans_for_input(input: &str) -> Answer { let board = Board { size: 10 }; let players = read_input(input).unwrap(); ( 21, ( pt1(players, &board, DeterministicDie::new(1, 10)), pt2(players), ), ) .into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1(mut players: Players, board: &Board, die: DeterministicDie) -> usize { let mut die = die; let mut loser = players[1]; 'game: loop { for player in &mut players { player.roll_deterministic_die(board, &mut die); if player.score >= 1000 { break 'game; } loser = *player; } } die.n_rolls * loser.score } #[derive(Debug)] struct Turn { players: Players, is_p0s_turn: bool, n_ways: usize, } fn play_quantum_dice( players: Players, board: &Board, die_n_faces: usize, n_rolls_per_turn: usize, win_threshold: usize, ) -> [usize; 2] { let mut tally = [0; 2]; let mut turn_stack = vec![Turn { players, is_p0s_turn: true, n_ways: 1, }]; // Pairs of `(dice sum, # ways)` let outcome_counts: [(usize, usize); 7] = { let max_sum = die_n_faces * n_rolls_per_turn; let mut counts = vec![0; max_sum + 1]; for r1 in 1..=die_n_faces { for r2 in 1..=die_n_faces { for r3 in 1..=die_n_faces { counts[r1 + r2 + r3] += 1; } } } counts .iter() .enumerate() .filter_map(|(i, &c)| if c > 0 { Some((i, c)) } else { None }) .collect::>() .try_into() .unwrap() }; while let Some(Turn { players, is_p0s_turn, n_ways: n_ways_to_have_gotten_here, }) = turn_stack.pop() { let player_index = if is_p0s_turn { 0 } else { 1 }; for (roll_value, n_ways_to_roll_this) in outcome_counts { let n_ways_to_get_here = n_ways_to_have_gotten_here * n_ways_to_roll_this; let mut player = players[player_index]; player.roll_value(board, roll_value); if player.score >= win_threshold { tally[player_index] += n_ways_to_get_here; } else { let mut players = players; players[player_index] = player; turn_stack.push(Turn { players, is_p0s_turn: !is_p0s_turn, n_ways: n_ways_to_get_here, }); } } } tally } fn pt2(players: Players) -> usize { let [p1_n_wins, p2_n_wins] = play_quantum_dice(players, &Board { size: 10 }, 3, 3, 21); p1_n_wins.max(p2_n_wins) }","title":"Day 21: Dirac Dice","component":"ROOT","version":"","name":"soln","url":"/src/day_21/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Part 1","hash":"_part_1","id":2},{"text":"Part 2","hash":"_part_2","id":3}]},"23":{"id":23,"text":"Day #22 problem description │ Problem input This problem asks us to find the 1×1×11\\times1\\times11×1×1 cubes — “small cubes” — in 3D space that remain after sequentially turning on and turning off the small cubes contained in a sequence of upright 3D rectangular prisms with integer coordinates; we’ll refer to these prisms as “boxes”. We record which small cubes remain after each operation as a list of boxes containing those cubes; the question is then how to record the boxes that result after performing the sequence of additions and subtractions between boxes. In other words, if at stage kkk the “on” cubes are contained in boxes B1,…,BnB_1,\\ldots,B_nB1​,…,Bn​, and we switch off the small cubes in Bn+1B_{n+1}Bn+1​, what set of boxes now contains the remaining “on” cubes? For simplicity, we’ll refer to the process of turning on the small cubes in a box BBB as “adding” BBB, and turning off the cubes in BBB as “subtracting” BBB. To subtract a single box B2B_2B2​ from another box B1B_1B1​, we first note that we only need to subtract the intersection B3≔B1∩B2B_3\\coloneqq B_1\\cap B_2B3​:=B1​∩B2​ of the two boxes from B1B_1B1​. Then, to subtract B3B_3B3​ from B1B_1B1​, we note that each maximal set of parallel edges of B3B_3B3​ divides the corresponding axis of B1B_1B1​ into three (potentially empty) regions: the parts before, between, and after their endpoints. For instance, if B3B_3B3​ has edge ((x1,y,z),(x2,y,z))( (x_1,y,z) , (x_2,y,z) )((x1​,y,z),(x2​,y,z)) with x1 usize { fn width(span: Span) -> usize { usize::try_from(span[1] - span[0] + 1).unwrap() } let &Cuboid { x_range, y_range, z_range, } = self; width(x_range) * width(y_range) * width(z_range) } } impl Cuboid { fn intersection(&self, other: &Self) -> Option { fn span_intersection(span1: Span, span2: Span) -> Option { let lower = span1[0].max(span2[0]); let upper = span1[1].min(span2[1]); if upper Vec { fn get_spans(my_span: Span, intersection_span: Span) -> [Option; 3] { let span1 = if my_span[0] == intersection_span[0] { None } else { Some([my_span[0], intersection_span[0] - 1]) }; let span2 = Some(intersection_span); let span3 = if intersection_span[1] == my_span[1] { None } else { Some([intersection_span[1] + 1, my_span[1]]) }; [span1, span2, span3] } let intersection = match self.intersection(other) { Some(c) => c, None => return vec![*self], }; let x_ranges = get_spans(self.x_range, intersection.x_range); let y_ranges = get_spans(self.y_range, intersection.y_range); let z_ranges = get_spans(self.z_range, intersection.z_range); let mut on_cuboids = Vec::::new(); for &x_range in x_ranges.iter().flatten() { for &y_range in y_ranges.iter().flatten() { for &z_range in z_ranges.iter().flatten() { if x_range != intersection.x_range || y_range != intersection.y_range || z_range != intersection.z_range { on_cuboids.push(Cuboid { x_range, y_range, z_range, }); } } } } // Iteratively merge the split-up cuboids together, where possible. For instance, // if the middle of a cuboid was removed, there are 26 small cuboids created, but they // can be merged into six larger cuboids. This is done by looking for abutting // cuboids with the same dimensions along their respective abutting faces and // combining them into one cuboid. 'merge: loop { for ( i, &c1 @ Cuboid { x_range, y_range, z_range, }, ) in on_cuboids.iter().enumerate() { for (j, &c2) in on_cuboids.iter().enumerate().skip(i + 1) { let mut cs = [c1, c2]; let mut merged_cuboid = None; if y_range == c2.y_range && z_range == c2.z_range { cs.sort_by_key(|c| c.x_range); if cs[0].x_range[1] == cs[1].x_range[0] - 1 { merged_cuboid = Some(Cuboid { x_range: [cs[0].x_range[0], cs[1].x_range[1]], y_range, z_range, }); } } else if x_range == c2.x_range && z_range == c2.z_range { cs.sort_by_key(|c| c.y_range); if cs[0].y_range[1] == cs[1].y_range[0] - 1 { merged_cuboid = Some(Cuboid { x_range, y_range: [cs[0].y_range[0], cs[1].y_range[1]], z_range, }); } } else if x_range == c2.x_range && y_range == c2.y_range { cs.sort_by_key(|c| c.z_range); if cs[0].z_range[1] == cs[1].z_range[0] - 1 { merged_cuboid = Some(Cuboid { x_range, y_range, z_range: [cs[0].z_range[0], cs[1].z_range[1]], }); } } if let Some(merged_cuboid) = merged_cuboid { on_cuboids.swap_remove(j); on_cuboids.swap_remove(i); on_cuboids.push(merged_cuboid); continue 'merge; } } } break; } on_cuboids } } impl Cuboid { fn from_coords_str(s: &str) -> Option { let mut coords = s.split(','); let mut comps = (0..3).filter_map(|_| { coords .next()? .split('=') .nth_back(0)? .split('.') .filter_map(|splat| splat.parse().ok()) .collect::>() .try_into() .ok() }); let x_range = comps.next()?; let y_range = comps.next()?; let z_range = comps.next()?; Some(Self { x_range, y_range, z_range, }) } } #[derive(Debug, Clone, Copy)] enum State { On, Off, } impl State { fn from_str(s: &str) -> Option { Some(match s { \"on\" => Self::On, \"off\" => Self::Off, _ => return None, }) } } #[derive(Debug, Clone, Copy)] struct RebootStep { state: State, cuboid: Cuboid, } impl RebootStep { fn from_line(line: &str) -> Option { let mut str_comps = line.split_ascii_whitespace(); let state = State::from_str(str_comps.next()?)?; let cuboid = Cuboid::from_coords_str(str_comps.next()?)?; Some(Self { state, cuboid }) } } #[derive(Debug)] struct Grid { on_cuboids: Vec, bounds: Option, } impl Grid { fn new_with_size(n: i32) -> Self { Grid { on_cuboids: vec![], bounds: Some(Cuboid { x_range: [-n, n], y_range: [-n, n], z_range: [-n, n], }), } } fn new_unbounded() -> Self { Grid { on_cuboids: vec![], bounds: None, } } fn apply_step(&mut self, RebootStep { state, cuboid }: &RebootStep) -> Option { let cuboid = if let Some(bounds) = self.bounds { cuboid.intersection(&bounds)? } else { *cuboid }; match state { State::On => { self.on_cuboids.push(cuboid); } State::Off => { let mut on_cuboids = vec![]; for my_cuboid in &self.on_cuboids { on_cuboids.extend(my_cuboid.difference(&cuboid)); } self.on_cuboids = on_cuboids; } }; Some(()) } fn n_on(&self) -> usize { let mut nonintersecting_cuboids = vec![]; for (i, &c1) in self.on_cuboids.iter().enumerate() { let mut pieces = vec![c1]; for &c2 in self.on_cuboids.iter().skip(i + 1) { pieces = pieces .into_iter() .flat_map(|piece| piece.difference(&c2)) .collect(); } nonintersecting_cuboids.extend(pieces); } nonintersecting_cuboids .iter() .fold(0, |accum, cuboid| accum + cuboid.size()) } } fn read_input(input: &str) -> Option> { input .lines() .map(RebootStep::from_line) .collect::>>() } fn ans_for_input(input: &str) -> Answer { let steps = read_input(input).unwrap(); (22, (pt1(steps.iter()), pt2(steps.iter()))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } Parts 1 and 2 ask us to perform the same sequence of operations. In Part 1 this sequence occurs is in a bounded space (presumably in a space small enough for it to have been feasible to store each small cube individually). In Part 2 this sequence occurs in an unbounded space, which is where the savings that come from doing cube intersections become important. fn pt1>(steps: impl Iterator) -> usize { let mut grid = Grid::new_with_size(50); for step in steps { grid.apply_step(step.borrow()); } grid.n_on() } fn pt2>(steps: impl Iterator) -> usize { let mut grid = Grid::new_unbounded(); for step in steps { grid.apply_step(step.borrow()); } grid.n_on() }","title":"Day 22: Reactor Reboot","component":"ROOT","version":"","name":"soln","url":"/src/day_22/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"24":{"id":24,"text":"Day #23 problem description │ Problem input We have to find the ways that agents (amphipods) can move from some initial on a grid to some final state given a number of movement constraints. Each agent has a different cost associated with movement. This is another classic graph exploration problem solvable with a priority queue; unfortunately a naive solution is computationally infeasible. The crux of solving this problem efficiently is realizing that there are many, many equivalent sequences of moves; rather than consider them all, we only consider those comprised of the fewest atomic moves in which, roughly speaking, a single amphipod moves as far as possible. Some examples of simplifications to the ruleset: It makes no sense to consider an amphipod moving within its initial room unless that move takes it out of the room; a disjoint sequence of moves inside the room can be reordered into a single move from the starting point to the room’s doorway. No amphipod should ever move deeper into its initial room; it should only ever move toward the doorway, and then from the doorway to some spot in the hallway. The rules state that an amphipod can only move into its final side room when it is already possible to move into the last unoccupied square in that room. Therefore, when an amphipod currently in the hallway moves from the hallway into its final side room, it should move as far into that side room as possible. Considering all simplifications and move reorderings, there are in fact only a handful of moves worth considering at each stage: An amphipod at its starting point in some side room can move to somewhere in the hallway as long as that starting point isn’t also its final destination. As long as any amphipod can move to its final spot in its final side room, it should move there on this move. In other words, no amphipod should move while another amphipod can move to its final destination, as this move would be a needless entry in the priority queue. (If two amphipods can both move to their final side rooms, pick one for this turn arbitrarily.) An amphipod that is currently in its final position — as far to the back in its side room as it can go, with no other-kinded amphipods between it and the back of its room — should not move at all. This keeps the number of moves considered tiny, making the search for the cheapest path through the graph run very quickly. Most of the setup is just creating an array wrapper type that is indexable by amphipods. (Thanks to Rust’s const generics, this type is statically sized.) This is achieved by simply assigning an integer from 0 to N_AMPHIPODS-1 to each amphipod and using that as the index. Because the arrays are static, we get an additional performance boost compared to using a heap-allocated Vec. (Due to laziness, I created two separate copies of the input, rather than perform the modification to the input for Part 2 as described in the problem statement.) use crate::{utils::abs_diff, Answer}; use hashbrown::hash_map::DefaultHashBuilder; use ndarray::prelude::*; use priority_queue::PriorityQueue; use std::{ collections::{BTreeMap as Map, BTreeSet}, fmt::Write, }; type Point = [usize; 2]; const ROW: usize = 0; const COL: usize = 1; #[derive(Eq, PartialEq, Debug)] struct Cost(usize); impl std::cmp::Ord for Cost { fn cmp(&self, other: &Self) -> std::cmp::Ordering { std::cmp::Reverse(self.0).cmp(&std::cmp::Reverse(other.0)) } } impl std::cmp::PartialOrd for Cost { fn partial_cmp(&self, other: &Self) -> Option { Some(self.cmp(other)) } } #[derive(Debug, Hash, PartialEq, Eq, PartialOrd, Ord, Clone, Copy)] #[repr(usize)] enum AmphipodKind { A = 0, B, C, D, } impl AmphipodKind { const fn n_kinds() -> usize { 4 } const fn from_usize(n: usize) -> Self { use AmphipodKind::*; match n { 0 => A, 1 => B, 2 => C, 3 => D, _ => panic!(\"Cannot construct an AmphipodKind from n >= 4\"), } } const fn from_char(c: char) -> Self { use AmphipodKind::*; match c { 'A' => A, 'B' => B, 'C' => C, 'D' => D, _ => panic!(\"Cannot construct an AmphipodKind from c not in [A, B, C, D]\"), } } const fn for_col(col: usize) -> Option { use AmphipodKind::*; Some(match col { 3 => A, 5 => B, 7 => C, 9 => D, _ => return None, }) } const fn dest_col(self) -> usize { use AmphipodKind::*; match self { A => 3, B => 5, C => 7, D => 9, } } fn energy(self) -> usize { use AmphipodKind::*; match self { A => 1, B => 10, C => 100, D => 1000, } } } #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)] struct Amphipod { kind: AmphipodKind, index: usize, } #[derive(Debug, Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord)] struct AmphipodIndexed([T; N]); impl AmphipodIndexed { const fn n_amphipods_per_kind() -> usize { N / AmphipodKind::n_kinds() } const fn index_for(am: Amphipod) -> usize { Self::n_amphipods_per_kind() * (am.kind as usize) + am.index } fn iter_items(&self) -> impl Iterator { self.0.iter().enumerate().map(|(i, x)| { ( Amphipod { kind: AmphipodKind::from_usize(i / Self::n_amphipods_per_kind()), index: i % Self::n_amphipods_per_kind(), }, x, ) }) } } impl std::ops::Index for AmphipodIndexed { type Output = T; fn index(&self, am: Amphipod) -> &Self::Output { &self.0[Self::index_for(am)] } } impl std::ops::IndexMut for AmphipodIndexed { fn index_mut(&mut self, am: Amphipod) -> &mut Self::Output { &mut self.0[Self::index_for(am)] } } #[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, PartialOrd, Ord)] enum Tile { Wall, Hallway, Doorway, SideRoom(AmphipodKind), } #[derive(Debug)] struct InstantiatedBurrow { burrow: Burrow, amphipod_locs: AmphipodIndexed, } impl InstantiatedBurrow { fn from_str(s: &str) -> Option { use Tile::*; let mut width = 0_usize; let mut height = 0_usize; let mut tiles_map = Map::new(); let mut amphipod_locs_map = Map::new(); let mut amphipod_kind_counts = [0_usize; 4]; for (row, line) in s.lines().enumerate() { height += 1; for (col, c) in line.chars().enumerate() { if row == 0 { width += 1; } let tile = match c { '#' | ' ' => Wall, '.' => Hallway, 'A' | 'B' | 'C' | 'D' => { let amphipod_kind = AmphipodKind::from_char(c); amphipod_locs_map.insert( Amphipod { kind: amphipod_kind, index: amphipod_kind_counts[amphipod_kind as usize], }, [row, col], ); amphipod_kind_counts[amphipod_kind as usize] += 1; SideRoom(AmphipodKind::for_col(col)?) } _ => return None, }; tiles_map.insert((row, col), tile); } } let mut tiles = Array2::from_shape_fn((height, width), |(row, col)| { *tiles_map.get(&(row, col)).unwrap_or(&Wall) }); for row in 0..tiles.nrows() { for col in 0..tiles.ncols() { if matches!(tiles[[row, col]], Hallway) && matches!(tiles[[row + 1, col]], SideRoom(_)) { tiles[[row, col]] = Doorway; } } } let amphipod_locs = { let mut locs = AmphipodIndexed( vec![[usize::MAX; 2]; amphipod_locs_map.len()] .try_into() .unwrap(), ); for (&am, &loc) in &hipod_locs_map { locs[am] = loc; } locs }; Some(Self { burrow: Burrow { tiles }, amphipod_locs, }) } } #[derive(Debug)] struct Burrow { tiles: Array2, } The Algorithm impl Burrow { fn solve(&self, initial_locs: &AmphipodIndexed) -> Cost { const N_KINDS: usize = AmphipodKind::n_kinds(); #[derive(Debug)] struct Update { amphipod: Amphipod, n_steps: usize, new_state: SingleAmphipodState, } #[derive(Clone, Copy, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)] struct SingleAmphipodState { loc: Point, is_done: bool, } type AllAmphipodStates = AmphipodIndexed; fn enqueue( seen: &mut BTreeSet>, pq: &mut PriorityQueue, Cost, H>, state: AllAmphipodStates, cost: Cost, ) { if seen.contains(&state) { return; } seen.insert(state); pq.push_increase(state, cost); } let hallway_row = 1; let sideroom_max_row = self.tiles.nrows() - 2; let mut pq = PriorityQueue::::with_default_hasher(); let mut seen = BTreeSet::new(); let tiles = &self.tiles; let initial_state = AmphipodIndexed(initial_locs.0.map(|loc| SingleAmphipodState { loc, is_done: false, })); pq.push(initial_state, Cost(0)); let mut updates = Vec::new(); while let Some((total_state, cost)) = pq.pop() { updates.clear(); if total_state .iter_items() .all(|(am, state)| tiles[state.loc] == Tile::SideRoom(am.kind)) { return cost; } let amphipod_locs = total_state .iter_items() .map(|(am, state)| (state.loc, am)) .collect::>(); let n_in_correct_sideroom_by_kind = { let mut arr = [0_usize; N_KINDS]; for (am, state) in total_state.iter_items() { if tiles[state.loc] == Tile::SideRoom(am.kind) { arr[am.kind as usize] += 1; } } arr }; let siderooms_available_for_amphipods = [0, 1, 2, 3].zip([3, 5, 7, 9_usize]).map(|(i, col)| { (hallway_row + 1..=sideroom_max_row).all(|row| { amphipod_locs .get(&[row, col]) .map_or(true, |am| am.kind as usize == i) }) }); let update_that_moves_am_to_final_loc = total_state.iter_items().find_map(|(am, &state)| { if state.is_done || !siderooms_available_for_amphipods[am.kind as usize] { return None; } let curr_loc = state.loc; let dest_col = am.kind.dest_col(); let sideroom_last_empty_row = sideroom_max_row - n_in_correct_sideroom_by_kind[am.kind as usize]; let new_loc = [sideroom_last_empty_row, dest_col]; if curr_loc[COL] == dest_col && curr_loc[ROW] >= sideroom_last_empty_row { return Some(Update { amphipod: am, n_steps: 0, new_state: SingleAmphipodState { loc: curr_loc, is_done: true, }, }); } let [curr_row, curr_col] = curr_loc; for row in hallway_row..curr_row { if amphipod_locs.contains_key(&[row, curr_col]) { return None; } } #[allow(clippy::range_minus_one)] let col_range = if curr_col ; 2] { for col in range { let new_loc = [hallway_row, col]; if amphipod_locs.contains_key(&new_loc) || tiles[new_loc] == Tile::Wall { break; } if tiles[new_loc] == Tile::Doorway { continue; } updates.push(Update { amphipod: am, n_steps: n_steps_to_hallway + abs_diff(col, curr_loc[COL]), new_state: SingleAmphipodState { loc: new_loc, is_done: false, }, }); } } } } for &Update { amphipod: am, n_steps, new_state, } in &updates { let mut new_total_state = total_state; new_total_state[am] = new_state; enqueue( &mut seen, &mut pq, new_total_state, Cost(cost.0 + n_steps * am.kind.energy()), ); } } panic!(\"Could not find a path to the finish line!\"); } } pub fn ans() -> Answer { (23, (pt1(), pt2())).into() } fn pt1() -> usize { let b = InstantiatedBurrow::::from_str(include_str!(\"input_1.txt\")).unwrap(); b.burrow.solve(&b.amphipod_locs).0 } fn pt2() -> usize { let b = InstantiatedBurrow::::from_str(include_str!(\"input_2.txt\")).unwrap(); b.burrow.solve(&b.amphipod_locs).0 }","title":"Day 23: Amphipod","component":"ROOT","version":"","name":"soln","url":"/src/day_23/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"25":{"id":25,"text":"Day #24 problem description │ Problem input This problem asks us to do two things: Implement a simple processor, with four registers W, X, Y, and Z all initialized to 0, that accepts a program to run. Find the inputs to this program that will lead to the processor’s Z register containing 0 when its input has been entirely consumed, which we’ll refer to as “acceptable inputs”. The specific program that this problem gives us reads in 14 digits of input, so it looks something like this: read 1st digit of input into W register read 2nd digit of input into W register read 3rd digit of input into W register …​ read 14th digit of input into W register check if register Z is 0 We will refer to the list of instructions from one read instruction up to, but excluding, the next read instruction — such as the instructions contained in lines 1 and 2 of the above text — as an “instruction block”. Note that while the inputs to the program are digits in the range [1, 9], the registers can contain arbitrary integers. For instance the program could read 8 into W, copy W to X, read 9 into W, multiply W and X, and write the result to Z; then Z would have a value of 72. use crate::Answer; use std::{ collections::{BTreeMap as Map, BTreeSet as Set}, ops::{Index, IndexMut}, }; type Num = i32; type Output = String; #[derive(Debug, Clone, Copy)] enum Operand { Number(Num), Reg(Register), } impl Operand { fn from_str(s: &str) -> Option { use Operand::*; Some(match s.parse().ok() { Some(val) => Number(val), None => Reg(Register::from_str(s)?), }) } } #[derive(Debug, Clone, Copy)] enum MathOp { Add, Mul, Div, Mod, Eql, } impl MathOp { fn from_str(s: &str) -> Option { use MathOp::*; Some(match s { \"add\" => Add, \"mul\" => Mul, \"div\" => Div, \"mod\" => Mod, \"eql\" => Eql, _ => return None, }) } } #[derive(Debug, Clone)] struct MathInstr { operation: MathOp, register: Register, operand: Operand, } #[derive(Debug)] struct InstrBlock { in_reg: Register, instrs: Vec, } #[derive(Debug, Clone, Copy)] enum Register { W = 0, X, Y, Z, } impl Register { fn from_str(s: &str) -> Option { use Register::*; Some(match s { \"w\" => W, \"x\" => X, \"y\" => Y, \"z\" => Z, _ => return None, }) } } #[derive(Debug)] struct Alu { registers: [Num; 4], } impl Index for Alu { type Output = Num; fn index(&self, register: Register) -> &Self::Output { &self.registers[register as usize] } } impl IndexMut for Alu { fn index_mut(&mut self, register: Register) -> &mut Self::Output { &mut self.registers[register as usize] } } impl Alu { fn new() -> Self { Self { registers: [0; 4] } } fn run_block(&mut self, block: &InstrBlock, input: Num) { use MathOp::*; use Operand::*; self[block.in_reg] = input; for &MathInstr { operation, register, operand, } in &block.instrs { let value = match operand { Number(n) => n, Reg(register) => self[register], }; let r = &mut self[register]; match operation { Add => *r += value, Mul => *r *= value, Div => *r /= value, Mod => *r %= value, Eql => *r = if r == &value { 1 } else { 0 }, } } } fn from_running_block_on( block: &InstrBlock, input: Num, setup: impl FnOnce(&mut Self), ) -> Self { let mut alu = Alu::new(); setup(&mut alu); alu.run_block(block, input); alu } } fn read_input(s: &str) -> Option> { let mut blocks = vec![]; let mut curr_in_reg = None; let mut curr_instrs = vec![]; // Dummy input line at the end that tells the last block it's done for line in s.lines().chain(std::iter::once(\"inp x\")) { let mut splat = line.split_ascii_whitespace(); let instr_str = splat.next()?; if instr_str == \"inp\" { if let Some(r) = curr_in_reg { blocks.push(InstrBlock { in_reg: r, instrs: curr_instrs.clone(), }); } curr_in_reg = Some(Register::from_str(splat.next()?)?); curr_instrs.clear(); } else { let operation = MathOp::from_str(instr_str)?; let register = Register::from_str(splat.next()?)?; let operand = Operand::from_str(splat.next()?)?; curr_instrs.push(MathInstr { operation, register, operand, }); } } Some(blocks) } fn ans_for_input(input: &str) -> Answer { let blocks = read_input(input).unwrap(); let valid_zs = get_valid_zs(&blocks); (24, (pt1(&blocks, &valid_zs), pt2(&blocks, &valid_zs))).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } The Algorithm A naive solution that ran the program on every every possibility from 1014 to 1015−1 would need to check 9×1014 possibilities, which would be computationally infeasible. (Trust me, I tried. Did not get very far before searching for a better way.) Instead, we use the fact that the set of register values achievable by instruction block k is actually quite small (compared to 9×1014). The algorithm is as follows: Before reading any input, the Z register has an initial value of z0 = 0. Phase 1: We find the set of values z1 of the Z register after instruction block 1 reads in a digit. For each z1, we find the set of values z2 of the Z register after instruction block 2 reads in a digit, and record for each z2 which values of z1 led to it. For each z2, we find the set of values z3 of the Z register after instruction block 3 reads in a digit, and record for each z3 which values of z2 led to it. This continues until we reach the end, at which point we will have a massive number of z14s linked to their preceding z13s, each of which is linked to its preceding z12s, each of which is linked to its preceding z11s, etc., going all the way back to the z1s, which point to z0 = 0. Phase 2: But we know we’re only concerned with inputs that lead to a final value of z14 = 0. So keep only those z13s that led to z14 = 0. Then keep only those z12s that led to those z13s. Then keep only those z11s that to those z12s. Repeat, going all the way back to find only those z1s that led to those z2s. This produces a diamond-shaped graph, which starts out small at z0 = 0, fans out in the middle, and then shrinks again as it approaches z14 = 0. Phase 3: Now that we have this graph, we’re almost done. A 14-digit input that causes the Z register’s final value to be 0 can be found by finding sequences of digits that take us all the way through the graph from left to right. So, if we’ve read in, say, 12345, and digit 6 does not lead to a permissible z6 value, then we know that 123456 is not the first six digits of any acceptable input. The problem asks us specifically for the largest and smallest acceptable inputs. To find these, we simply do a DFS on this graph, preferentially walking along edges formed by the largest digits, but backtracking to a smaller digit where necessary. To reduce code duplication, this DFS algorithm takes function parameters that give it the next digit to look at or tell it when to backtrack (since, for instance, it will need to backtrack when hitting d=1 when searching for the largest acceptable input but when d=9 for the smallest acceptable input). fn get_valid_zs(blocks: impl AsRef) -> Vec> { let blocks = blocks.as_ref(); let n_digits = blocks.len(); let mut all_zs_ltr = vec![Map::new(); n_digits + 1]; all_zs_ltr.first_mut().unwrap().insert(0, Set::new()); for (digit_idx, block) in blocks.iter().enumerate() { let (all_prev_zs, all_next_zs) = all_zs_ltr.split_at_mut(digit_idx + 1); let prev_zs = &all_prev_zs[all_prev_zs.len() - 1]; let curr_zs = &mut all_next_zs[0]; for &prev_z in prev_zs.keys() { for digit in 1..=9 { let z = Alu::from_running_block_on(block, digit, |alu| alu[Register::Z] = prev_z) [Register::Z]; curr_zs.entry(z).or_insert_with(Set::new).insert(prev_z); } } } let mut all_valid_zs_rtl = vec![Set::new(); n_digits]; let mut curr_zs = std::iter::once(0).collect::>(); for (digit_idx, valid_zs) in all_valid_zs_rtl.iter_mut().enumerate().rev() { valid_zs.extend(curr_zs.iter().copied()); let mut new_curr_zs = Set::new(); let prev_zs = &all_zs_ltr[digit_idx + 1]; for z in &curr_zs { new_curr_zs.extend(prev_zs.get(z).unwrap().iter().copied()); } curr_zs = new_curr_zs; } all_valid_zs_rtl } fn find_digits>( blocks: impl AsRef, valid_zs: impl AsRef]>, first_digit: Num, attempted_digit_range_ctor: impl Fn(Num) -> DigitRange, get_next_digit: impl Fn(Num) -> Num, can_continue: impl Fn(Num) -> bool, ) -> Output { struct CandidateDigit { z_init: Num, digit: Num, next_digit_attempted: Num, } let blocks = blocks.as_ref(); let valid_zs = valid_zs.as_ref(); let n_digits = blocks.len(); let mut candidates = vec![CandidateDigit { z_init: 0, digit: 0, next_digit_attempted: first_digit, }]; 'find_digits: while candidates.len() >() .join(\"\") } fn pt1(blocks: impl AsRef, valid_zs: impl AsRef]>) -> Output { find_digits( blocks, valid_zs, 9, |digit| (1..=digit).rev(), |digit| digit - 1, |digit| digit > 1, ) } fn pt2(blocks: impl AsRef, valid_zs: impl AsRef]>) -> Output { find_digits( blocks, valid_zs, 1, |digit| digit..=9, |digit| digit + 1, |digit| digit < 9, ) }","title":"Day 24: Arithmetic Logic Unit","component":"ROOT","version":"","name":"soln","url":"/src/day_24/soln","titles":[{"text":"Setup","hash":"_setup","id":1},{"text":"Parts 1 and 2","hash":"_parts_1_and_2","id":2}]},"26":{"id":26,"text":"Day #25 problem description │ Problem input Simple array manipulation. Not interesting! use crate::Answer; use std::{collections::BTreeSet as Set, fmt::Write}; #[derive(Clone, Copy, Debug, PartialEq, Eq, PartialOrd, Ord)] struct Point { row: usize, col: usize, } #[derive(Debug, Clone)] struct SeaGarden { width: usize, height: usize, rights: Set, downs: Set, } impl SeaGarden { fn from_str(input: &str) -> Self { let mut rights = Set::new(); let mut downs = Set::new(); let mut width = 0; let mut height = 0; for (row, line) in input.lines().enumerate() { height += 1; width = line.chars().count(); for (col, c) in line.chars().enumerate() { let loc = Point { row, col }; match c { '>' => rights.insert(loc), 'v' => downs.insert(loc), '.' => continue, _ => unreachable!(), }; } } Self { width, height, rights, downs, } } fn tick(&mut self) -> bool { let mut any_cucumbers_did_move = false; let mut new_rights = Set::new(); for old_loc @ &Point { row, col } in &self.rights { let new_loc = Point { row, col: (col + 1) % self.width, }; if self.rights.contains(&new_loc) || self.downs.contains(&new_loc) { new_rights.insert(*old_loc); } else { new_rights.insert(new_loc); any_cucumbers_did_move = true; } } let new_rights = new_rights; let mut new_downs = Set::new(); for old_loc @ &Point { row, col } in &self.downs { let new_loc = Point { row: (row + 1) % self.height, col, }; if new_rights.contains(&new_loc) || self.downs.contains(&new_loc) { new_downs.insert(*old_loc); } else { new_downs.insert(new_loc); any_cucumbers_did_move = true; } } self.rights = new_rights; self.downs = new_downs; any_cucumbers_did_move } fn run_until_no_movement(&mut self) -> usize { let mut n = 1; while self.tick() { n += 1; } n } } fn ans_for_input(input: &str) -> Answer { let mut garden = SeaGarden::from_str(input); (25, (pt1(&mut garden), 0)).into() } pub fn ans() -> Answer { ans_for_input(include_str!(\"input.txt\")) } fn pt1(garden: &mut SeaGarden) -> usize { garden.run_until_no_movement() }","title":"Day 25: Sea Cucumber","component":"ROOT","version":"","name":"soln","url":"/src/day_25/soln","titles":[{"text":"Setup and Part 1 (there was no Part 2)","hash":"_setup_and_part_1_there_was_no_part_2","id":1}]}},"components":{},"componentVersions":{"ROOT/":{"displayVersion":"default","title":"Solutions","version":"","name":"ROOT","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlightjs-ext","site-title":"Robert Bennett — Advent of Code 2021","site-url":"/advent-of-code-2021","page-antora-site-homepage":"/advent-of-code-2021","src-dir":"src","hide-uri-scheme":true,"click-to-reveal":"Click to reveal answer","caution-caption":true,"soln-description-title":"Description of Solution","setup-title":"Setup","part-title":"Part","page-pagination":true,"link-sep":"│"},"sourcemap":false,"extensions":[{}]},"url":"/","navigation":[{"items":[{"content":"Day 1: Sonar Sweep","url":"/src/day_01/soln","urlType":"internal"},{"content":"Day 2: Dive!","url":"/src/day_02/soln","urlType":"internal"},{"content":"Day 3: Binary Diagnostic","url":"/src/day_03/soln","urlType":"internal"},{"content":"Day 4: Giant Squid","url":"/src/day_04/soln","urlType":"internal"},{"content":"Day 5: Hydrothermal Venture","url":"/src/day_05/soln","urlType":"internal"},{"content":"Day 6: Lanternfish","url":"/src/day_06/soln","urlType":"internal"},{"content":"Day 7: The Treachery of Whales","url":"/src/day_07/soln","urlType":"internal"},{"content":"Day 8: Seven Segment Search","url":"/src/day_08/soln","urlType":"internal"},{"content":"Day 9: Smoke Basin","url":"/src/day_09/soln","urlType":"internal"},{"content":"Day 10: Syntax Scoring","url":"/src/day_10/soln","urlType":"internal"},{"content":"Day 11: Dumbo Octopus","url":"/src/day_11/soln","urlType":"internal"},{"content":"Day 12: Passage Pathing","url":"/src/day_12/soln","urlType":"internal"},{"content":"Day 13: Transparent Origami","url":"/src/day_13/soln","urlType":"internal"},{"content":"Day 14: Extended Polymerization","url":"/src/day_14/soln","urlType":"internal"},{"content":"Day 15: Chiton","url":"/src/day_15/soln","urlType":"internal"},{"content":"Day 16: Packet Decoder","url":"/src/day_16/soln","urlType":"internal"},{"content":"Day 17: Trick Shot","url":"/src/day_17/soln","urlType":"internal"},{"content":"Day 18: Snailfish","url":"/src/day_18/soln","urlType":"internal"},{"content":"Day 19: Beacon Scanner","url":"/src/day_19/soln","urlType":"internal"},{"content":"Day 20: Trench Map","url":"/src/day_20/soln","urlType":"internal"},{"content":"Day 21: Dirac Dice","url":"/src/day_21/soln","urlType":"internal"},{"content":"Day 22: Reactor Reboot","url":"/src/day_22/soln","urlType":"internal"},{"content":"Day 23: Amphipod","url":"/src/day_23/soln","urlType":"internal"},{"content":"Day 24: Arithmetic Logic Unit","url":"/src/day_24/soln","urlType":"internal"},{"content":"Day 25: Sea Cucumber","url":"/src/day_25/soln","urlType":"internal"}],"root":true,"order":0}]}}}})